{
  "title": "Subnet Configuration",
  "test_description": "Validate that the Azure Virtual Network has the required number of subnets with proper CIDR configuration",
  "version": "1.0",
  "test_code": "IQ-107-1",
  "test_seq": 1,
  "test_suite": "IQ-107",
  "test_suite_title": "Network Configuration",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "get_workspace_managed_rg",
      "method": "GET",
      "api_url": "https://management.azure.com/subscriptions/${subscription_id}/resourceGroups/${resource_group}/providers/Microsoft.Databricks/workspaces/${workspace_name}?api-version=2024-05-01",
      "headers": {
        "Authorization": "Bearer ${azure_token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const managedResourceGroup = responseData?.properties?.managedResourceGroupId; const effectiveResourceGroup = managedResourceGroup ? managedResourceGroup.split('/').pop() : currentVariables.resource_group; return { ...currentVariables, managed_resource_group: managedResourceGroup, effective_resource_group: effectiveResourceGroup }; }"
    },
    {
      "step": 2,
      "name": "get_vnet_subnets",
      "method": "GET", 
      "api_url": "https://management.azure.com/subscriptions/${subscription_id}/resourceGroups/${effective_resource_group}/providers/Microsoft.Network/virtualNetworks/${vnet_name}/subnets?api-version=2022-09-01",
      "headers": {
        "Authorization": "Bearer ${azure_token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const subnetsData = responseData?.value || []; return { ...currentVariables, subnet_count: subnetsData.length, subnets_data: subnetsData }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const workspaceStep = stepResults.get_workspace_managed_rg; const subnetStep = stepResults.get_vnet_subnets; const requiredSubnets = variables.iq_107_1_required_subnets || 3; const requiredCidr = variables.iq_107_1_cidr_block || '/24'; const expected_result = `Subnets: ${requiredSubnets} AZs with ${requiredCidr} CIDR`; let actual_result = 'Subnets: Not found'; if (workspaceStep.error) { return { status: 'fail', message: 'Failed to get workspace managed resource group', code: 'WORKSPACE_RG_FAILED', test_id: 'IQ-107-1', title: 'Subnet Configuration', expected_result, actual_result }; } if (subnetStep.error) { return { status: 'fail', message: 'Failed to get VNet subnets', code: 'VNET_SUBNETS_FAILED', test_id: 'IQ-107-1', title: 'Subnet Configuration', expected_result, actual_result }; } const subnetsData = subnetStep.data?.value || []; const subnetCount = subnetsData.length; let matchingCidrCount = 0; const foundCidrs = []; for (const subnet of subnetsData) { const addressPrefix = subnet.properties?.addressPrefix || ''; if (addressPrefix.includes(requiredCidr)) { matchingCidrCount++; foundCidrs.push(addressPrefix); } } if (subnetCount >= requiredSubnets && matchingCidrCount > 0) { actual_result = `Subnets: ${subnetCount} found, ${matchingCidrCount} with ${requiredCidr} CIDR`; return { status: 'pass', message: `Network segmentation requirements met. Found ${subnetCount} subnets with ${matchingCidrCount} using ${requiredCidr} CIDR.`, code: 'SUBNETS_OK', test_id: 'IQ-107-1', title: 'Subnet Configuration', expected_result, actual_result }; } else { actual_result = `Subnets: ${subnetCount} found, ${matchingCidrCount} with ${requiredCidr} CIDR (required: ${requiredSubnets})`; return { status: 'fail', message: `Network segmentation requirements not met. Found ${subnetCount} subnets with ${matchingCidrCount} using ${requiredCidr} CIDR. Need at least ${requiredSubnets} subnets.`, code: 'SUBNETS_INSUFFICIENT', test_id: 'IQ-107-1', title: 'Subnet Configuration', expected_result, actual_result }; } }"
} 