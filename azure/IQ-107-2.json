{
  "title": "Security Groups - Port Validation",
  "test_description": "Validate Network Security Group (NSG) rules to ensure proper security configuration with only necessary ports open",
  "version": "1.0",
  "test_code": "IQ-107-2",
  "test_seq": 2,
  "test_suite": "IQ-107",
  "test_suite_title": "Network Configuration",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "get_workspace_managed_rg",
      "method": "GET",
      "api_url": "https://management.azure.com/subscriptions/${subscription_id}/resourceGroups/${resource_group}/providers/Microsoft.Databricks/workspaces/${workspace_name}?api-version=2024-05-01",
      "headers": {
        "Authorization": "Bearer ${azure_token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const managedResourceGroup = responseData?.properties?.managedResourceGroupId; const effectiveResourceGroup = managedResourceGroup ? managedResourceGroup.split('/').pop() : currentVariables.resource_group; return { ...currentVariables, managed_resource_group: managedResourceGroup, effective_resource_group: effectiveResourceGroup }; }"
    },
    {
      "step": 2,
      "name": "get_nsg_rules",
      "method": "GET", 
      "api_url": "https://management.azure.com/subscriptions/${subscription_id}/resourceGroups/${effective_resource_group}/providers/Microsoft.Network/networkSecurityGroups/${nsg_name}?api-version=2022-09-01",
      "headers": {
        "Authorization": "Bearer ${azure_token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const securityRules = responseData?.properties?.securityRules || []; const defaultRules = responseData?.properties?.defaultSecurityRules || []; return { ...currentVariables, security_rules: securityRules, default_rules: defaultRules, nsg_name: responseData?.name }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const workspaceStep = stepResults.get_workspace_managed_rg; const nsgStep = stepResults.get_nsg_rules; const expected_result = 'Security Groups: Only 443/3306 open'; let actual_result = 'Security Groups: Not found'; if (workspaceStep.error) { return { status: 'fail', message: 'Failed to get workspace managed resource group', code: 'WORKSPACE_RG_FAILED', test_id: 'IQ-107-2', title: 'Security Groups - Port Validation', expected_result, actual_result }; } if (nsgStep.error) { return { status: 'fail', message: 'Failed to get NSG rules', code: 'NSG_RULES_FAILED', test_id: 'IQ-107-2', title: 'Security Groups - Port Validation', expected_result, actual_result }; } const securityRules = nsgStep.data?.properties?.securityRules || []; const defaultRules = nsgStep.data?.properties?.defaultSecurityRules || []; const allRules = [...securityRules, ...defaultRules]; const allowedPorts = variables.iq_107_2_allowed_ports || [443, 3306]; const openPorts = new Set(); const restrictedPorts = new Set(); for (const rule of allRules) { const props = rule.properties || {}; if (props.access === 'Allow' && props.direction === 'Inbound') { const destinationPort = props.destinationPortRange || '*'; if (destinationPort === '*') { openPorts.add('ALL_PORTS'); } else if (destinationPort.includes(',')) { destinationPort.split(',').forEach(p => openPorts.add(p.trim())); } else if (/^\\d+$/.test(destinationPort)) { openPorts.add(destinationPort); } else if (destinationPort.includes('-')) { const [start, end] = destinationPort.split('-').map(Number); if (!isNaN(start) && !isNaN(end)) { for (let port = start; port <= end; port++) { openPorts.add(port.toString()); } } } } } const openPortsArray = Array.from(openPorts).filter(p => p !== 'ALL_PORTS').map(Number).filter(n => !isNaN(n)).sort((a, b) => a - b); const hasAllPortsOpen = openPorts.has('ALL_PORTS'); const hasRestrictedPorts = openPortsArray.some(port => !allowedPorts.includes(port)); if (hasAllPortsOpen) { actual_result = 'Security Groups: ALL_PORTS open'; return { status: 'fail', message: 'NSG allows all ports (*) which is not secure', code: 'ALL_PORTS_OPEN', test_id: 'IQ-107-2', title: 'Security Groups - Port Validation', expected_result, actual_result }; } else if (openPortsArray.length === 0) { actual_result = 'Security Groups: No specific ports open'; return { status: 'pass', message: 'NSG has no specific inbound ports open - secure configuration', code: 'NO_PORTS_OPEN', test_id: 'IQ-107-2', title: 'Security Groups - Port Validation', expected_result, actual_result }; } else if (!hasRestrictedPorts) { actual_result = `Security Groups: ${openPortsArray.join(', ')} only`; return { status: 'pass', message: `NSG only allows authorized ports: ${openPortsArray.join(', ')}`, code: 'AUTHORIZED_PORTS_ONLY', test_id: 'IQ-107-2', title: 'Security Groups - Port Validation', expected_result, actual_result }; } else { const unauthorizedPorts = openPortsArray.filter(port => !allowedPorts.includes(port)); actual_result = `Security Groups: ${openPortsArray.join(', ')} (unauthorized: ${unauthorizedPorts.join(', ')})`; return { status: 'fail', message: `NSG allows unauthorized ports: ${unauthorizedPorts.join(', ')}. Only ${allowedPorts.join(', ')} should be open.`, code: 'UNAUTHORIZED_PORTS', test_id: 'IQ-107-2', title: 'Security Groups - Port Validation', expected_result, actual_result }; } }"
} 