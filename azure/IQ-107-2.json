{
  "title": "Security Groups - Port Validation",
  "test_description": "Validate Network Security Group (NSG) rules to ensure only ports 443 (HTTPS) and 3306 (MySQL) are open for inbound traffic, maintaining proper security posture",
  "version": "1.0",
  "test_code": "IQ-107-2",
  "test_seq": 2,
  "test_suite": "IQ-107",
  "test_suite_title": "Network Configuration",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "get_workspace_managed_rg",
      "method": "GET",
      "api_url": "https://management.azure.com/subscriptions/${subscription_id}/resourceGroups/${resource_group}/providers/Microsoft.Databricks/workspaces/${workspace_name}?api-version=2023-02-01",
      "headers": {
        "Authorization": "Bearer ${azure_token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { let managedResourceGroup = responseData?.properties?.managedResourceGroupId; if (!managedResourceGroup) { managedResourceGroup = '/subscriptions/' + currentVariables.subscription_id + '/resourceGroups/' + currentVariables.resource_group; } let effectiveResourceGroup = managedResourceGroup; if (managedResourceGroup.includes('/')) { effectiveResourceGroup = managedResourceGroup.split('/').pop(); } else { effectiveResourceGroup = currentVariables.resource_group; } logger.debug('Extracted effective_resource_group:', effectiveResourceGroup); return { ...currentVariables, managed_resource_group: managedResourceGroup, effective_resource_group: effectiveResourceGroup }; }"
    },
    {
      "step": 2,
      "name": "get_nsg_rules",
      "method": "GET", 
      "api_url": "https://management.azure.com/subscriptions/${subscription_id}/resourceGroups/${effective_resource_group}/providers/Microsoft.Network/networkSecurityGroups/${nsg_name}?api-version=2022-09-01",
      "headers": {
        "Authorization": "Bearer ${azure_token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const securityRules = responseData?.properties?.securityRules || []; const nsgName = responseData?.name || currentVariables.nsg_name; logger.debug('Found security rules:', securityRules.length); return { ...currentVariables, security_rules: securityRules, nsg_name: nsgName }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const workspaceStep = stepResults.get_workspace_managed_rg; const nsgStep = stepResults.get_nsg_rules; const expected_result = 'Security Groups Inbound: 443, 3306 only.'; let actual_result = 'Inbound: Not found'; if (workspaceStep.error) { return { status: 'fail', message: 'Failed to get workspace managed resource group information', code: 'WORKSPACE_RG_FAILED', test_id: 'IQ-107-2', title: 'Security Groups - Port Validation', expected_result, actual_result }; } if (nsgStep.error) { return { status: 'fail', message: 'Failed to get NSG rules information', code: 'NSG_RULES_FAILED', test_id: 'IQ-107-2', title: 'Security Groups - Port Validation', expected_result, actual_result }; } const securityRules = nsgStep.data?.properties?.securityRules || []; let openPorts = new Set(); const allowedPorts = new Set([443, 3306]); securityRules.forEach((rule) => { const props = rule.properties || {}; if (props.access === 'Allow' && props.direction === 'Inbound') { const destinationPortRange = props.destinationPortRange || ''; if (destinationPortRange === '*') { openPorts.add('ALL_PORTS'); } else if (destinationPortRange.includes(',')) { destinationPortRange.split(',').forEach(p => openPorts.add(p.trim())); } else if (/^\\d+$/.test(destinationPortRange)) { openPorts.add(destinationPortRange); } else if (destinationPortRange.includes('-')) { const [start, end] = destinationPortRange.split('-').map(Number); if (!isNaN(start) && !isNaN(end)) { for (let port = start; port <= end; port++) { openPorts.add(port.toString()); } } } } }); const openPortsArray = Array.from(openPorts).filter(p => p !== 'ALL_PORTS').map(Number).filter(n => !isNaN(n)).sort((a, b) => a - b); const specialRules = Array.from(openPorts).filter(p => isNaN(Number(p))); let actualPorts = openPortsArray.concat(specialRules); if (actualPorts.length === 2 && actualPorts.includes(443) && actualPorts.includes(3306)) { actual_result = 'Inbound: 443, 3306 only'; return { status: 'pass', message: 'Only authorized ports 443 and 3306 are open. Network security requirements met.', code: 'NSG_OK', test_id: 'IQ-107-2', title: 'Security Groups - Port Validation', expected_result, actual_result }; } else if (actualPorts.length === 0) { actual_result = 'Inbound: none open'; return { status: 'pass', message: 'No inbound ports are open. Network security is properly configured.', code: 'NSG_OK', test_id: 'IQ-107-2', title: 'Security Groups - Port Validation', expected_result, actual_result }; } else { let displayPorts = actualPorts.slice(0, 5).join(', '); if (actualPorts.length > 5) { displayPorts += `, ...and ${actualPorts.length - 5} more`; } actual_result = `Inbound: ${displayPorts}`; return { status: 'fail', message: 'More than 2 ports are open. Only 443 and 3306 should be open.', code: 'NSG_FAIL', test_id: 'IQ-107-2', title: 'Security Groups - Port Validation', expected_result, actual_result }; } }"
} 