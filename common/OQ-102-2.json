{
  "title": "Schema Evolution",
  "test_description": "Schema evolution validation - Checks if Delta table supports schema evolution capabilities.",
  "version": "1.0",
  "test_code": "OQ-102-2",
  "test_seq": 2,
  "test_suite": "OQ-102",
  "test_suite_title": "Data Transformation",
  "category": "OQ",
  "manual_procedure": "Check schema evolution support",
  "api_calls": [
    {
      "step": 1,
      "name": "describe_detail_table",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "DESCRIBE DETAIL iq_oq_demo.silver.sdtm_dm_masked",
        "warehouse_id": "${warehouse_id}",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const dataArray = responseData?.result?.data_array || []; const schema = responseData?.manifest?.schema?.columns || []; if (dataArray && dataArray.length > 0 && schema.length > 0) { const row = dataArray[0]; const format = row[schema.findIndex(col => col.name === 'format')] || ''; const minWriterVersion = row[schema.findIndex(col => col.name === 'minWriterVersion')] || 0; const tableFeatures = row[schema.findIndex(col => col.name === 'tableFeatures')] || []; return { ...currentVariables, table_format: format, min_writer_version: minWriterVersion, table_features: tableFeatures }; } return { ...currentVariables, table_format: 'unknown', min_writer_version: 0 }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const detailStep = stepResults.describe_detail_table; const expected_result = 'Schema evolution supported'; let actual_result = 'Schema evolution not supported'; if (detailStep.error) { return { status: 'fail', message: 'Failed to execute schema evolution validation query', code: 'SCHEMA_EVOLUTION_QUERY_ERROR', test_id: 'OQ-102-2', title: 'Schema Evolution', expected_result, actual_result }; } const tableFormat = variables.table_format || ''; const minWriterVersion = variables.min_writer_version || 0; const tableFeatures = variables.table_features || []; const isDeltaTable = tableFormat && tableFormat.toLowerCase().includes('delta'); const hasSchemaEvolution = minWriterVersion >= 4 || tableFeatures.includes('columnMapping') || tableFeatures.includes('invariants'); if (!isDeltaTable) { actual_result = `Table is not Delta format (${tableFormat})`; return { status: 'fail', message: actual_result, code: 'NOT_DELTA_TABLE', test_id: 'OQ-102-2', title: 'Schema Evolution', expected_result, actual_result }; } if (!hasSchemaEvolution) { actual_result = `Delta table does not support schema evolution (writer version: ${minWriterVersion})`; return { status: 'fail', message: actual_result, code: 'SCHEMA_EVOLUTION_NOT_SUPPORTED', test_id: 'OQ-102-2', title: 'Schema Evolution', expected_result, actual_result }; } actual_result = `Schema evolution supported (writer version: ${minWriterVersion})`; return { status: 'pass', message: actual_result, code: 'SCHEMA_EVOLUTION_SUPPORTED', test_id: 'OQ-102-2', title: 'Schema Evolution', expected_result, actual_result }; }"
} 