{
  "title": "Blood Pressure and Heart Rate Validation",
  "test_description": "Blood Pressure and Heart Rate Validation - Validates systolic BP (90-180 mmHg), diastolic BP (60-120 mmHg), and heart rate with specific thresholds: <1% null values for BP, <0.1% null values for heart rate, <2% invalid values for BP.",
  "version": "1.0",
  "test_code": "OQ-103-2",
  "manual_procedure": "Check blood pressure and heart rate validation",
  "test_seq": 2,
  "test_suite": "OQ-103",
  "test_suite_title": "Data Transformation",
  "category": "OQ",
  "api_calls": [
    {
      "step": 1,
      "name": "validate_bp_hr_values",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "SELECT COUNT(*) as total_records, SUM(CASE WHEN systolic_bp IS NULL THEN 1 ELSE 0 END) as null_systolic, SUM(CASE WHEN diastolic_bp IS NULL THEN 1 ELSE 0 END) as null_diastolic, SUM(CASE WHEN heart_rate IS NULL THEN 1 ELSE 0 END) as null_heart_rate, SUM(CASE WHEN systolic_bp < 90 OR systolic_bp > 180 THEN 1 ELSE 0 END) as invalid_systolic, SUM(CASE WHEN diastolic_bp < 60 OR diastolic_bp > 120 THEN 1 ELSE 0 END) as invalid_diastolic FROM iq_oq_demo.silver.sdtm_dm",
        "warehouse_id": "${warehouse_id}",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const dataArray = responseData?.result?.data_array || []; const schema = responseData?.manifest?.schema?.columns || []; if (dataArray && dataArray.length > 0 && schema.length > 0) { const row = dataArray[0]; const totalRecords = row[schema.findIndex(col => col.name === 'total_records')] || 0; const nullSystolic = row[schema.findIndex(col => col.name === 'null_systolic')] || 0; const nullDiastolic = row[schema.findIndex(col => col.name === 'null_diastolic')] || 0; const nullHeartRate = row[schema.findIndex(col => col.name === 'null_heart_rate')] || 0; const invalidSystolic = row[schema.findIndex(col => col.name === 'invalid_systolic')] || 0; const invalidDiastolic = row[schema.findIndex(col => col.name === 'invalid_diastolic')] || 0; const nullSystolicPct = totalRecords > 0 ? (nullSystolic / totalRecords) * 100 : 0; const nullDiastolicPct = totalRecords > 0 ? (nullDiastolic / totalRecords) * 100 : 0; const nullHeartRatePct = totalRecords > 0 ? (nullHeartRate / totalRecords) * 100 : 0; const invalidSystolicPct = totalRecords > 0 ? (invalidSystolic / totalRecords) * 100 : 0; const invalidDiastolicPct = totalRecords > 0 ? (invalidDiastolic / totalRecords) * 100 : 0; return { ...currentVariables, total_records: totalRecords, null_systolic: nullSystolic, null_diastolic: nullDiastolic, null_heart_rate: nullHeartRate, invalid_systolic: invalidSystolic, invalid_diastolic: invalidDiastolic, null_systolic_pct: nullSystolicPct, null_diastolic_pct: nullDiastolicPct, null_heart_rate_pct: nullHeartRatePct, invalid_systolic_pct: invalidSystolicPct, invalid_diastolic_pct: invalidDiastolicPct }; } return { ...currentVariables, total_records: 0, null_systolic: 0, null_diastolic: 0, null_heart_rate: 0, invalid_systolic: 0, invalid_diastolic: 0, null_systolic_pct: 0, null_diastolic_pct: 0, null_heart_rate_pct: 0, invalid_systolic_pct: 0, invalid_diastolic_pct: 0 }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const bpStep = stepResults.validate_bp_hr_values; const expected_result = 'Blood pressure and heart rate validation passed'; let actual_result = 'Blood pressure and heart rate validation failed'; if (bpStep.error) { return { status: 'fail', message: 'Failed to execute blood pressure and heart rate validation query', code: 'BP_HR_QUERY_ERROR', test_id: 'OQ-103-2', title: 'Blood Pressure and Heart Rate Validation', expected_result, actual_result }; } const totalRecords = variables.total_records || 0; const nullSystolicPct = variables.null_systolic_pct || 0; const nullDiastolicPct = variables.null_diastolic_pct || 0; const nullHeartRatePct = variables.null_heart_rate_pct || 0; const invalidSystolicPct = variables.invalid_systolic_pct || 0; const invalidDiastolicPct = variables.invalid_diastolic_pct || 0; if (totalRecords === 0) { actual_result = 'No records found in SDTM_DM table'; return { status: 'fail', message: actual_result, code: 'BP_HR_NO_RECORDS', test_id: 'OQ-103-2', title: 'Blood Pressure and Heart Rate Validation', expected_result, actual_result }; } const issues = []; if (nullSystolicPct >= 1) { issues.push(`Null systolic values: ${nullSystolicPct.toFixed(2)}% (threshold: <1%)`); } if (nullDiastolicPct >= 1) { issues.push(`Null diastolic values: ${nullDiastolicPct.toFixed(2)}% (threshold: <1%)`); } if (nullHeartRatePct >= 0.1) { issues.push(`Null heart rate values: ${nullHeartRatePct.toFixed(2)}% (threshold: <0.1%)`); } if (invalidSystolicPct >= 2) { issues.push(`Invalid systolic values: ${invalidSystolicPct.toFixed(2)}% (threshold: <2%)`); } if (invalidDiastolicPct >= 2) { issues.push(`Invalid diastolic values: ${invalidDiastolicPct.toFixed(2)}% (threshold: <2%)`); } if (issues.length === 0) { actual_result = `Validation passed: Null systolic: ${nullSystolicPct.toFixed(2)}%, Null diastolic: ${nullDiastolicPct.toFixed(2)}%, Null heart rate: ${nullHeartRatePct.toFixed(2)}%, Invalid systolic: ${invalidSystolicPct.toFixed(2)}%, Invalid diastolic: ${invalidDiastolicPct.toFixed(2)}%`; return { status: 'pass', message: actual_result, code: 'BP_HR_VALIDATION_OK', test_id: 'OQ-103-2', title: 'Blood Pressure and Heart Rate Validation', expected_result, actual_result }; } else { actual_result = `Validation failed: ${issues.join('; ')}`; return { status: 'fail', message: actual_result, code: 'BP_HR_VALIDATION_FAILED', test_id: 'OQ-103-2', title: 'Blood Pressure and Heart Rate Validation', expected_result, actual_result }; } }"
} 