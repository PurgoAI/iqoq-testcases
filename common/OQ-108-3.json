{
  "title": "Git Integration Validation",
  "test_description": "Validates Git integration by checking for Git repositories and commit history to ensure version control is properly configured",
  "version": "1.0",
  "test_code": "OQ-108-3",
  "manual_procedure": "Check Git integration and version history",
  "test_seq": 3,
  "test_suite": "OQ-108",
  "test_suite_title": "Collaboration Features",
  "category": "OQ",
  "api_calls": [
    {
      "step": 1,
      "name": "check_git_repos",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/repos",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const repos = responseData?.repos || []; const repoCount = repos.length; const hasRepos = repoCount > 0; const firstRepoId = hasRepos ? repos[0].id : null; const repoNames = repos.slice(0, 3).map(repo => repo.name || repo.path || 'Unknown').join(', '); return { ...currentVariables, repo_count: repoCount, has_repos: hasRepos, first_repo_id: firstRepoId, repo_names: repoNames }; }"
    },
    {
      "step": 2,
      "name": "check_commit_history",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/repos/${first_repo_id}/history",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const commits = responseData?.commits || []; const commitCount = commits.length; const hasHistory = commitCount > 0; const recentCommits = commits.slice(0, 3).map(commit => commit.message || commit.commit_id || 'Unknown').join(', '); return { ...currentVariables, commit_count: commitCount, has_history: hasHistory, recent_commits: recentCommits }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const reposStep = stepResults.check_git_repos; const historyStep = stepResults.check_commit_history; const expected_result = 'Version history maintained'; let actual_result = 'Version history error'; let status = 'error'; let code = 'API_ERROR'; let message = 'Error retrieving Git repositories'; if (reposStep.error) { return { status: 'error', message: 'Error retrieving Git repositories', code: 'API_ERROR', test_id: 'OQ-108-3', title: 'Git Integration Validation', expected_result, actual_result }; } const repoCount = variables.repo_count || 0; const hasRepos = variables.has_repos || false; const repoNames = variables.repo_names || ''; if (!hasRepos) { status = 'error'; message = 'No Git repositories found'; code = 'NO_REPOS'; actual_result = 'No Git repositories found'; } else if (historyStep.error) { status = 'error'; message = 'Error retrieving version history'; code = 'API_ERROR'; actual_result = 'Error retrieving version history'; } else { const commitCount = variables.commit_count || 0; const hasHistory = variables.has_history || false; const recentCommits = variables.recent_commits || ''; if (hasHistory) { status = 'pass'; message = 'Version history verified'; code = `${commitCount} commits found`; actual_result = `Version history maintained. Found ${commitCount} commits. Recent: ${recentCommits}`; } else { status = 'fail'; message = 'No commit history found'; code = 'No commits'; actual_result = 'No commit history found'; } } return { status: status, message: message, code: code, test_id: 'OQ-108-3', title: 'Git Integration Validation', expected_result, actual_result }; }"
} 