{
  "title": "Token Encryption",
  "test_description": "Validate that the Git credentials API does not expose the Personal Access Token.",
  "version": "2.0",
  "test_code": "IQ-108-3",
  "test_seq": 3,
  "test_suite": "IQ-108",
  "test_suite_title": "Git Connection Validation",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "check_existing_credentials",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/git-credentials",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const credentials = responseData?.credentials || []; let existingCredentialId = null; let hasCredentials = credentials.length > 0; if (hasCredentials) { for (let i = 0; i < credentials.length; i++) { const cred = credentials[i]; if (cred && cred.git_provider && cred.git_username && cred.git_provider.toLowerCase() === currentVariables.git_provider.toLowerCase() && cred.git_username === currentVariables.git_username) { existingCredentialId = cred.credential_id; break; } } if (!existingCredentialId && credentials.length > 0) { existingCredentialId = credentials[0].credential_id; } } logger.debug('Existing credentials check:', { hasCredentials, existingCredentialId, credentialsCount: credentials.length }); return { ...currentVariables, has_credentials: hasCredentials, existing_credential_id: existingCredentialId, credentials_count: credentials.length }; }"
    },
    {
      "step": 2,
      "name": "create_or_update_credentials",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/git-credentials",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "personal_access_token": "${pat}",
        "git_username": "${git_username}",
        "git_provider": "${git_provider}"
      },
      "post_processing": "function processStep(responseData, currentVariables, response) { const credentialId = responseData?.credential_id || currentVariables.existing_credential_id; const statusCode = response && response.status ? response.status : 200; const isUpdate = currentVariables.has_credentials && currentVariables.existing_credential_id; const isCreated = statusCode === 200 && credentialId; const alreadyExists = statusCode === 400 && (responseData?.message || '').toLowerCase().includes('already exists'); logger.debug('Credentials operation result:', { credentialId, statusCode, isUpdate, isCreated, alreadyExists }); return { ...currentVariables, credential_id: credentialId, credentials_created: isCreated, credentials_updated: isUpdate, credentials_already_exist: alreadyExists }; }"
    },
    {
      "step": 3,
      "name": "list_git_credentials",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/git-credentials",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const credentials = responseData?.credentials || []; let tokenExposed = false; let hasCredentials = credentials.length > 0; if (hasCredentials) { for (let i = 0; i < credentials.length; i++) { const cred = credentials[i]; if (cred && cred.personal_access_token && cred.personal_access_token.length > 0) { tokenExposed = true; break; } } } logger.debug('Token encryption check:', { tokenExposed, hasCredentials, credentialsCount: credentials.length }); return { ...currentVariables, token_exposed: tokenExposed, has_credentials: hasCredentials, credentials_count: credentials.length }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const credStep = stepResults.list_git_credentials; const expected_result = 'PAT is not exposed in API response.'; let actual_result = 'Token encryption not tested'; if (credStep.error) { return { status: 'fail', message: `Failed to get credentials: ${credStep.error.message}`, code: 'API_ERROR', test_id: 'IQ-108-3', title: 'Token Encryption', expected_result, actual_result }; } if (!variables.has_credentials) { actual_result = 'No credentials found to check.'; return { status: 'fail', message: 'No Git credentials were found to validate encryption.', code: 'NO_CREDENTIALS', test_id: 'IQ-108-3', title: 'Token Encryption', expected_result, actual_result }; } if (variables.token_exposed) { actual_result = 'PAT was exposed in API response.'; return { status: 'fail', message: 'Security Risk: The Personal Access Token was visible in the API response.', code: 'PAT_EXPOSED', test_id: 'IQ-108-3', title: 'Token Encryption', expected_result, actual_result }; } else { actual_result = 'PAT was not exposed.'; return { status: 'pass', message: 'Token is properly secured and not exposed via the API.', code: 'PAT_SECURE', test_id: 'IQ-108-3', title: 'Token Encryption', expected_result, actual_result }; } }",
  "manual_procedure": "Create Git credentials and check the Git credentials API response to verify that Personal Access Tokens are not exposed."
} 