{
  "title": "Token Encryption Validation",
  "test_description": "Validate that personal access tokens are properly encrypted",
  "version": "1.0",
  "test_code": "IQ-108-3",
  "test_seq": 3,
  "test_suite": "IQ-108",
  "test_suite_title": "Git Connection Validation",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "list_git_credentials",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/git-credentials",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const credentials = responseData?.credentials || []; let credentialsFound = credentials.length > 0; let tokenExposed = false; let targetCredential = null; const gitUsername = currentVariables.git_username; for (let i = 0; i < credentials.length; i++) { const cred = credentials[i]; if (cred && cred.git_username === gitUsername) { targetCredential = cred; if (cred.personal_access_token && cred.personal_access_token.length > 0) { tokenExposed = true; } break; } } logger.debug('Token encryption check:', { credentialsFound, credentialsCount: credentials.length, tokenExposed }); return { ...currentVariables, credentials_found: credentialsFound, credentials_count: credentials.length, token_exposed: tokenExposed, target_credential: targetCredential }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { var credStep = stepResults.list_git_credentials; var expected_result = 'PAT Storage: Azure Key Vault (AES-256).'; var actual_result = 'PAT exposed in credential details'; if (!credStep || credStep.error) { return { status: 'fail', message: 'Failed to get Git credentials', code: 'GIT_CREDENTIALS_FAILED', test_id: 'IQ-108-3', title: 'Token Encryption', expected_result: expected_result, actual_result: actual_result }; } var credentials = (credStep.data && credStep.data.credentials) ? credStep.data.credentials : []; if (credentials.length > 0 && !credentials[0].personal_access_token) { actual_result = 'PAT not exposed in credential details'; return { status: 'pass', message: 'PAT not exposed in credential details', code: 'PAT_SECURE', test_id: 'IQ-108-3', title: 'Token Encryption', expected_result: expected_result, actual_result: actual_result }; } else { return { status: 'fail', message: 'PAT exposed in credential details', code: 'PAT_EXPOSED', test_id: 'IQ-108-3', title: 'Token Encryption', expected_result: expected_result, actual_result: actual_result }; } }",
  "manual_procedure": "Check the secret scope configuration for the repository."
} 