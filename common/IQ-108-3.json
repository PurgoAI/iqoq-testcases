{
  "title": "Token Encryption Validation",
  "test_description": "Validate that personal access tokens are properly encrypted",
  "version": "1.0",
  "test_code": "IQ-108-3",
  "test_seq": 3,
  "test_suite": "IQ-108",
  "test_suite_title": "Git Connection Validation",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "list_git_credentials",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/git-credentials",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const credentials = responseData?.credentials || []; let credentialsFound = credentials.length > 0; let tokenExposed = false; let targetCredential = null; const gitUsername = currentVariables.git_username; for (let i = 0; i < credentials.length; i++) { const cred = credentials[i]; if (cred && cred.git_username === gitUsername) { targetCredential = cred; if (cred.personal_access_token && cred.personal_access_token.length > 0) { tokenExposed = true; } break; } } logger.debug('Token encryption check:', { credentialsFound, credentialsCount: credentials.length, tokenExposed }); return { ...currentVariables, credentials_found: credentialsFound, credentials_count: credentials.length, token_exposed: tokenExposed, target_credential: targetCredential }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const credentialsStep = stepResults.list_git_credentials; if (credentialsStep.error) { return { status: 'fail', message: 'Failed to list Git credentials', code: 'TOKEN_ENCRYPTION_CHECK_FAILED', test_id: 'IQ-108-3', title: 'Token Encryption Validation' }; } const gitUsername = variables?.git_username || 'unknown'; const credentials = credentialsStep.data?.credentials || []; const credentialsFound = credentials.length > 0; let tokenExposed = false; if (credentialsStep.status !== 200) { let errorMessage = 'Failed to retrieve Git credentials'; if (credentialsStep.status === 403) { errorMessage = 'Permission denied accessing Git credentials'; } else if (credentialsStep.status === 404) { errorMessage = 'Git credentials resource not found'; } else { errorMessage = `API error: ${credentialsStep.status}`; } return { status: 'fail', message: errorMessage, code: 'API_ERROR', test_id: 'IQ-108-3', title: 'Token Encryption Validation' }; } for (let i = 0; i < credentials.length; i++) { const cred = credentials[i]; if (cred && cred.git_username === gitUsername) { if (cred.personal_access_token && cred.personal_access_token.length > 0) { tokenExposed = true; } break; } } if (!credentialsFound) { return { status: 'fail', message: 'No Git credentials found to validate token encryption', code: 'NO_CREDS_FOUND', test_id: 'IQ-108-3', title: 'Token Encryption Validation' }; } if (tokenExposed) { return { status: 'fail', message: 'Token encryption validation failed: Personal access token is visible in API response', code: 'TOKEN_EXPOSED', test_id: 'IQ-108-3', title: 'Token Encryption Validation' }; } return { status: 'pass', message: 'Git credentials tokens are properly encrypted and secured', code: 'TOKENS_ENCRYPTED', test_id: 'IQ-108-3', title: 'Token Encryption Validation' }; }"
} 