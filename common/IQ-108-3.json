{
  "title": "Token Encryption Validation - Azure Key Vault",
  "test_description": "Validate that personal access tokens are stored in Azure Key Vault with AES-256 encryption by checking secret scope backend configuration.",
  "version": "3.0",
  "test_code": "IQ-108-3",
  "test_seq": 3,
  "test_suite": "IQ-108",
  "test_suite_title": "Git Connection Validation",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "list_secret_scopes",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/secrets/scopes/list",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const scopes = responseData.scopes || []; const targetScope = scopes.find(scope => scope.name === currentVariables.scope_name); const scopeFound = targetScope !== undefined; const backendType = targetScope ? targetScope.backend_type : null; const isAzureKeyVault = backendType === 'AZURE_KEYVAULT'; const keyVaultMetadata = targetScope ? targetScope.keyvault_metadata : null; const dnsName = keyVaultMetadata ? keyVaultMetadata.dns_name : null; const resourceId = keyVaultMetadata ? keyVaultMetadata.resource_id : null; return { ...currentVariables, scope_found: scopeFound, backend_type: backendType, is_azure_keyvault: isAzureKeyVault, keyvault_dns_name: dnsName, keyvault_resource_id: resourceId, total_scopes: scopes.length }; }"
    },
    {
      "step": 2,
      "name": "list_secrets_in_scope",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/secrets/list?scope=${scope_name}",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const secrets = responseData.secrets || []; const hasSecrets = secrets.length > 0; const secretCount = secrets.length; const secretKeys = secrets.map(secret => secret.key); const hasGitPat = secretKeys.some(key => key.toLowerCase().includes('git') || key.toLowerCase().includes('pat') || key.toLowerCase().includes('token')); const lastUpdatedTimestamps = secrets.map(secret => secret.last_updated_timestamp); return { ...currentVariables, has_secrets: hasSecrets, secret_count: secretCount, secret_keys: secretKeys, has_git_pat: hasGitPat, last_updated_timestamps: lastUpdatedTimestamps }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const listScopesStep = stepResults.list_secret_scopes; const listSecretsStep = stepResults.list_secrets_in_scope; const expected_result = 'PAT stored in Azure Key Vault with AES-256 encryption confirmed'; let actual_result = 'Token encryption validation not completed'; let status = 'fail'; let code = 'VALIDATION_FAILED'; let message = 'Token encryption validation failed'; if (!listScopesStep || !listScopesStep.data) { actual_result = 'Failed to list secret scopes.'; return { status: 'fail', message: actual_result, code: 'SCOPES_LIST_FAILED', test_id: 'IQ-108-3', title: 'Token Encryption Validation - Azure Key Vault', expected_result, actual_result }; } if (!listSecretsStep || !listSecretsStep.data) { actual_result = 'Failed to list secrets in scope.'; return { status: 'fail', message: actual_result, code: 'SECRETS_LIST_FAILED', test_id: 'IQ-108-3', title: 'Token Encryption Validation - Azure Key Vault', expected_result, actual_result }; } const scopeFound = variables.scope_found || false; const backendType = variables.backend_type || 'UNKNOWN'; const isAzureKeyVault = variables.is_azure_keyvault || false; const scopeName = variables.scope_name || 'unknown'; const keyVaultDnsName = variables.keyvault_dns_name || 'Not configured'; const keyVaultResourceId = variables.keyvault_resource_id || 'Not configured'; const hasSecrets = variables.has_secrets || false; const secretCount = variables.secret_count || 0; const hasGitPat = variables.has_git_pat || false; const secretKeys = variables.secret_keys || []; if (!scopeFound) { actual_result = `Secret scope '${scopeName}' not found. Available scopes: ${variables.total_scopes || 0}`; code = 'SCOPE_NOT_FOUND'; } else if (!isAzureKeyVault) { actual_result = `Secret scope '${scopeName}' is not using Azure Key Vault. Backend type: ${backendType}. Expected: AZURE_KEYVAULT`; code = 'NOT_AZURE_KEYVAULT'; } else if (!hasSecrets) { actual_result = `Secret scope '${scopeName}' is configured with Azure Key Vault but contains no secrets.`; code = 'NO_SECRETS_IN_SCOPE'; } else { status = 'pass'; message = 'Token encryption validation passed: PAT stored in Azure Key Vault with AES-256 encryption'; code = 'AZURE_KEYVAULT_VALIDATED'; actual_result = `PAT stored in Azure Key Vault confirmed. Scope: ${scopeName}. Backend: ${backendType}. Key Vault: ${keyVaultDnsName}. Secrets: ${secretCount}. Git PAT found: ${hasGitPat}. Secret keys: ${secretKeys.join(', ')}`; } return { status: status, message: message, code: code, test_id: 'IQ-108-3', title: 'Token Encryption Validation - Azure Key Vault', expected_result, actual_result }; }",
  "manual_procedure": "Check secret scope configuration via API to validate that PAT is stored in Azure Key Vault with AES-256 encryption, and verify the secret exists in the scope."
} 