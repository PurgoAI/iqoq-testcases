{
  "title": "Runtime Validation",
  "test_description": "Validate Databricks runtime version to ensure LTS version is used",
  "version": "1.0",
  "test_code": "IQ-101-2",
  "test_seq": 2,
  "test_suite": "IQ-101",
  "test_suite_title": "Databricks Workspace Setup",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "get_clusters",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.1/clusters/list",
      "headers": {
        "Authorization": "Bearer ${token}"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const clusters = responseData && responseData.clusters; return { ...currentVariables, clusters_data: clusters || [], clusters_count: (clusters && clusters.length) || 0 }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { var requiredVersion = (typeof variables !== 'undefined' && variables.iq_101_2_dbr_version) || '16.4'; var ltsRequired = (typeof variables !== 'undefined' && variables.iq_101_2_lts_required) ? ' LTS' : ''; var expected_result = 'DBR ' + requiredVersion + ltsRequired; var actual_result = 'Not found'; var clusters = (typeof variables !== 'undefined' && variables.clusters_data) || []; var clustersCount = (typeof variables !== 'undefined' && variables.clusters_count) || 0; if (clustersCount === 0) { actual_result = 'No clusters found'; return { status: 'fail', message: 'No clusters found', code: 'NO_CLUSTERS', test_id: 'IQ-101-2', title: 'Runtime Validation', expected_result: expected_result, actual_result: actual_result }; } var foundVersion = ''; for (var i = 0; i < clusters.length; i++) { var cluster = clusters[i]; var sparkVersion = cluster.spark_version || ''; if (sparkVersion) { foundVersion = sparkVersion; actual_result = 'Found: ' + sparkVersion; if (sparkVersion.indexOf(requiredVersion) !== -1) { return { status: 'pass', message: 'DBR ' + requiredVersion + '.x found', code: 'EXACT_MATCH', test_id: 'IQ-101-2', title: 'Runtime Validation', expected_result: expected_result, actual_result: actual_result }; } } } for (var i = 0; i < clusters.length; i++) { var cluster = clusters[i]; var sparkVersion = cluster.spark_version || ''; if (sparkVersion && sparkVersion.toLowerCase().indexOf('lts') !== -1) { actual_result = 'Found: ' + sparkVersion; return { status: 'pass', message: 'LTS version found: ' + sparkVersion, code: 'LTS_MATCH', test_id: 'IQ-101-2', title: 'Runtime Validation', expected_result: expected_result, actual_result: actual_result }; } } return { status: 'fail', message: 'Required version ' + requiredVersion + ' not found, no LTS version found', code: 'VERSION_NOT_FOUND', test_id: 'IQ-101-2', title: 'Runtime Validation', expected_result: expected_result, actual_result: actual_result }; }",
  "manual_procedure": "Run in notebook: spark.conf.get(\"spark.databricks.clusterUsageTags.sparkVersion\")"
}