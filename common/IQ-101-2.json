{
  "title": "Runtime Validation",
  "test_description": "Validate Databricks runtime version to ensure LTS version is used",
  "version": "1.0",
  "test_code": "IQ-101-2",
  "test_seq": 2,
  "test_suite": "IQ-101",
  "test_suite_title": "Databricks Workspace Setup",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "get_clusters",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.1/clusters/list",
      "headers": {
        "Authorization": "Bearer ${token}"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { return currentVariables; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const clustersStep = stepResults.get_clusters; const requiredVersion = (typeof variables !== 'undefined' && variables.iq_101_2_dbr_version) || '14.3'; const ltsRequired = (typeof variables !== 'undefined' && variables.iq_101_2_lts_required) ? ' LTS' : ''; const expected_result = `DBR ${requiredVersion}${ltsRequired}`; let actual_result = 'Not found'; if (clustersStep.data && clustersStep.data.clusters && Array.isArray(clustersStep.data.clusters)) { const clusters = clustersStep.data.clusters; for (const cluster of clusters) { const sparkVersion = cluster.spark_version || ''; if (sparkVersion) { actual_result = `Found: ${sparkVersion}`; if (sparkVersion.includes(requiredVersion)) { return { status: 'pass', message: `DBR ${requiredVersion}.x found`, code: 'EXACT_MATCH', test_id: 'IQ-101-2', title: 'Runtime Validation', expected_result, actual_result }; } } } for (const cluster of clusters) { const sparkVersion = cluster.spark_version || ''; if (sparkVersion.toLowerCase().includes('lts')) { actual_result = `Found: ${sparkVersion}`; return { status: 'pass', message: 'LTS version found: ' + sparkVersion, code: 'LTS_MATCH', test_id: 'IQ-101-2', title: 'Runtime Validation', expected_result, actual_result }; } } } return { status: 'fail', message: 'No LTS runtime found', code: 'NO_LTS', test_id: 'IQ-101-2', title: 'Runtime Validation', expected_result, actual_result }; }",
  "manual_procedure": "Run in notebook: spark.conf.get(\"spark.databricks.clusterUsageTags.sparkVersion\")"
}