{
  "title": "Runtime Validation",
  "test_description": "Validate Databricks runtime version to ensure LTS version is used",
  "version": "1.0",
  "test_code": "IQ-101-2",
  "test_seq": 2,
  "test_suite": "IQ-101",
  "test_suite_title": "Databricks Workspace Setup",
  "test_type": "Workspace",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "get_clusters",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.1/clusters/list",
      "headers": {
        "Authorization": "Bearer ${token}"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const clusters = responseData && responseData.clusters; return { ...currentVariables, clusters_data: clusters || [], clusters_count: (clusters && clusters.length) || 0 }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const requiredVersion = variables.iq_101_2_dbr_version || '16.4'; const ltsRequired = variables.iq_101_2_lts_required || false; const clusters = variables.clusters_data || []; const expected_result = ltsRequired ? 'DBR ' + requiredVersion + ' LTS' : 'DBR ' + requiredVersion + '.x'; let actual_result = 'No clusters found'; if (clusters.length === 0) { return { status: 'fail', message: 'No clusters found', code: 'NO_CLUSTERS', test_id: 'IQ-101-2', title: 'Runtime Validation', expected_result: expected_result, actual_result: actual_result }; } for (const cluster of clusters) { const sparkVersion = cluster.spark_version || ''; if (sparkVersion && sparkVersion.includes(requiredVersion)) { actual_result = sparkVersion; return { status: 'pass', message: 'DBR ' + requiredVersion + '.x found', code: 'EXACT_MATCH', test_id: 'IQ-101-2', title: 'Runtime Validation', expected_result: expected_result, actual_result: actual_result }; } } if (ltsRequired) { for (const cluster of clusters) { const sparkVersion = cluster.spark_version || ''; if (sparkVersion && sparkVersion.toLowerCase().includes('lts')) { actual_result = sparkVersion; return { status: 'pass', message: 'LTS version found: ' + sparkVersion, code: 'LTS_MATCH', test_id: 'IQ-101-2', title: 'Runtime Validation', expected_result: expected_result, actual_result: actual_result }; } } } actual_result = 'No matching version found'; return { status: 'fail', message: 'Required version ' + requiredVersion + ' not found' + (ltsRequired ? ', no LTS version found' : ''), code: 'VERSION_NOT_FOUND', test_id: 'IQ-101-2', title: 'Runtime Validation', expected_result: expected_result, actual_result: actual_result }; }",
  "manual_procedure": "Run in notebook: spark.conf.get(\"spark.databricks.clusterUsageTags.sparkVersion\")"
}