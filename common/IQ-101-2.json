{
  "title": "Runtime Validation",
  "test_description": "Validate Databricks runtime version to ensure LTS version is used",
  "version": "1.0",
  "test_code": "IQ-101-2",
  "test_seq": 2,
  "test_suite": "IQ-101",
  "test_suite_title": "Databricks Workspace Setup",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "get_clusters",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.1/clusters/list",
      "headers": {
        "Authorization": "Bearer ${token}"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { return currentVariables; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const clusterStep = stepResults.get_clusters; if (clusterStep.error) { return { status: 'fail', message: 'No response received from API', code: 'NO_RESPONSE', test_id: 'IQ-101-2', title: 'Runtime Validation' }; } const apiOutput = clusterStep.data; try { const minVersion = variables.iq_101_2_dbr_version || '16.4'; const ltsRequired = variables.iq_101_2_lts_required !== undefined ? variables.iq_101_2_lts_required : true; if (!apiOutput.clusters || !Array.isArray(apiOutput.clusters)) { return { status: 'fail', message: 'No clusters found in response', code: 'NO_CLUSTERS', test_id: 'IQ-101-2', title: 'Runtime Validation' }; } let found = false; let foundLTS = false; let foundVersion = null; for (const cluster of apiOutput.clusters) { if (!cluster.spark_version) { continue; } const sparkVersion = cluster.spark_version; const versionMatch = sparkVersion.match(/(\\d+\\.\\d+)/); const isLTS = sparkVersion.toLowerCase().includes('lts'); if (versionMatch) { const version = versionMatch[1]; if (parseFloat(version) >= parseFloat(minVersion) && (!ltsRequired || isLTS)) { found = true; break; } if (isLTS) { foundLTS = true; } } } if (found) { return { status: 'pass', message: `At least one cluster meets minimum version (${minVersion}) and LTS requirement: ${ltsRequired}`, code: 'VALID_CLUSTER_VERSION', test_id: 'IQ-101-2', title: 'Runtime Validation' }; } else if (foundLTS) { return { status: 'fail', message: `No cluster meets minimum version (${minVersion}) but LTS cluster found.`, code: 'LTS_ONLY', test_id: 'IQ-101-2', title: 'Runtime Validation' }; } else { return { status: 'fail', message: `No cluster meets minimum version (${minVersion}) and LTS requirement: ${ltsRequired}`, code: 'NO_VALID_CLUSTER', test_id: 'IQ-101-2', title: 'Runtime Validation' }; } } catch (error) { return { status: 'fail', message: 'Error processing cluster version data: ' + error.message, code: 'PROCESSING_ERROR', test_id: 'IQ-101-2', title: 'Runtime Validation' }; } }"
}