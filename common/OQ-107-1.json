{
  "title": "Data Lineage Validation",
  "test_description": "Validates data lineage for gold.patient_summary table including Unity Catalog lineage graph, transformation dependencies, and complete lineage path verification",
  "version": "1.0",
  "test_code": "OQ-107-1",
  "test_seq": 1,
  "test_suite": "OQ-107",
  "test_suite_title": "Data Lineage",
  "category": "OQ",
  "api_calls": [
    {
      "step": 1,
      "name": "describe_history",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "DESCRIBE HISTORY iq_oq_demo.gold.patient_summary",
        "warehouse_id": "${warehouse_id}",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { return currentVariables; }"
    },
    {
      "step": 2,
      "name": "get_lineage_graph",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/lineage-tracking/table-lineage?table_name=iq_oq_demo.gold.patient_summary&include_entity_lineage=true",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "post_processing": "function processStep(responseData, currentVariables) { return currentVariables; }"
    },
    {
      "step": 3,
      "name": "validate_transformation_dependencies",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "SELECT table_catalog, table_schema, table_name FROM system.information_schema.tables WHERE table_schema IN ('bronze', 'silver', 'gold') AND (table_name LIKE '%patient%' OR table_name LIKE '%demographics%' OR table_name LIKE '%sdtm_dm%')",
        "warehouse_id": "${warehouse_id}",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { return currentVariables; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { let overallStatus = 'pass'; let lineagePath = 'No lineage path available'; let validationDetails = []; try { const historyStep = stepResults.describe_history; const lineageStep = stepResults.get_lineage_graph; const dependenciesStep = stepResults.validate_transformation_dependencies; if (historyStep && historyStep.data && historyStep.data.status && historyStep.data.status.state === 'SUCCEEDED') { validationDetails.push('✓ Table history retrieved successfully'); } else if (historyStep && historyStep.data && historyStep.data.status && historyStep.data.status.error && historyStep.data.status.error.message && historyStep.data.status.error.message.indexOf('is a view') !== -1) { validationDetails.push('⚠ Table history skipped: Target is a view (expected for materialized views)'); } else { validationDetails.push('⚠ Table history unavailable (view or access issue)'); } const layerTables = { bronze: [], silver: [], gold: [] }; let lineageSuccess = false; if (lineageStep && lineageStep.data && lineageStep.data.upstreams) { validationDetails.push('✓ Unity Catalog lineage graph retrieved'); lineageSuccess = true; const upstreams = lineageStep.data.upstreams; for (let i = 0; i < upstreams.length; i++) { const upstream = upstreams[i]; const tableInfo = upstream.tableInfo; if (tableInfo && tableInfo.schema_name && tableInfo.name) { const schema = tableInfo.schema_name.toLowerCase(); const name = tableInfo.name; if (name.indexOf('__materialization') === -1) { if (layerTables[schema]) { let exists = false; for (let x = 0; x < layerTables[schema].length; x++) { if (layerTables[schema][x] === name) { exists = true; break; } } if (!exists) { layerTables[schema].push(name); } } } } } } else { validationDetails.push('✗ Failed to retrieve lineage graph'); overallStatus = 'fail'; } let dependenciesSuccess = false; if (dependenciesStep && dependenciesStep.data && dependenciesStep.data.status && dependenciesStep.data.status.state === 'SUCCEEDED') { validationDetails.push('✓ Transformation dependencies validated'); dependenciesSuccess = true; if (dependenciesStep.data.result && dependenciesStep.data.result.data_array) { const dependencyData = dependenciesStep.data.result.data_array; for (let m = 0; m < dependencyData.length; m++) { const row = dependencyData[m]; if (row.length >= 3) { const catalog = row[0]; const schema = row[1].toLowerCase(); const tableName = row[2]; if (tableName.indexOf('__materialization') === -1) { if (layerTables[schema]) { let tableExists = false; for (let n = 0; n < layerTables[schema].length; n++) { if (layerTables[schema][n] === tableName) { tableExists = true; break; } } if (!tableExists) { layerTables[schema].push(tableName); } } } } } } } else { validationDetails.push('✗ Failed to validate transformation dependencies'); overallStatus = 'fail'; } if (lineageSuccess || dependenciesSuccess) { const pathComponents = []; if (layerTables.bronze.length > 0) { for (let j = 0; j < layerTables.bronze.length; j++) { pathComponents.push('bronze.' + layerTables.bronze[j]); } } if (layerTables.silver.length > 0) { for (let k = 0; k < layerTables.silver.length; k++) { pathComponents.push('silver.' + layerTables.silver[k]); } } if (layerTables.gold.length > 0) { for (let l = 0; l < layerTables.gold.length; l++) { pathComponents.push('gold.' + layerTables.gold[l]); } } if (pathComponents.length > 0) { lineagePath = pathComponents.join(' → '); validationDetails.push('✓ Lineage path constructed: ' + lineagePath); if (overallStatus !== 'fail') { overallStatus = 'pass'; } } else { validationDetails.push('⚠ Limited lineage path available'); } } return { status: overallStatus, message: overallStatus === 'pass' ? 'Data lineage validation passed for gold.patient_summary' : 'Data lineage validation failed', code: overallStatus === 'pass' ? 'LINEAGE_VALIDATION_PASSED' : 'LINEAGE_VALIDATION_FAILED', test_id: 'OQ-107-1', title: 'Data Lineage Validation' }; } catch (error) { return { status: 'fail', message: 'Error during lineage validation aggregation: ' + error.toString(), code: 'LINEAGE_VALIDATION_ERROR', test_id: 'OQ-107-1', title: 'Data Lineage Validation' }; } }"
} 