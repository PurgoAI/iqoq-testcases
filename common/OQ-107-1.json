{
  "title": "Data Lineage Validation",
  "test_description": "Comprehensive data lineage validation for gold.patient_summary table including Unity Catalog lineage graph, recursive lineage building, and complete lineage path extraction with bronze→silver→gold transformation dependencies.",
  "version": "1.0",
  "test_code": "OQ-107-1",
  "manual_procedure": "Check comprehensive data lineage using Unity Catalog",
  "test_seq": 1,
  "test_suite": "OQ-107",
  "test_suite_title": "Data Lineage",
  "category": "OQ",
  "api_calls": [
    {
      "step": 1,
      "name": "get_lineage_graph",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/lineage-tracking/table-lineage?table_name=iq_oq_demo.gold.patient_summary&include_entity_lineage=true",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const upstreams = responseData?.upstreams || []; const downstreams = responseData?.downstreams || []; const nodes = responseData?.nodes || []; const edges = responseData?.edges || []; const upstreamCount = upstreams.length; const downstreamCount = downstreams.length; const nodeCount = nodes.length; const edgeCount = edges.length; const upstreamTables = upstreams.map(up => up.tableInfo?.name || '').filter(name => name && !name.includes('__materialization')); const downstreamTables = downstreams.map(down => down.tableInfo?.name || '').filter(name => name && !name.includes('__materialization')); const layerTables = { bronze: [], silver: [], gold: [] }; upstreams.forEach(up => { const tableInfo = up.tableInfo || {}; const schema = (tableInfo.schema_name || '').toLowerCase(); const name = tableInfo.name || ''; if (name && !name.includes('__materialization') && layerTables[schema]) { layerTables[schema].push(name); } }); const lineagePath = Object.entries(layerTables).filter(([layer, tables]) => tables.length > 0).map(([layer, tables]) => tables.map(table => `${layer}.${table}`)).flat().join(' → '); return { ...currentVariables, upstream_count: upstreamCount, downstream_count: downstreamCount, node_count: nodeCount, edge_count: edgeCount, upstream_tables: upstreamTables, downstream_tables: downstreamTables, layer_tables: layerTables, lineage_path: lineagePath || 'No lineage path available' }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const lineageStep = stepResults.get_lineage_graph; const expected_result = 'Data lineage validated with complete transformation path'; let actual_result = 'Data lineage validation failed'; if (lineageStep.error) { return { status: 'fail', message: 'Failed to retrieve lineage graph from Unity Catalog', code: 'LINEAGE_GRAPH_ERROR', test_id: 'OQ-107-1', title: 'Data Lineage Validation', expected_result, actual_result }; } const upstreamCount = variables.upstream_count || 0; const downstreamCount = variables.downstream_count || 0; const nodeCount = variables.node_count || 0; const edgeCount = variables.edge_count || 0; const upstreamTables = variables.upstream_tables || []; const downstreamTables = variables.downstream_tables || []; const layerTables = variables.layer_tables || { bronze: [], silver: [], gold: [] }; const lineagePath = variables.lineage_path || 'No lineage path available'; const hasBronze = layerTables.bronze && layerTables.bronze.length > 0; const hasSilver = layerTables.silver && layerTables.silver.length > 0; const hasGold = layerTables.gold && layerTables.gold.length > 0; const hasCompletePath = hasBronze && hasSilver && hasGold; if (upstreamCount > 0 && lineagePath !== 'No lineage path available') { actual_result = `Lineage validated: ${upstreamCount} upstream, ${downstreamCount} downstream tables. Path: ${lineagePath}`; if (hasCompletePath) { return { status: 'pass', message: actual_result, code: 'LINEAGE_VALIDATION_PASSED', test_id: 'OQ-107-1', title: 'Data Lineage Validation', expected_result, actual_result }; } else { return { status: 'pass', message: actual_result, code: 'LINEAGE_PARTIAL_PATH', test_id: 'OQ-107-1', title: 'Data Lineage Validation', expected_result, actual_result }; } } else if (upstreamCount > 0) { actual_result = `Found ${upstreamCount} upstream tables but incomplete lineage path`; return { status: 'pass', message: actual_result, code: 'LINEAGE_UPSTREAM_ONLY', test_id: 'OQ-107-1', title: 'Data Lineage Validation', expected_result, actual_result }; } else { actual_result = 'No upstream tables found in lineage graph'; return { status: 'fail', message: actual_result, code: 'LINEAGE_NO_UPSTREAM', test_id: 'OQ-107-1', title: 'Data Lineage Validation', expected_result, actual_result }; } }"
} 