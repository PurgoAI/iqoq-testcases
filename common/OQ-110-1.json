{
  "title": "Create Data Drift Monitor for Demographics Table",
  "test_description": "Creates a data drift monitor for the demographics table with time-series configuration to enable drift detection and monitoring",
  "version": "1.0",
  "test_code": "OQ-110-1",
  "test_seq": 1,
  "test_suite": "OQ-110",
  "test_suite_title": "Data Drift Monitoring",
  "category": "OQ",
  "api_calls": [
    {
      "step": 1,
      "name": "create_drift_monitor",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.1/unity-catalog/tables/${catalog_name}.bronze.demographics/monitor",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "assets_dir": "/Workspace/Users/${user_name}/databricks_lakehouse_monitoring/${catalog_name}.bronze.demographics",
        "output_schema_name": "${catalog_name}.bronze"
      },
      "post_processing": "function processStep(responseData, currentVariables, response) { const statusCode = response && response.status ? response.status : 200; const isCreated = statusCode === 200 || statusCode === 201; const monitorId = responseData?.monitor_id || null; const tableName = responseData?.table_name || currentVariables.catalog_name + '.bronze.demographics'; const assetsDir = responseData?.assets_dir || 'Not configured'; const outputSchema = responseData?.output_schema_name || 'Not configured'; const timestampCol = responseData?.time_series?.timestamp_col || 'Not configured'; const granularities = responseData?.time_series?.granularities || []; const alreadyExists = statusCode === 400 && (responseData?.message || '').toLowerCase().includes('already exists'); const success = isCreated || alreadyExists; return { ...currentVariables, monitor_created: success, monitor_id: monitorId, table_name: tableName, assets_dir: assetsDir, output_schema: outputSchema, timestamp_column: timestampCol, granularities: granularities, monitor_already_exists: alreadyExists, create_status_code: statusCode }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const createStep = stepResults.create_drift_monitor; const expected_result = 'Data drift monitor created successfully for demographics table with time-series configuration'; let actual_result = 'Data drift monitor creation failed'; let status = 'fail'; let code = 'MONITOR_CREATION_FAILED'; let message = 'Data drift monitor creation failed'; if (createStep.error) { const statusCode = createStep.response_status || 'Unknown'; if (statusCode === 400 && variables.monitor_already_exists) { status = 'pass'; message = 'Data drift monitor already exists for demographics table'; code = 'MONITOR_ALREADY_EXISTS'; actual_result = `Data drift monitor already exists for ${variables.table_name}. Monitor ID: ${variables.monitor_id || 'N/A'}`; } else if (statusCode === 404) { status = 'fail'; message = 'Table not found or access denied'; code = 'TABLE_NOT_FOUND'; actual_result = `Table ${variables.catalog_name}.bronze.demographics not found or access denied`; } else if (statusCode === 403) { status = 'fail'; message = 'Insufficient permissions to create monitor'; code = 'INSUFFICIENT_PERMISSIONS'; actual_result = 'Insufficient permissions to create data drift monitor'; } else { status = 'error'; message = `Failed to create data drift monitor: HTTP ${statusCode}`; code = `HTTP_${statusCode}`; actual_result = `API call failed with status code ${statusCode}`; } } else { const isCreated = variables.monitor_created || false; const tableName = variables.table_name || variables.catalog_name + '.bronze.demographics'; const monitorId = variables.monitor_id || 'N/A'; const assetsDir = variables.assets_dir || 'Not configured'; const outputSchema = variables.output_schema || 'Not configured'; const timestampCol = variables.timestamp_column || 'Not configured'; const granularities = variables.granularities || []; if (isCreated) { status = 'pass'; message = 'Data drift monitor created successfully'; code = 'MONITOR_CREATED'; actual_result = `Data drift monitor created successfully for ${tableName}. Monitor ID: ${monitorId}. Assets dir: ${assetsDir}. Output schema: ${outputSchema}. Timestamp column: ${timestampCol}. Granularities: ${granularities.join(', ')}`; } else { status = 'fail'; message = 'Data drift monitor creation failed'; code = 'MONITOR_CREATION_FAILED'; actual_result = 'Data drift monitor creation failed - unexpected response'; } } return { status: status, message: message, code: code, test_id: 'OQ-110-1', title: 'Create Data Drift Monitor for Demographics Table', expected_result, actual_result }; }",
  "manual_procedure": "Create data drift monitor for demographics table with time-series configuration using Lakehouse Monitoring API"
} 