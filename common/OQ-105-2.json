{
  "title": "Authorization - Create Group",
  "test_description": "Authorization - Create Group: Create temporary group TEMP_GROUP_OQ105 for testing authorization.",
  "version": "2.0",
  "test_code": "OQ-105-2",
  "test_seq": 2,
  "test_suite": "OQ-105",
  "test_suite_title": "Data Governance",
  "category": "OQ",
  "api_calls": [
    {
      "step": 1,
      "name": "check_existing_group",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/account/scim/v2/Groups",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "filter": "displayName eq \"TEMP_GROUP_OQ105\""
      },
      "post_processing": "function processStep(responseData, currentVariables) { const resources = responseData.Resources || []; const groupId = resources.length > 0 ? resources[0].id : null; const groupExists = groupId !== null; logger.debug('Existing group check:', { groupId, groupExists }); return { ...currentVariables, group_id: groupId, group_exists: groupExists }; }"
    },
    {
      "step": 2,
      "name": "delete_existing_group",
      "method": "DELETE",
      "api_url": "${workspace_url}/api/2.0/account/scim/v2/Groups/${group_id}",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "async function processStep(responseData, currentVariables) { const success = responseData === '' || responseData === null; logger.debug('Delete existing group result:', success); if (success) { await delay(3000); } return { ...currentVariables, delete_success: success }; }"
    },
    {
      "step": 3,
      "name": "create_group",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/account/scim/v2/Groups",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "schemas": [
          "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
        "displayName": "TEMP_GROUP_OQ105"
      },
      "post_processing": "async function processStep(responseData, currentVariables) { const success = responseData?.id ? true : false; const newGroupId = responseData?.id || null; logger.debug('Create group result:', { success, newGroupId }); if (success) { await delay(5000); } return { ...currentVariables, create_success: success, new_group_id: newGroupId }; }"
    },
    {
      "step": 4,
      "name": "verify_group_created",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/account/scim/v2/Groups",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "filter": "displayName eq \"TEMP_GROUP_OQ105\""
      },
      "post_processing": "function processStep(responseData, currentVariables) { const resources = responseData.Resources || []; const verifiedGroupId = resources.length > 0 ? resources[0].id : null; const groupVerified = verifiedGroupId !== null; logger.debug('Verify group created:', { verifiedGroupId, groupVerified }); return { ...currentVariables, verified_group_id: verifiedGroupId, group_verified: groupVerified }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const checkStep = stepResults.check_existing_group; const deleteStep = stepResults.delete_existing_group; const createStep = stepResults.create_group; const verifyStep = stepResults.verify_group_created; const expected_result = 'Result: Group TEMP_GROUP_OQ105 created successfully'; let actual_result = 'Group creation test not completed'; if (!checkStep || !checkStep.data) { actual_result = 'Failed to check existing group.'; return { status: 'fail', message: actual_result, code: 'CHECK_GROUP_FAILED', test_id: 'OQ-105-2', title: 'Authorization - Create Group', expected_result, actual_result }; } if (variables.group_exists && (!deleteStep || !deleteStep.data || !variables.delete_success)) { actual_result = 'Failed to delete existing group.'; return { status: 'fail', message: actual_result, code: 'DELETE_GROUP_FAILED', test_id: 'OQ-105-2', title: 'Authorization - Create Group', expected_result, actual_result }; } if (!createStep || !createStep.data || !variables.create_success) { actual_result = 'Failed to create new group.'; return { status: 'fail', message: actual_result, code: 'CREATE_GROUP_FAILED', test_id: 'OQ-105-2', title: 'Authorization - Create Group', expected_result, actual_result }; } if (!verifyStep || !verifyStep.data || !variables.group_verified) { actual_result = 'Failed to verify group creation.'; return { status: 'fail', message: actual_result, code: 'VERIFY_GROUP_FAILED', test_id: 'OQ-105-2', title: 'Authorization - Create Group', expected_result, actual_result }; } actual_result = 'Group TEMP_GROUP_OQ105 created and verified successfully.'; return { status: 'pass', message: 'Group creation validation passed: TEMP_GROUP_OQ105 created successfully', code: 'CREATE_GROUP_PASSED', test_id: 'OQ-105-2', title: 'Authorization - Create Group', expected_result, actual_result }; }",
  "manual_procedure": "Check for existing group TEMP_GROUP_OQ105, delete if exists, create new group TEMP_GROUP_OQ105, and verify creation."
} 