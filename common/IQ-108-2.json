{
  "title": "Access Control",
  "test_description": "Validate that Git write operations are blocked by attempting to update the repo's tag after deleting credentials.",
  "version": "1.5",
  "test_code": "IQ-108-2",
  "test_seq": 2,
  "test_suite": "IQ-108",
  "test_suite_title": "Git Connection Validation",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "get_current_user",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/preview/scim/v2/Me",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const userName = responseData?.userName || 'validation-user'; const timestamp = Date.now().toString(); logger.debug('Current user:', { userName, timestamp }); return { ...currentVariables, current_username: userName, current_timestamp: timestamp }; }"
    },
    {
      "step": 2,
      "name": "check_existing_credentials",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/git-credentials",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const credentials = responseData?.credentials || []; const hasCredentials = credentials.length > 0; logger.debug('Existing credentials check:', { hasCredentials, credentialsCount: credentials.length }); return { ...currentVariables, has_credentials: hasCredentials, credentials_count: credentials.length }; }"
    },
    {
      "step": 3,
      "name": "create_credentials",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/git-credentials",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "personal_access_token": "${pat}",
        "git_username": "${git_username}",
        "git_provider": "${git_provider}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const credentialId = responseData?.credential_id || null; logger.debug('Credentials created:', { credentialId, gitProvider: currentVariables.git_provider, gitUsername: currentVariables.git_username }); return { ...currentVariables, new_credential_id: credentialId }; }"
    },
    {
      "step": 4,
      "name": "create_test_repo",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/repos",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "url": "${repo_url}",
        "provider": "${git_provider}",
        "path": "/Users/${current_username}/iq-oq-access-test-${current_timestamp}",
        "branch": "main"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const repoId = responseData?.id || null; logger.debug('Test repo created:', { repoId }); return { ...currentVariables, repo_id: repoId }; }"
    },
    {
      "step": 5,
      "name": "delete_credentials_for_test",
      "method": "DELETE",
      "api_url": "${workspace_url}/api/2.0/git-credentials/${new_credential_id}",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { logger.debug('Credentials deleted for access control test'); return currentVariables; }"
    },
    {
      "step": 6,
      "name": "verify_credentials_deleted",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/git-credentials",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const remainingCredentials = responseData?.credentials || []; const allDeleted = remainingCredentials.length === 0; logger.debug('Credentials verification:', { allDeleted, remainingCount: remainingCredentials.length }); return { ...currentVariables, credentials_verified_deleted: allDeleted }; }"
    },
    {
      "step": 7,
      "name": "attempt_unauthorized_operation",
      "method": "PATCH",
      "api_url": "${workspace_url}/api/2.0/repos/${repo_id}",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "branch": "test-branch-${current_timestamp}",
        "tag": "v1.0.0"
      },
      "post_processing": "function processStep(responseData, currentVariables, response) { const statusCode = response && response.status ? response.status : 400; const isBlocked = statusCode >= 400; const errorMessage = responseData?.message || ''; const errorCode = responseData?.error_code || ''; const hasPermissionError = isBlocked && (errorMessage.toLowerCase().includes('permission') || errorMessage.toLowerCase().includes('unauthorized') || errorMessage.toLowerCase().includes('authentication') || errorMessage.toLowerCase().includes('forbidden') || errorMessage.toLowerCase().includes('credential') || errorMessage.toLowerCase().includes('access') || errorCode.toLowerCase().includes('git_unknown_ref') || errorCode.toLowerCase().includes('invalid_state')); logger.debug('Unauthorized operation result:', { isBlocked, hasPermissionError, statusCode, errorMessage }); return { ...currentVariables, operation_blocked: isBlocked, has_permission_error: hasPermissionError, block_status_code: statusCode, block_error_message: errorMessage }; }"
    },
    {
      "step": 8,
      "name": "cleanup_delete_repo",
      "method": "DELETE",
      "api_url": "${workspace_url}/api/2.0/repos/${repo_id}",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { return currentVariables; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const unauthStep = stepResults.attempt_unauthorized_operation; const expected_result = 'Access control: Write operations blocked'; let actual_result = 'Access control not tested'; if (unauthStep.error) { return { status: 'fail', message: `Unauthorized operation step failed unexpectedly: ${unauthStep.error.message}`, code: 'TEST_ERROR', test_id: 'IQ-108-2', title: 'Access Control', expected_result, actual_result }; } const operationBlocked = variables.operation_blocked; const hasPermissionError = variables.has_permission_error; const blockStatusCode = variables.block_status_code; if (operationBlocked) { actual_result = `Operation blocked with status ${blockStatusCode}`; const message = hasPermissionError ? `Access control correctly blocked an unauthorized write operation with explicit permission error.` : `Access control correctly blocked an unauthorized write operation with status ${blockStatusCode}.`; return { status: 'pass', message: message, code: 'WRITE_BLOCKED', test_id: 'IQ-108-2', title: 'Access Control', expected_result, actual_result }; } else { actual_result = 'Operation was allowed.'; return { status: 'fail', message: 'Security Risk: A write-like operation succeeded without credentials.', code: 'WRITE_ALLOWED', test_id: 'IQ-108-2', title: 'Access Control', expected_result, actual_result }; } }",
  "manual_procedure": "Create Git credentials, then delete them and attempt to update repository configuration to validate access control."
} 