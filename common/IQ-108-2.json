{
  "title": "Repository Access Validation",
  "test_description": "Validate repository access by listing repos and creating if needed",
  "version": "1.0",
  "test_code": "IQ-108-2",
  "test_seq": 2,
  "test_suite": "IQ-108",
  "test_suite_title": "Git Connection Validation",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "list_existing_repos",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/repos",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const existingRepos = responseData?.repos || []; let repoFound = false; let targetRepoId = null; let targetRepoPath = null; const repoUrl = currentVariables.repo_url || 'https://github.com/PurgoAI/test-iq-oq-git-intg'; for (let i = 0; i < existingRepos.length; i++) { const repo = existingRepos[i]; if (repo && repo.url === repoUrl) { repoFound = true; targetRepoId = repo.id; targetRepoPath = repo.path; break; } } logger.debug('Repo search:', { repoFound, targetRepoId, totalRepos: existingRepos.length }); return { ...currentVariables, repo_found: repoFound, repo_id: targetRepoId, repo_path: targetRepoPath, total_repos: existingRepos.length }; }"
    },
    {
      "step": 2,
      "name": "get_current_user",
      "condition": "!repo_found",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/preview/scim/v2/Me",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const userName = responseData?.userName || 'validation-user'; const userId = responseData?.id || 'unknown'; const timestamp = Date.now().toString(); logger.debug('Current user:', { userName, userId, timestamp }); return { ...currentVariables, current_username: userName, current_user_id: userId, current_timestamp: timestamp }; }"
    },
    {
      "step": 3,
      "name": "create_validation_repo",
      "condition": "!repo_found && current_username",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/repos",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "url": "${repo_url}",
        "provider": "${git_provider}",
        "path": "/Users/${current_username}/iq-oq-validation-repo-${current_timestamp}",
        "branch": "main"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const repoId = responseData?.id || null; const repoPath = responseData?.path || null; const success = responseData && !responseData.error_code; logger.debug('Repo creation:', { success, repoId, repoPath }); return { ...currentVariables, repo_created: success, new_repo_id: repoId, new_repo_path: repoPath, creation_result: responseData }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const gitStep = stepResults.get_git_credentials; const expected_result = 'Unauthorized Push: Blocked (100%).'; let actual_result = 'PAT missing or invalid'; if (gitStep.error) { return { status: 'fail', message: 'Failed to get Git credentials', code: 'GIT_CREDENTIALS_FAILED', test_id: 'IQ-108-2', title: 'Access Control', expected_result, actual_result }; } const credentials = gitStep.data?.credentials || []; if (credentials.length > 0 && credentials[0].personal_access_token) { actual_result = 'PAT present and valid'; return { status: 'pass', message: 'PAT present and valid', code: 'PAT_VALID', test_id: 'IQ-108-2', title: 'Access Control', expected_result, actual_result }; } else { return { status: 'fail', message: 'PAT missing or invalid', code: 'PAT_INVALID', test_id: 'IQ-108-2', title: 'Access Control', expected_result, actual_result }; } }",
  "manual_procedure": "Attempt to push a commit to the repository from Databricks without a valid Personal Access Token (PAT)."
} 