{
  "title": "Access Control",
  "test_description": "Access Control: Test that Git write operations are blocked when no valid credentials are present.",
  "version": "2.2",
  "test_code": "IQ-108-2",
  "test_seq": 2,
  "test_suite": "IQ-108",
  "test_suite_title": "Git Connection Validation",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "get_current_user",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/preview/scim/v2/Me",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const userName = responseData.userName || 'test-user'; const currentTimestamp = Date.now().toString(); return { ...currentVariables, user_name: userName, current_timestamp: currentTimestamp }; }"
    },
    {
      "step": 2,
      "name": "check_existing_credentials",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/git-credentials",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const credentials = responseData.credentials || []; const hasCredentials = credentials.length > 0; const credentialId = hasCredentials ? credentials[0].credential_id : null; return { ...currentVariables, has_credentials: hasCredentials, credential_id: credentialId }; }"
    },
    {
      "step": 3,
      "name": "create_or_update_credentials",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/git-credentials",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "personal_access_token": "${git_token}",
        "git_username": "${user_name}",
        "git_provider": "github"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const success = responseData?.credential_id ? true : false; const newCredentialId = responseData?.credential_id || currentVariables.credential_id; return { ...currentVariables, credential_created: success, credential_id: newCredentialId }; }"
    },
    {
      "step": 4,
      "name": "create_test_repo",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/repos",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "url": "${repo_url}",
        "provider": "github",
        "path": "/Users/${user_name}/iq-oq-sync-IQ108-${current_timestamp}",
        "branch": "main"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const repoId = responseData?.id || null; const repoPath = responseData?.path || null; return { ...currentVariables, repo_id: repoId, repo_path: repoPath }; }"
    },
    {
      "step": 5,
      "name": "delete_credentials_for_test",
      "method": "DELETE",
      "api_url": "${workspace_url}/api/2.0/git-credentials/${credential_id}",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const success = responseData !== undefined; const deletedCredentialId = currentVariables.credential_id; return { ...currentVariables, credentials_deleted: success, deleted_credential_id: deletedCredentialId }; }"
    },
    {
      "step": 6,
      "name": "poll_for_credential_deletion",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/git-credentials",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "async function processStep(responseData, currentVariables) { const deletedCredentialId = currentVariables.deleted_credential_id; if (!deletedCredentialId) { return { ...currentVariables, deletion_verified: true, polling_deletion_completed: true }; } logger.debug('Beginning polling for credential deletion'); let pollAttempts = 0; const maxAttempts = 15; const pollInterval = 2000; while (pollAttempts < maxAttempts) { pollAttempts++; logger.debug('Credential deletion polling attempt ' + pollAttempts + ' of ' + maxAttempts); try { const response = await axios.get(`${currentVariables.workspace_url}/api/2.0/git-credentials`, { headers: { 'Authorization': `Bearer ${currentVariables.token}`, 'Content-Type': 'application/json' } }); const credentials = response.data.credentials || []; const credentialStillExists = credentials.some(cred => cred.credential_id === deletedCredentialId); if (!credentialStillExists) { logger.debug('Credentials successfully deleted'); return { ...currentVariables, deletion_verified: true, polling_deletion_completed: true, deletion_poll_attempts: pollAttempts }; } else { logger.debug('Credentials still exist, waiting...'); if (pollAttempts < maxAttempts) { await delay(pollInterval); } } } catch (error) { logger.error('Credential deletion polling error:', error.message); if (pollAttempts < maxAttempts) { await delay(pollInterval); } } } logger.debug('Credential deletion polling completed after ' + maxAttempts + ' attempts'); return { ...currentVariables, deletion_verified: false, polling_deletion_completed: true, deletion_poll_attempts: maxAttempts, deletion_polling_timeout: true }; }"
    },
    {
      "step": 7,
      "name": "attempt_unauthorized_operation",
      "method": "PATCH",
      "api_url": "${workspace_url}/api/2.0/repos/${repo_id}",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "branch": "test-branch-${current_timestamp}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const statusCode = responseData?.error_code || 'SUCCESS'; const errorMessage = responseData?.message || ''; const isBlocked = statusCode !== 'SUCCESS' && (errorMessage.toLowerCase().includes('permission') || errorMessage.toLowerCase().includes('credential') || errorMessage.toLowerCase().includes('authentication') || errorMessage.toLowerCase().includes('unauthorized') || errorMessage.toLowerCase().includes('forbidden')); return { ...currentVariables, operation_blocked: isBlocked, error_code: statusCode, error_message: errorMessage }; }"
    },
    {
      "step": 8,
      "name": "cleanup_delete_repo",
      "method": "DELETE",
      "api_url": "${workspace_url}/api/2.0/repos/${repo_id}",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const success = responseData !== undefined; return { ...currentVariables, cleanup_success: success }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const userStep = stepResults.get_current_user; const credentialsStep = stepResults.check_existing_credentials; const createCredentialsStep = stepResults.create_or_update_credentials; const repoStep = stepResults.create_test_repo; const deleteCredentialsStep = stepResults.delete_credentials_for_test; const deletePollStep = stepResults.poll_for_credential_deletion; const attemptStep = stepResults.attempt_unauthorized_operation; const cleanupStep = stepResults.cleanup_delete_repo; const expected_result = 'Result: Unauthorized operation blocked'; let actual_result = 'Access control test not completed'; if (!userStep || !userStep.data || !userStep.data.userName) { actual_result = 'Failed to get user information.'; return { status: 'fail', message: actual_result, code: 'GET_USER_FAILED', test_id: 'IQ-108-2', title: 'Access Control', expected_result, actual_result }; } if (!repoStep || !repoStep.data || !variables.repo_id) { actual_result = 'Failed to create test repository.'; return { status: 'fail', message: actual_result, code: 'REPO_CREATION_FAILED', test_id: 'IQ-108-2', title: 'Access Control', expected_result, actual_result }; } if (!deleteCredentialsStep || !deleteCredentialsStep.data || !variables.credentials_deleted) { actual_result = 'Failed to delete credentials for test.'; return { status: 'fail', message: actual_result, code: 'CREDENTIALS_DELETE_FAILED', test_id: 'IQ-108-2', title: 'Access Control', expected_result, actual_result }; } if (!deletePollStep || !deletePollStep.data || !variables.polling_deletion_completed) { actual_result = 'Failed to complete credential deletion polling.'; return { status: 'fail', message: actual_result, code: 'DELETE_POLLING_INCOMPLETE', test_id: 'IQ-108-2', title: 'Access Control', expected_result, actual_result }; } if (!variables.deletion_verified) { actual_result = 'Credential deletion verification failed after polling timeout.'; return { status: 'fail', message: actual_result, code: 'DELETE_VERIFICATION_FAILED', test_id: 'IQ-108-2', title: 'Access Control', expected_result, actual_result }; } if (!attemptStep || !attemptStep.data) { actual_result = 'No response from unauthorized operation attempt.'; return { status: 'fail', message: actual_result, code: 'NO_RESPONSE', test_id: 'IQ-108-2', title: 'Access Control', expected_result, actual_result }; } if (variables.operation_blocked) { const deletionAttempts = variables.deletion_poll_attempts || 0; actual_result = 'Unauthorized operation properly blocked: ' + variables.error_message; return { status: 'pass', message: 'Access control validation passed: Unauthorized operation blocked', code: 'ACCESS_CONTROL_PASSED', test_id: 'IQ-108-2', title: 'Access Control', expected_result, actual_result }; } else { actual_result = 'Unauthorized operation was not blocked: ' + variables.error_message; return { status: 'fail', message: 'Access control validation failed: Unauthorized operation was not blocked', code: 'ACCESS_CONTROL_FAILED', test_id: 'IQ-108-2', title: 'Access Control', expected_result, actual_result }; } }",
  "manual_procedure": "Get user info, check/create Git credentials, create test repository, delete credentials and poll until deleted, attempt unauthorized operation, and cleanup."
} 