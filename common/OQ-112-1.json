{
  "title": "Outbound Create Share",
  "test_description": "Validates Delta Sharing outbound share creation by creating a share, adding tables, and verifying share configuration",
  "version": "1.0",
  "test_code": "OQ-112-1",
  "manual_procedure": "While logged in, click Catalog on the left hand navigation menu and click Delta Sharing in the top center. Switch to the \"Shared by Me\" tab and click \"Share Data\" on the top right then enter Share name and description and click \"Save and Continue\"",
  "test_seq": 1,
  "test_suite": "OQ-112",
  "test_suite_title": "Delta Sharing",
  "category": "OQ",
  "api_calls": [
    {
      "step": 1,
      "name": "create_share",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "CREATE SHARE test_data_share COMMENT 'Test share for validation'",
        "warehouse_id": "${warehouse_id}",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const status = responseData?.status?.state || 'UNKNOWN'; const success = status === 'SUCCEEDED'; const statementId = responseData?.statement_id || ''; return { ...currentVariables, share_created: success, share_status: status, share_statement_id: statementId }; }"
    },
    {
      "step": 2,
      "name": "add_materialized_view_to_share",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "ALTER SHARE test_data_share ADD MATERIALIZED_VIEW iq_oq_demo.silver.sdtm_dm",
        "warehouse_id": "${warehouse_id}",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const status = responseData?.status?.state || 'UNKNOWN'; const success = status === 'SUCCEEDED'; const statementId = responseData?.statement_id || ''; return { ...currentVariables, view_added: success, view_status: status, view_statement_id: statementId }; }"
    },
    {
      "step": 3,
      "name": "verify_share_details",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "DESCRIBE SHARE test_data_share",
        "warehouse_id": "${warehouse_id}",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const dataArray = responseData?.result?.data_array || []; const shareExists = dataArray && dataArray.length > 0; const shareInfo = shareExists ? dataArray[0] : null; return { ...currentVariables, share_exists: shareExists, share_info: shareInfo }; }"
    },
    {
      "step": 4,
      "name": "verify_share_contents",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "SHOW ALL IN SHARE test_data_share",
        "warehouse_id": "${warehouse_id}",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const dataArray = responseData?.result?.data_array || []; const hasObjects = dataArray && dataArray.length > 0; const objectCount = hasObjects ? dataArray.length : 0; const objectNames = hasObjects ? dataArray.map(row => row[0] || 'Unknown').join(', ') : ''; return { ...currentVariables, has_objects: hasObjects, object_count: objectCount, object_names: objectNames }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const createStep = stepResults.create_share; const addViewStep = stepResults.add_materialized_view_to_share; const verifyStep = stepResults.verify_share_details; const contentsStep = stepResults.verify_share_contents; const expected_result = 'Succeeded'; let actual_result = 'Delta Sharing share creation failed'; if (createStep.error) { return { status: 'fail', message: 'Failed to create Delta Sharing share', code: 'SHARE_CREATION_ERROR', test_id: 'OQ-112-1', title: 'Outbound Create Share', expected_result, actual_result }; } const shareCreated = variables.share_created || false; if (!shareCreated) { actual_result = `Share creation failed with status: ${variables.share_status || 'UNKNOWN'}`; return { status: 'fail', message: actual_result, code: 'SHARE_CREATION_FAILED', test_id: 'OQ-112-1', title: 'Outbound Create Share', expected_result, actual_result }; } const shareExists = variables.share_exists || false; if (shareExists) { actual_result = 'Succeeded'; return { status: 'pass', message: 'Delta Sharing share created successfully', code: 'SHARE_CREATION_SUCCESS', test_id: 'OQ-112-1', title: 'Outbound Create Share', expected_result, actual_result }; } else { actual_result = 'Delta Sharing share not found after creation'; return { status: 'fail', message: actual_result, code: 'SHARE_NOT_FOUND', test_id: 'OQ-112-1', title: 'Outbound Create Share', expected_result, actual_result }; } }"
} 