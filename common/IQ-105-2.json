{
  "title": "Write Access",
  "test_description": "Validate that write access is properly controlled and denied unless explicitly permitted",
  "version": "1.0",
  "test_code": "IQ-105-2",
  "test_seq": 2,
  "test_suite": "IQ-105",
  "test_suite_title": "Data Storage Validation",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "check_cluster_security_configs",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/clusters/list",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const clusters = responseData?.clusters || []; let secureConfigsFound = false; for (let i = 0; i < clusters.length; i++) { const cluster = clusters[i]; const sparkConf = cluster.spark_conf || {}; for (const key in sparkConf) { if (key.includes('credential') || key.includes('access.key') || key.includes('secret') || key.includes('token') || key.includes('oauth')) { secureConfigsFound = true; break; } } if (secureConfigsFound) break; } return { ...currentVariables, secure_configs_found: secureConfigsFound, total_clusters: clusters.length }; }"
    },
    {
      "step": 2,
      "name": "test_write_access_restriction",
      "method": "PUT",
      "api_url": "${workspace_url}/api/2.0/fs/files/Volumes/${catalog_name}/test_schema/test_volume/security_test_file.txt",
      "headers": {
        "Authorization": "Bearer ${token2}",
        "Content-Type": "application/octet-stream"
      },
      "payload": "This is a test file for write access validation",
      "post_processing": "function processStep(responseData, currentVariables) { return currentVariables; }"
    },
    {
      "step": 3,
      "name": "cleanup_test_file",
      "method": "DELETE",
      "api_url": "${workspace_url}/api/2.0/fs/files/Volumes/${catalog_name}/test_schema/test_volume/security_test_file.txt",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { return currentVariables; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const clusterStep = stepResults.check_cluster_security_configs; const writeStep = stepResults.test_write_access_restriction; const cleanupStep = stepResults.cleanup_test_file; const expected_result = 'Write Access: Denied unless permitted'; let actual_result = 'Write Access: Not tested'; if (clusterStep.error) { return { status: 'fail', message: 'Failed to check cluster security configurations', code: 'CLUSTER_SECURITY_CHECK_FAILED', test_id: 'IQ-105-2', title: 'Write Access', expected_result, actual_result }; } if (writeStep.error) { return { status: 'fail', message: 'Failed to test write access restrictions', code: 'WRITE_ACCESS_TEST_FAILED', test_id: 'IQ-105-2', title: 'Write Access', expected_result, actual_result }; } const secureConfigsFound = variables.secure_configs_found || false; const writeStepStatusCode = writeStep.status || 200; const writeAccessAllowed = writeStepStatusCode === 204; if (writeStepStatusCode === 401 || writeStepStatusCode === 403) { actual_result = 'Write Access: Properly restricted'; return { status: 'pass', message: 'Access control properly configured - write access restricted', code: 'PROPER_ACCESS_CONTROL', test_id: 'IQ-105-2', title: 'Write Access', expected_result, actual_result }; } else if (writeAccessAllowed) { actual_result = 'Write Access: Allowed (security risk)'; return { status: 'fail', message: 'Write access allowed to volume - potential security risk', code: 'EXCESSIVE_PERMISSIONS', test_id: 'IQ-105-2', title: 'Write Access', expected_result, actual_result }; } else { if (secureConfigsFound) { actual_result = 'Write Access: Secure configurations found'; return { status: 'pass', message: 'Secure storage configurations found', code: 'SECURE_CONFIGURATION', test_id: 'IQ-105-2', title: 'Write Access', expected_result, actual_result }; } else { actual_result = 'Write Access: No secure configurations'; return { status: 'fail', message: 'No secure storage configurations found', code: 'INSECURE_CONFIGURATION', test_id: 'IQ-105-2', title: 'Write Access', expected_result, actual_result }; } } }",
  "manual_procedure": "Test write access to Unity Catalog volumes using Files API to validate proper access controls."
} 