{
  "title": "Directory Structure",
  "test_description": "Validate directory structure (bronze/silver/gold layers)",
  "version": "1.0",
  "test_code": "IQ-105-1",
  "test_seq": 1,
  "test_suite": "IQ-105",
  "test_suite_title": "Data Storage Validation",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "get_metastore_id",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "warehouse_id": "${warehouse_id}",
        "statement": "SELECT CURRENT_METASTORE() AS active_metastore;",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { let metastoreId = responseData?.result?.data_array?.[0]?.[0] || responseData?.data_array?.[0]?.[0] || responseData?.active_metastore; if (!metastoreId) { throw new Error('Could not extract metastore_id from response'); } let metastoreIdSplit = metastoreId; if (metastoreId.includes(':')) { metastoreIdSplit = metastoreId.split(':').pop(); } logger.debug('Extracted metastore_id:', metastoreId, 'split:', metastoreIdSplit); return { ...currentVariables, metastore_id: metastoreId, metastore_id_split: metastoreIdSplit }; }"
    },
    {
      "step": 2,
      "name": "get_catalogs",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.1/unity-catalog/catalogs",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const catalogs = responseData.catalogs || []; return { ...currentVariables, catalogs: catalogs }; }"
    },
    {
      "step": 3,
      "name": "get_schemas_sql_fallback",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "warehouse_id": "${warehouse_id}",
        "statement": "SHOW SCHEMAS",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const schemasSQL = responseData?.result?.data_array || []; return { ...currentVariables, schemas_sql: schemasSQL }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const metastoreStep = stepResults.get_metastore_id; const catalogsStep = stepResults.get_catalogs; const schemasStep = stepResults.get_schemas_sql_fallback; if (metastoreStep.error) { return { status: 'fail', message: 'Failed to get metastore ID', code: 'NO_METASTORE_ID', test_id: 'IQ-105-1', title: 'Directory Structure' }; } if (catalogsStep.error) { return { status: 'fail', message: 'Failed to get catalogs', code: 'NO_CATALOGS', test_id: 'IQ-105-1', title: 'Directory Structure' }; } if (schemasStep.error) { return { status: 'fail', message: 'Failed to get schemas', code: 'NO_SCHEMAS', test_id: 'IQ-105-1', title: 'Directory Structure' }; } const metastoreId = metastoreStep.data?.result?.data_array?.[0]?.[0]; const schemasArray = schemasStep.data?.result?.data_array || []; if (!metastoreId) { return { status: 'fail', message: 'Could not extract metastore ID from response', code: 'METASTORE_EXTRACTION_FAILED', test_id: 'IQ-105-1', title: 'Directory Structure' }; } if (schemasArray.length === 0) { return { status: 'fail', message: 'No schemas found', code: 'NO_SCHEMAS_FOUND', test_id: 'IQ-105-1', title: 'Directory Structure' }; } const requiredLayers = ['bronze', 'silver', 'gold']; let foundLayers = []; for (const schemaRow of schemasArray) { if (schemaRow && schemaRow.length > 0) { const schemaName = String(schemaRow[0]).toLowerCase(); for (const layer of requiredLayers) { if (schemaName === layer && !foundLayers.includes(layer)) { foundLayers.push(layer); } } } } const missingLayers = requiredLayers.filter(layer => !foundLayers.includes(layer)); if (foundLayers.length === requiredLayers.length) { return { status: 'pass', message: 'All required layers (bronze/silver/gold) found in schemas', code: 'COMPLETE_STRUCTURE', test_id: 'IQ-105-1', title: 'Directory Structure' }; } else if (foundLayers.length > 0) { return { status: 'fail', message: 'Incomplete layer structure in schemas. Missing: ' + missingLayers.join(', '), code: 'INCOMPLETE_STRUCTURE', test_id: 'IQ-105-1', title: 'Directory Structure' }; } else { return { status: 'fail', message: 'No data layers (bronze/silver/gold) found in schemas', code: 'NO_LAYERS', test_id: 'IQ-105-1', title: 'Directory Structure' }; } }"
} 