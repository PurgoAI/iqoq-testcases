{
  "title": "Delta Lake",
  "test_description": "Validate that the Databricks cluster has the required Delta Lake version",
  "test_code": "IQ-104-3",
  "test_seq": 3,
  "test_suite": "IQ-104",
  "test_suite_title": "Cluster Configuration",
  "category": "IQ",
  "version": "1.0",
  "api_calls": [
    {
      "step": 1,
      "name": "get_cluster_delta",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/clusters/get",
      "headers": {
        "Authorization": "Bearer ${token}"
      },
      "payload": {
        "cluster_id": "${cluster_id}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { return currentVariables; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const clusterStep = stepResults.get_cluster_delta; if (clusterStep.error) { return { status: 'fail', message: 'No response received from API', code: 'NO_RESPONSE', test_id: 'IQ-104-3', title: 'Delta Lake' }; } const apiOutput = clusterStep.data; try { const minDeltaVersion = variables.iq_104_3_min_delta_version || '2.4'; const clusters = apiOutput.clusters || [apiOutput]; let found = false; let failReasons = []; for (const cluster of clusters) { if (!cluster.spark_version) { failReasons.push('Spark version information not available'); continue; } const sparkVersion = cluster.spark_version; const deltaMatch = sparkVersion.match(/Delta (\\d+\\.\\d+)/i); if (deltaMatch) { const deltaVersion = deltaMatch[1]; if (parseFloat(deltaVersion) >= parseFloat(minDeltaVersion)) { found = true; break; } else { failReasons.push(`Delta Lake version ${deltaVersion} does not meet minimum requirement of ${minDeltaVersion}`); } } else { failReasons.push('Delta Lake version not found in spark version: ' + sparkVersion); } } if (found) { return { status: 'pass', message: `At least one cluster has required Delta Lake version`, code: 'VALID_DELTA_VERSION', test_id: 'IQ-104-3', title: 'Delta Lake' }; } else { return { status: 'fail', message: failReasons.join(' | '), code: 'NO_DELTA_VERSION', test_id: 'IQ-104-3', title: 'Delta Lake' }; } } catch (error) { return { status: 'fail', message: 'Error processing Delta Lake version data: ' + error.message, code: 'PROCESSING_ERROR', test_id: 'IQ-104-3', title: 'Delta Lake' }; } }"
}