{
  "title": "Auto-scaling",
  "test_description": "Validate that the Databricks cluster has the required auto-scaling configuration",
  "version": "1.0",
  "test_code": "IQ-104-3",
  "test_seq": 3,
  "test_suite": "IQ-104",
  "test_suite_title": "Cluster Configuration",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "get_cluster_autoscale",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/clusters/get",
      "headers": {
        "Authorization": "Bearer ${token}"
      },
      "payload": {
        "cluster_id": "${cluster_id}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { return currentVariables; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const clusterStep = stepResults.get_cluster_autoscale; const requiredMinWorkers = variables.iq_104_2_min_workers || 8; const requiredMaxWorkers = variables.iq_104_2_max_workers || 32; const expected_result = `Auto-scaling: ${requiredMinWorkers}-${requiredMaxWorkers} nodes`; let actual_result = 'Auto-scaling: Not found'; if (clusterStep.error) { return { status: 'fail', message: 'No response received from API', code: 'NO_RESPONSE', test_id: 'IQ-104-3', title: 'Auto-scaling', expected_result, actual_result }; } const apiOutput = clusterStep.data; if (!apiOutput || !apiOutput.autoscale) { return { status: 'fail', message: 'Auto-scaling configuration is missing', code: 'MISSING_AUTOSCALE_INFO', test_id: 'IQ-104-3', title: 'Auto-scaling', expected_result, actual_result }; } const minWorkers = apiOutput.autoscale.min_workers; const maxWorkers = apiOutput.autoscale.max_workers; if (minWorkers === undefined || maxWorkers === undefined) { return { status: 'fail', message: 'Auto-scaling configuration is incomplete', code: 'INCOMPLETE_AUTOSCALE_INFO', test_id: 'IQ-104-3', title: 'Auto-scaling', expected_result, actual_result }; } actual_result = `Auto-scaling: ${minWorkers}-${maxWorkers} nodes`; const minMatches = minWorkers === requiredMinWorkers; const maxMatches = maxWorkers === requiredMaxWorkers; if (minMatches && maxMatches) { return { status: 'pass', message: 'Cluster has the required auto-scaling configuration', code: 'CORRECT_AUTO_SCALING', test_id: 'IQ-104-3', title: 'Auto-scaling', expected_result, actual_result }; } else { return { status: 'fail', message: `Cluster auto-scaling configuration does not meet requirements: Min workers is ${minWorkers} instead of ${requiredMinWorkers}; Max workers is ${maxWorkers} instead of ${requiredMaxWorkers}`, code: 'INCORRECT_AUTO_SCALING', test_id: 'IQ-104-3', title: 'Auto-scaling', expected_result, actual_result }; } }",
  "manual_procedure": "databricks clusters get --cluster-id <id> | jq '.autoscale.min_workers, .autoscale.max_workers'"
}