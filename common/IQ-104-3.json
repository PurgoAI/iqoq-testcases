{
  "title": "Delta Lake",
  "test_description": "Validate that the Databricks cluster has the required Delta Lake version",
  "test_code": "IQ-104-3",
  "test_seq": 3,
  "test_suite": "IQ-104",
  "test_suite_title": "Cluster Configuration",
  "category": "IQ",
  "version": "1.0",
  "api_calls": [
    {
      "step": 1,
      "name": "get_cluster_delta",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/clusters/get",
      "headers": {
        "Authorization": "Bearer ${token}"
      },
      "payload": {
        "cluster_id": "${cluster_id}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { return currentVariables; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const clusterStep = stepResults.get_cluster_delta; const expected_result = `Delta Lake: v${(typeof variables !== 'undefined' && variables.iq_104_3_min_delta_version) || '2.4.5'} (+0/-1 minor)`; let actual_result = 'Delta Lake: Not found'; if (clusterStep.error) { return { status: 'fail', message: 'No response received from API', code: 'NO_RESPONSE', test_id: 'IQ-104-3', title: 'Delta Lake', expected_result, actual_result }; } const apiOutput = clusterStep.data; let sparkVersion = apiOutput.spark_version || ''; let deltaVersion = null; var deltaMatch = null; if (typeof sparkVersion === 'string') { deltaMatch = sparkVersion.match(/Delta (\\d+\\.\\d+\\.\\d+)/i); } if (deltaMatch) { deltaVersion = deltaMatch[1]; actual_result = `Delta Lake: v${deltaVersion}`; } if (deltaVersion) { var requiredVersion = (typeof variables !== 'undefined' && variables.iq_104_3_min_delta_version) || '2.4.5'; var reqParts = requiredVersion.split('.'); var actParts = deltaVersion.split('.'); if (reqParts.length === 3 && actParts.length === 3) { var reqMajor = parseInt(reqParts[0], 10); var reqMinor = parseInt(reqParts[1], 10); var reqPatch = parseInt(reqParts[2], 10); var actMajor = parseInt(actParts[0], 10); var actMinor = parseInt(actParts[1], 10); var actPatch = parseInt(actParts[2], 10); if (!isNaN(reqMajor) && !isNaN(reqMinor) && !isNaN(actMajor) && !isNaN(actMinor)) { if (actMajor === reqMajor && (actMinor === reqMinor || actMinor === reqMinor - 1)) { return { status: 'pass', message: `Delta Lake version ${deltaVersion} meets requirement`, code: 'VALID_DELTA_VERSION', test_id: 'IQ-104-3', title: 'Delta Lake', expected_result, actual_result }; } else { return { status: 'fail', message: `Delta Lake version ${deltaVersion} does not meet minimum requirement of ${requiredVersion}`, code: 'NO_DELTA_VERSION', test_id: 'IQ-104-3', title: 'Delta Lake', expected_result, actual_result }; } } } } return { status: 'fail', message: 'Delta Lake version not found in spark version: ' + sparkVersion, code: 'NO_DELTA_VERSION', test_id: 'IQ-104-3', title: 'Delta Lake', expected_result, actual_result }; }",
  "manual_procedure": "databricks clusters get --cluster-id <id> | jq '.spark_version'"
}