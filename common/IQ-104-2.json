{
  "title": "Worker Nodes",
  "test_description": "Validate that the Databricks cluster has the required worker node type and count",
  "test_code": "IQ-104-2",
  "test_seq": 2,
  "test_suite": "IQ-104",
  "test_suite_title": "Cluster Configuration",
  "test_type": "Workspace",
  "category": "IQ",
  "version": "1.0",
  "api_calls": [
    {
      "step": 1,
      "name": "get_cluster_info",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/clusters/get",
      "headers": {
        "Authorization": "Bearer ${token}"
      },
      "payload": {
        "cluster_id": "${cluster_id}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const clusterData = responseData || {}; const nodeTypeId = clusterData.node_type_id || 'Unknown'; const numWorkers = clusterData.num_workers || 0; const autoscale = clusterData.autoscale || null; const minWorkers = autoscale ? (autoscale.min_workers || 0) : 0; const maxWorkers = autoscale ? (autoscale.max_workers || 0) : 0; const hasAutoscale = autoscale !== null; const effectiveWorkerCount = hasAutoscale ? minWorkers : numWorkers; return { ...currentVariables, actual_node_type: nodeTypeId, actual_num_workers: numWorkers, actual_min_workers: minWorkers, actual_max_workers: maxWorkers, has_autoscale: hasAutoscale, effective_worker_count: effectiveWorkerCount }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const clusterStep = stepResults.get_cluster_info; const requiredWorkerCount = variables.iq_104_1_worker_count || 8; const requiredNodeType = variables.iq_104_1_node_type || 'E32ds v5'; const expected_result = `Worker Nodes: ${requiredNodeType} (${requiredWorkerCount} workers)`; let actual_result = 'Worker Nodes: Not found'; if (clusterStep.error) { return { status: 'fail', message: 'No response received from API', code: 'NO_RESPONSE', test_id: 'IQ-104-2', title: 'Worker Nodes', expected_result, actual_result }; } const actualNodeType = variables.actual_node_type || 'Unknown'; const actualNumWorkers = variables.actual_num_workers || 0; const actualMinWorkers = variables.actual_min_workers || 0; const actualMaxWorkers = variables.actual_max_workers || 0; const hasAutoscale = variables.has_autoscale || false; const effectiveWorkerCount = variables.effective_worker_count || 0; if (!actualNodeType || actualNodeType === 'Unknown') { return { status: 'fail', message: 'Cluster response is missing node type information', code: 'MISSING_CLUSTER_INFO', test_id: 'IQ-104-2', title: 'Worker Nodes', expected_result, actual_result }; } const nodeTypeMatches = actualNodeType.toLowerCase().includes(requiredNodeType.toLowerCase()); if (!nodeTypeMatches) { actual_result = `Worker Nodes: Node type mismatch - Expected: ${requiredNodeType}, Actual: ${actualNodeType}`; return { status: 'fail', message: `Cluster node type does not meet requirements: ${actualNodeType} instead of ${requiredNodeType}`, code: 'INCORRECT_NODE_TYPE', test_id: 'IQ-104-2', title: 'Worker Nodes', expected_result, actual_result }; } const workerCountMatches = effectiveWorkerCount === requiredWorkerCount; if (hasAutoscale) { actual_result = `Worker Nodes: ${actualNodeType} (autoscale ${actualMinWorkers}-${actualMaxWorkers}, min ${actualMinWorkers} workers)`; } else { actual_result = `Worker Nodes: ${actualNodeType} (${actualNumWorkers} workers)`; } if (workerCountMatches) { return { status: 'pass', message: 'Cluster has the required worker node configuration', code: 'CORRECT_WORKER_CONFIGURATION', test_id: 'IQ-104-2', title: 'Worker Nodes', expected_result, actual_result }; } else { const expectedCount = requiredWorkerCount; const actualCount = effectiveWorkerCount; return { status: 'fail', message: `Cluster worker count does not meet requirements: ${actualCount} instead of ${expectedCount}`, code: 'INCORRECT_WORKER_COUNT', test_id: 'IQ-104-2', title: 'Worker Nodes', expected_result, actual_result }; } }",
  "manual_procedure": "# Worker node check\ndatabricks clusters get --cluster-id <id> | jq '.num_workers, .node_type_id, .autoscale.min_workers'"
}