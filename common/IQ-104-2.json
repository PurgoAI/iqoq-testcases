{
  "title": "Auto-scaling",
  "test_description": "Validate that the Databricks cluster has the required auto-scaling configuration",
  "version": "1.0",
  "test_code": "IQ-104-2",
  "test_seq": 2,
  "test_suite": "IQ-104",
  "test_suite_title": "Cluster Configuration",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "get_cluster_autoscale",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/clusters/get",
      "headers": {
        "Authorization": "Bearer ${token}"
      },
      "payload": {
        "cluster_id": "${cluster_id}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { return currentVariables; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const clusterStep = stepResults.get_cluster_autoscale; if (clusterStep.error) { return { status: 'fail', message: 'No response received from API', code: 'NO_RESPONSE', test_id: 'IQ-104-2', title: 'Auto-scaling' }; } const apiOutput = clusterStep.data; try { const requiredMinWorkers = variables.iq_104_2_min_workers || 8; const requiredMaxWorkers = variables.iq_104_2_max_workers || 32; const clusters = apiOutput.clusters || [apiOutput]; let found = false; let failReasons = []; for (const cluster of clusters) { if (!cluster.autoscale) { failReasons.push('Cluster does not have auto-scaling enabled'); continue; } const minWorkers = cluster.autoscale.min_workers; const maxWorkers = cluster.autoscale.max_workers; if (minWorkers === undefined || maxWorkers === undefined) { failReasons.push('Auto-scaling configuration is incomplete'); continue; } const minCorrect = minWorkers === requiredMinWorkers; const maxCorrect = maxWorkers === requiredMaxWorkers; if (minCorrect && maxCorrect) { found = true; break; } else { let message = 'Cluster auto-scaling configuration does not meet requirements:'; if (!minCorrect) { message += ` Min workers is ${minWorkers} instead of ${requiredMinWorkers};`; } if (!maxCorrect) { message += ` Max workers is ${maxWorkers} instead of ${requiredMaxWorkers};`; } failReasons.push(message); } } if (found) { return { status: 'pass', message: `At least one cluster has the required auto-scaling configuration (${requiredMinWorkers}-${requiredMaxWorkers} nodes)`, code: 'CORRECT_AUTO_SCALING', test_id: 'IQ-104-2', title: 'Auto-scaling' }; } else { return { status: 'fail', message: failReasons.join(' | '), code: 'INCORRECT_AUTO_SCALING', test_id: 'IQ-104-2', title: 'Auto-scaling' }; } } catch (error) { return { status: 'fail', message: 'Error processing auto-scaling data: ' + error.message, code: 'PROCESSING_ERROR', test_id: 'IQ-104-2', title: 'Auto-scaling' }; } }"
}