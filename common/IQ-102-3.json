{
  "title": "RBAC validation",
  "test_description": "Validate RBAC (Role-Based Access Control) implementation",
  "version": "1.0",
  "test_code": "IQ-102-3",
  "test_seq": 3,
  "test_suite": "IQ-102",
  "test_suite_title": "Unity Catalog Configuration",

  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "check_rbac_grants",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "SHOW GRANT ON SCHEMA silver",
        "warehouse_id": "${warehouse_id}",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { return currentVariables; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const rbacStep = stepResults.check_rbac_grants; const expected_result = 'Only approved roles listed'; let actual_result = 'Roles: None'; if (rbacStep.error) { return { status: 'fail', message: 'No response received from API', code: 'NO_RESPONSE', test_id: 'IQ-102-3', title: 'RBAC validation', expected_result, actual_result }; } const apiOutput = rbacStep.data; if (!apiOutput || !apiOutput.result || !apiOutput.result.data_array) { return { status: 'fail', message: 'No RBAC data found in response', code: 'NO_DATA', test_id: 'IQ-102-3', title: 'RBAC validation', expected_result, actual_result }; } const dataArray = apiOutput.result.data_array; const approvedRoles = variables.iq_102_3_approved_roles || ['analyst']; const foundApprovedUsers = new Set(); for (const row of dataArray) { if (row && row.length > 0) { const principal = String(row[0]).toLowerCase(); if (approvedRoles.includes(principal)) { foundApprovedUsers.add(principal); } } } if (foundApprovedUsers.size > 0) { actual_result = 'Roles: ' + Array.from(foundApprovedUsers).join(', '); return { status: 'pass', message: 'RBAC properly implemented with approved roles: ' + Array.from(foundApprovedUsers).join(', '), code: 'RBAC_VERIFIED', test_id: 'IQ-102-3', title: 'RBAC validation', expected_result, actual_result }; } else { return { status: 'fail', message: 'No approved roles found with access to the schema', code: 'MISSING_APPROVED_ROLES', test_id: 'IQ-102-3', title: 'RBAC validation', expected_result, actual_result }; } }",
  "manual_procedure": "Run: SHOW GRANT ON SCHEMA cdr silver"
}