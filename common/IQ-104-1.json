{
  "title": "Worker Nodes",
  "test_description": "Validate that the Databricks cluster has the required worker nodes configuration",
  "test_code": "IQ-104-1",
  "test_seq": 1,
  "test_suite": "IQ-104",
  "test_suite_title": "Cluster Configuration",
  "category": "IQ",
  "version": "1.0",
  "api_calls": [
    {
      "step": 1,
      "name": "get_cluster_info",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/clusters/get",
      "headers": {
        "Authorization": "Bearer ${token}"
      },
      "payload": {
        "cluster_id": "${cluster_id}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { return currentVariables; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const clusterStep = stepResults.get_cluster_info; if (clusterStep.error) { return { status: 'fail', message: 'No response received from API', code: 'NO_RESPONSE', test_id: 'IQ-104-1', title: 'Worker Nodes' }; } const apiOutput = clusterStep.data; try { const requiredNodeType = variables.iq_104_1_node_type || 'e32ds_v5'; const requiredWorkerCount = variables.iq_104_1_worker_count || 8; if (!apiOutput.node_type_id) { return { status: 'fail', message: 'Cluster response is missing node type information', code: 'INVALID_RESPONSE_FORMAT', test_id: 'IQ-104-1', title: 'Worker Nodes' }; } const nodeTypeMatches = apiOutput.node_type_id.toLowerCase().includes(requiredNodeType.toLowerCase()); let workerCountCorrect = false; let actualWorkerCount = 0; if (apiOutput.num_workers !== undefined) { actualWorkerCount = apiOutput.num_workers; workerCountCorrect = apiOutput.num_workers === requiredWorkerCount; } else if (apiOutput.autoscale && apiOutput.autoscale.min_workers !== undefined) { actualWorkerCount = apiOutput.autoscale.min_workers; workerCountCorrect = apiOutput.autoscale.min_workers === requiredWorkerCount; } if (nodeTypeMatches && workerCountCorrect) { return { status: 'pass', message: `Cluster has the required ${requiredWorkerCount} x ${requiredNodeType} worker nodes`, code: 'CORRECT_WORKER_CONFIGURATION', test_id: 'IQ-104-1', title: 'Worker Nodes' }; } else { let message = 'Cluster worker configuration does not meet requirements:'; if (!nodeTypeMatches) { message += ` Node type is not ${requiredNodeType};`; } if (!workerCountCorrect) { message += ` Worker count is ${actualWorkerCount} instead of ${requiredWorkerCount};`; } return { status: 'fail', message: message, code: 'INCORRECT_WORKER_CONFIGURATION', test_id: 'IQ-104-1', title: 'Worker Nodes' }; } } catch (error) { return { status: 'fail', message: 'Error processing cluster data: ' + error.message, code: 'PROCESSING_ERROR', test_id: 'IQ-104-1', title: 'Worker Nodes' }; } }"
}