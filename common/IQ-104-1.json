{
  "title": "Cluster State",
  "test_description": "Validate that the Databricks cluster is in RUNNING state and has the required worker type configuration",
  "test_code": "IQ-104-1",
  "test_seq": 1,
  "test_suite": "IQ-104",
  "test_suite_title": "Cluster Configuration",
  "category": "IQ",
  "version": "1.0",
  "api_calls": [
    {
      "step": 1,
      "name": "get_cluster_state",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/clusters/get",
      "headers": {
        "Authorization": "Bearer ${token}"
      },
      "payload": {
        "cluster_id": "${cluster_id}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { return currentVariables; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const clusterStep = stepResults.get_cluster_state; const requiredWorkerType = variables.iq_104_1_worker_type || 'E32ds v5'; const expected_result = `Cluster State: RUNNING, Worker Type: ${requiredWorkerType}`; let actual_result = 'Cluster State: Unknown'; if (clusterStep.error) { return { status: 'fail', message: 'No response received from API', code: 'NO_RESPONSE', test_id: 'IQ-104-1', title: 'Cluster State', expected_result, actual_result }; } const apiOutput = clusterStep.data; if (!apiOutput) { return { status: 'fail', message: 'Cluster response is empty', code: 'EMPTY_CLUSTER_RESPONSE', test_id: 'IQ-104-1', title: 'Cluster State', expected_result, actual_result }; } const clusterState = apiOutput.state; const nodeTypeId = apiOutput.node_type_id; if (!clusterState) { return { status: 'fail', message: 'Cluster state information is missing', code: 'MISSING_CLUSTER_STATE', test_id: 'IQ-104-1', title: 'Cluster State', expected_result, actual_result }; } if (!nodeTypeId) { return { status: 'fail', message: 'Worker type information is missing', code: 'MISSING_WORKER_TYPE', test_id: 'IQ-104-1', title: 'Cluster State', expected_result, actual_result }; } actual_result = `Cluster State: ${clusterState}, Worker Type: ${nodeTypeId}`; const stateMatches = clusterState === 'RUNNING'; const workerTypeMatches = nodeTypeId.toLowerCase().includes(requiredWorkerType.toLowerCase()); if (stateMatches && workerTypeMatches) { return { status: 'pass', message: 'Cluster is running with correct worker type configuration', code: 'CLUSTER_RUNNING_CORRECT_TYPE', test_id: 'IQ-104-1', title: 'Cluster State', expected_result, actual_result }; } else if (stateMatches && !workerTypeMatches) { return { status: 'fail', message: `Cluster is running but worker type ${nodeTypeId} does not match required ${requiredWorkerType}`, code: 'CLUSTER_RUNNING_WRONG_TYPE', test_id: 'IQ-104-1', title: 'Cluster State', expected_result, actual_result }; } else if (!stateMatches && workerTypeMatches) { return { status: 'fail', message: `Cluster worker type is correct but cluster state is ${clusterState} instead of RUNNING`, code: 'CLUSTER_WRONG_STATE_CORRECT_TYPE', test_id: 'IQ-104-1', title: 'Cluster State', expected_result, actual_result }; } else { return { status: 'fail', message: `Cluster state is ${clusterState} and worker type ${nodeTypeId} does not match required ${requiredWorkerType}`, code: 'CLUSTER_WRONG_STATE_WRONG_TYPE', test_id: 'IQ-104-1', title: 'Cluster State', expected_result, actual_result }; } }",
  "manual_procedure": "databricks clusters get --cluster-id <id> | jq '.state, .node_type_id'"
}