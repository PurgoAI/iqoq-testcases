{
  "title": "Cluster State RUNNING within 5min",
  "test_description": "Cluster State RUNNING within 5min: Start a cluster if not running, wait for it to reach RUNNING state within 5 minutes. Test passes if cluster was already running at the beginning.",
  "version": "1.0",
  "test_code": "IQ-104-1",
  "test_seq": 1,
  "test_suite": "IQ-104",
  "test_suite_title": "Cluster Configuration",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "check_cluster_status",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/clusters/get",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "cluster_id": "${cluster_id}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const state = responseData.state; const wasRunningAtStart = state === 'RUNNING'; logger.debug('Initial cluster state:', { state, wasRunningAtStart }); return { ...currentVariables, cluster_state: state, was_running_at_start: wasRunningAtStart, initial_state: state }; }"
    },
    {
      "step": 2,
      "name": "start_cluster",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/clusters/start",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "cluster_id": "${cluster_id}"
      },
      "post_processing": "async function processStep(responseData, currentVariables) { const wasRunningAtStart = currentVariables.was_running_at_start; if (wasRunningAtStart) { logger.debug('Cluster already running, skipping start'); return { ...currentVariables, start_skipped: true }; } logger.debug('Cluster start initiated'); await delay(30000); return { ...currentVariables, start_initiated: true }; }"
    },
    {
      "step": 3,
      "name": "poll_for_running",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/clusters/get",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "cluster_id": "${cluster_id}"
      },
      "post_processing": "async function processStep(responseData, currentVariables) { const wasRunningAtStart = currentVariables.was_running_at_start; if (wasRunningAtStart) { logger.debug('Cluster already running, no polling needed'); return { ...currentVariables, cluster_running: true, final_state: 'RUNNING', polling_completed: true }; } logger.debug('Beginning polling for cluster to reach RUNNING state'); let pollAttempts = 0; const maxAttempts = 20; const pollInterval = 15000; while (pollAttempts < maxAttempts) { pollAttempts++; logger.debug('Polling attempt ' + pollAttempts + ' of ' + maxAttempts); try { const response = await axios.get(`${currentVariables.workspace_url}/api/2.0/clusters/get`, { headers: { 'Authorization': `Bearer ${currentVariables.token}`, 'Content-Type': 'application/json' }, params: { cluster_id: currentVariables.cluster_id } }); const state = response.data.state; logger.debug('Cluster state:', state); if (state === 'RUNNING') { logger.debug('Cluster is now RUNNING'); return { ...currentVariables, cluster_running: true, final_state: state, polling_completed: true, poll_attempts: pollAttempts }; } else if (state === 'TERMINATED' || state === 'TERMINATING') { logger.debug('Cluster terminated, cannot reach RUNNING state'); return { ...currentVariables, cluster_running: false, final_state: state, polling_completed: true, poll_attempts: pollAttempts }; } else { logger.debug('Cluster state: ' + state + ', waiting...'); if (pollAttempts < maxAttempts) { await delay(pollInterval); } } } catch (error) { logger.error('Polling error:', error.message); if (pollAttempts < maxAttempts) { await delay(pollInterval); } } } logger.debug('Polling completed after ' + maxAttempts + ' attempts'); return { ...currentVariables, cluster_running: false, final_state: 'UNKNOWN', polling_completed: true, poll_attempts: maxAttempts, polling_timeout: true }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const checkStep = stepResults.check_cluster_status; const startStep = stepResults.start_cluster; const pollStep = stepResults.poll_for_running; const expected_result = 'Result: Cluster reached RUNNING state within 5 minutes'; let actual_result = ''; let clusterRunning = false; let finalState = 'UNKNOWN'; const wasRunningAtStart = variables.was_running_at_start || false; if (!checkStep || checkStep.status !== 200) { actual_result = 'Failed to get initial cluster status'; return { status: 'fail', message: actual_result, code: 'GET_STATUS_FAILED', test_id: 'IQ-104-1', title: 'Cluster State RUNNING within 5min', expected_result, actual_result }; } const initialState = checkStep.data.state; actual_result = 'Initial cluster state: ' + initialState; if (wasRunningAtStart) { clusterRunning = true; finalState = 'RUNNING'; actual_result += ' | Cluster was already running at start - test passes'; return { status: 'pass', message: 'Cluster was already running at start - test passes', code: 'CLUSTER_ALREADY_RUNNING', test_id: 'IQ-104-1', title: 'Cluster State RUNNING within 5min', expected_result, actual_result }; } if (initialState === 'TERMINATED' || initialState === 'TERMINATING') { if (!startStep || startStep.status !== 200) { actual_result += ' | Failed to start cluster'; return { status: 'fail', message: actual_result, code: 'START_CLUSTER_FAILED', test_id: 'IQ-104-1', title: 'Cluster State RUNNING within 5min', expected_result, actual_result }; } actual_result += ' | Cluster start initiated'; } else { actual_result += ' | Cluster in intermediate state: ' + initialState; } if (variables.polling_completed) { finalState = variables.final_state || 'UNKNOWN'; clusterRunning = variables.cluster_running || false; const pollAttempts = variables.poll_attempts || 0; if (clusterRunning) { actual_result += ' | Cluster reached RUNNING state after ' + pollAttempts + ' polling attempts'; } else if (finalState === 'TERMINATED' || finalState === 'TERMINATING') { actual_result += ' | Cluster terminated during startup'; } else if (variables.polling_timeout) { actual_result += ' | Cluster did not reach RUNNING state within 5 minutes (polling timeout)'; } else { actual_result += ' | Cluster did not reach RUNNING state within 5 minutes'; } } else { actual_result += ' | Polling did not complete'; return { status: 'fail', message: actual_result, code: 'POLLING_INCOMPLETE', test_id: 'IQ-104-1', title: 'Cluster State RUNNING within 5min', expected_result, actual_result }; } if (!clusterRunning) { return { status: 'fail', message: actual_result, code: 'CLUSTER_NOT_RUNNING', test_id: 'IQ-104-1', title: 'Cluster State RUNNING within 5min', expected_result, actual_result }; } return { status: 'pass', message: 'Cluster reached RUNNING state within 5 minutes', code: 'CLUSTER_RUNNING_SUCCESS', test_id: 'IQ-104-1', title: 'Cluster State RUNNING within 5min', expected_result, actual_result }; }",
  "manual_procedure": "Check cluster status, start if not running, wait for RUNNING state (max 5 minutes). Test passes if cluster was already running at start."
} 