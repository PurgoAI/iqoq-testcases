{
  "title": "Bronze Layer Location",
  "test_description": "Bronze layer location validation - Validates bronze external locations and schemas using Unity Catalog metadata.",
  "version": "1.0",
  "test_code": "OQ-102-1",
  "test_seq": 1,
  "test_suite": "OQ-102",
  "test_suite_title": "Data Ingestion",
  "category": "OQ",
  "manual_procedure": "Check bronze layer location",
  "api_calls": [
    {
      "step": 1,
      "name": "check_external_locations",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "SELECT url FROM system.information_schema.external_locations WHERE url LIKE '%bronze%'",
        "warehouse_id": "${warehouse_id}",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const queryStatus = responseData?.status?.state || 'UNKNOWN'; const dataArray = responseData?.result?.data_array || []; const foundLocations = dataArray.length; const locationUrls = dataArray.map(row => row[0] || ''); return { ...currentVariables, locations_query_status: queryStatus, found_locations: foundLocations, location_urls: locationUrls }; }"
    },
    {
      "step": 2,
      "name": "check_bronze_schemas",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "SHOW SCHEMAS",
        "warehouse_id": "${warehouse_id}",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const queryStatus = responseData?.status?.state || 'UNKNOWN'; const dataArray = responseData?.result?.data_array || []; const allSchemaNames = dataArray.map(row => row[0] || ''); const bronzeSchemas = allSchemaNames.filter(name => name && name.toLowerCase().includes('bronze')); return { ...currentVariables, schemas_query_status: queryStatus, found_bronze_schemas: bronzeSchemas.length, bronze_schema_names: bronzeSchemas }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const locationsStep = stepResults.check_external_locations; const schemasStep = stepResults.check_bronze_schemas; const expected_result = 'Bronze layer found'; let actual_result = 'Bronze layer not found'; if (locationsStep.error && schemasStep.error) { return { status: 'fail', message: 'Failed to execute bronze layer validation queries', code: 'BRONZE_LAYER_QUERY_ERROR', test_id: 'OQ-102-1', title: 'Bronze Layer Location', expected_result, actual_result }; } const foundLocations = variables.found_locations || 0; const locationUrls = variables.location_urls || []; const foundBronzeSchemas = variables.found_bronze_schemas || 0; const bronzeSchemaNames = variables.bronze_schema_names || []; if (foundLocations > 0) { actual_result = `Found ${foundLocations} external locations: ${locationUrls.join(', ')}`; return { status: 'pass', message: `Found ${foundLocations} external locations for bronze layer`, code: 'BRONZE_LOCATION_FOUND', test_id: 'OQ-102-1', title: 'Bronze Layer Location', expected_result, actual_result }; } else if (foundBronzeSchemas > 0) { actual_result = `Found ${foundBronzeSchemas} bronze schemas: ${bronzeSchemaNames.join(', ')}`; return { status: 'pass', message: `Found ${foundBronzeSchemas} bronze schemas`, code: 'BRONZE_SCHEMAS_FOUND', test_id: 'OQ-102-1', title: 'Bronze Layer Location', expected_result, actual_result }; } else { actual_result = 'No bronze layer found'; return { status: 'fail', message: 'No bronze layer found (no external locations or schemas)', code: 'BRONZE_LAYER_NOT_FOUND', test_id: 'OQ-102-1', title: 'Bronze Layer Location', expected_result, actual_result }; } }"
} 