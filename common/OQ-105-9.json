{
  "title": "Authorization Access (Direct) - Revoke",
  "test_description": "Authorization Access (Direct) - Revoke: Revoke SELECT permission directly from user2 and verify user2 can no longer SELECT from the table.",
  "version": "2.3",
  "test_code": "OQ-105-9",
  "test_seq": 9,
  "test_suite": "OQ-105",
  "test_suite_title": "Data Governance",
  "category": "OQ",
  "api_calls": [
    {
      "step": 1,
      "name": "get_user2_info",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/preview/scim/v2/Me",
      "headers": {
        "Authorization": "Bearer ${token2}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const user2Name = responseData.userName || 'test-user'; logger.debug('User2 info:', { user2Name }); return { ...currentVariables, user2_name: user2Name }; }"
    },
    {
      "step": 2,
      "name": "revoke_select_from_user",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "REVOKE SELECT ON TABLE ${catalog_name}.silver.sdtm_dm FROM `${user2_name}`",
        "warehouse_id": "${warehouse_id}"
      },
      "post_processing": "async function processStep(responseData, currentVariables) { const success = responseData?.status?.state === 'SUCCEEDED'; logger.debug('Revoke SELECT from user result:', success); await delay(30000); return { ...currentVariables, revoke_success: success }; }"
    },
    {
      "step": 3,
      "name": "test_select_access",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token2}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "SELECT * FROM ${catalog_name}.silver.sdtm_dm LIMIT 5",
        "warehouse_id": "${warehouse_id}"
      },
            "post_processing": "function processStep(responseData, currentVariables) { const statusCode = responseData?.status?.state || 'UNKNOWN'; const errorMessage = responseData?.status?.error?.message || ''; const sqlState = responseData?.status?.sql_state || ''; const isPermissionError = statusCode === 'FAILED' && (errorMessage.toLowerCase().includes('permission') || errorMessage.toLowerCase().includes('privileges') || errorMessage.toLowerCase().includes('access') || errorMessage.toLowerCase().includes('unauthorized') || errorMessage.toLowerCase().includes('forbidden') || errorMessage.toLowerCase().includes('insufficient') || errorMessage.toLowerCase().includes('permission_denied') || errorMessage.toLowerCase().includes('insufficient_permissions') || sqlState === '42501' || sqlState === '42000'); logger.debug('Permission error check after revoke:', { statusCode, errorMessage, sqlState, isPermissionError }); return { ...currentVariables, is_permission_error: isPermissionError, error_message: errorMessage, sql_state: sqlState }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const userStep = stepResults.get_user2_info; const revokeStep = stepResults.revoke_select_from_user; const accessStep = stepResults.test_select_access; const expected_result = 'Result: Access denied with permission error'; let actual_result = 'Authorization test not completed'; if (!userStep || !userStep.data || !userStep.data.userName) { actual_result = 'Failed to get user2 information.'; return { status: 'fail', message: actual_result, code: 'GET_USER_FAILED', test_id: 'OQ-105-9', title: 'Authorization Access (Direct) - Revoke', expected_result, actual_result }; } if (!revokeStep || !revokeStep.data || revokeStep.data.status.state !== 'SUCCEEDED') { let errorMsg = 'Unknown error'; if (revokeStep && revokeStep.data && revokeStep.data.status && revokeStep.data.status.error) { errorMsg = revokeStep.data.status.error.message || revokeStep.data.status.error; } actual_result = 'Failed to revoke SELECT permission from user: ' + errorMsg; return { status: 'fail', message: actual_result, code: 'REVOKE_SELECT_USER_FAILED', test_id: 'OQ-105-9', title: 'Authorization Access (Direct) - Revoke', expected_result, actual_result }; } const isPermissionError = variables.is_permission_error; const errorMessage = variables.error_message || ''; if (isPermissionError) { actual_result = 'Access denied: ' + errorMessage; } else if (accessStep.data.status && accessStep.data.status.state === 'SUCCEEDED') { actual_result = 'Access granted (should have failed).'; return { status: 'fail', message: 'Authorization validation failed: User2 SELECT access was not revoked directly', code: 'AUTH_ACCESS_DIRECT_REVOKE_FAILED', test_id: 'OQ-105-9', title: 'Authorization Access (Direct) - Revoke', expected_result, actual_result }; } else { actual_result = 'Query failed but not due to permission error: ' + errorMessage; return { status: 'fail', message: 'Query failed but not due to permission error: ' + errorMessage, code: 'AUTH_ACCESS_DIRECT_REVOKE_UNEXPECTED_ERROR', test_id: 'OQ-105-9', title: 'Authorization Access (Direct) - Revoke', expected_result, actual_result }; } return { status: 'pass', message: 'Authorization validation passed: User2 SELECT access properly denied after direct revoke', code: 'AUTH_ACCESS_DIRECT_REVOKE_PASSED', test_id: 'OQ-105-9', title: 'Authorization Access (Direct) - Revoke', expected_result, actual_result }; }",
  "manual_procedure": "Get user2 info, revoke SELECT permission directly from user2, and verify user2 can no longer SELECT from the table."
} 