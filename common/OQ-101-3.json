{
  "title": "Unity Catalog Compatibility",
  "test_description": "Validate Unity Catalog compatibility by executing SHOW CATALOGS command successfully",
  "version": "1.0",
  "test_code": "OQ-101-3",
  "test_seq": 3,
  "test_suite": "OQ-101",
  "test_suite_title": "Cluster Availability",
  "category": "OQ",
  "manual_procedure": "Test Unity Catalog compatibility",
  "api_calls": [
    {
      "step": 1,
      "name": "execute_show_catalogs",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "SHOW CATALOGS",
        "warehouse_id": "${warehouse_id}",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const queryStatus = responseData?.status?.state || 'UNKNOWN'; const dataArray = responseData?.result?.data_array || []; const catalogCount = dataArray.length; const catalogs = dataArray.map(row => row && row.length > 0 ? row[0] : '').filter(name => name !== ''); return { ...currentVariables, query_status: queryStatus, catalog_count: catalogCount, catalogs: catalogs }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const catalogStep = stepResults.execute_show_catalogs; const expected_result = 'SHOW CATALOGS: Executes successfully'; let actual_result = 'SHOW CATALOGS: Not executed'; if (catalogStep.error) { return { status: 'fail', message: 'Failed to execute SHOW CATALOGS command', code: 'UNITY_CATALOG_QUERY_FAILED', test_id: 'OQ-101-3', title: 'Unity Catalog Compatibility', expected_result, actual_result }; } const queryStatus = variables.query_status || 'UNKNOWN'; const catalogCount = variables.catalog_count || 0; const catalogs = variables.catalogs || []; if (queryStatus !== 'SUCCEEDED') { actual_result = `SHOW CATALOGS: Failed (${queryStatus})`; return { status: 'fail', message: `Unity Catalog query failed with status: ${queryStatus}`, code: 'UNITY_CATALOG_QUERY_FAILED', test_id: 'OQ-101-3', title: 'Unity Catalog Compatibility', expected_result, actual_result }; } if (catalogCount === 0) { actual_result = 'SHOW CATALOGS: No catalogs found'; return { status: 'fail', message: 'Unity Catalog accessible but no catalogs found', code: 'NO_CATALOGS_FOUND', test_id: 'OQ-101-3', title: 'Unity Catalog Compatibility', expected_result, actual_result }; } actual_result = `SHOW CATALOGS: Success (${catalogCount} catalogs)`; const catalogList = catalogs.slice(0, 3).join(', ') + (catalogs.length > 3 ? `, ...and ${catalogs.length - 3} more` : ''); return { status: 'pass', message: `Unity Catalog compatibility validated. Found ${catalogCount} catalogs: ${catalogList}`, code: 'UNITY_CATALOG_COMPATIBLE', test_id: 'OQ-101-3', title: 'Unity Catalog Compatibility', expected_result, actual_result }; }"
} 