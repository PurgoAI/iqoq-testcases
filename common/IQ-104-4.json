{
  "title": "Delta Lake",
  "test_description": "Validate that the Databricks cluster has the required Delta Lake version",
  "test_code": "IQ-104-4",
  "test_seq": 4,
  "test_suite": "IQ-104",
  "test_suite_title": "Cluster Configuration",
  "test_type": "Workspace",
  "category": "IQ",
  "version": "1.0",
  "api_calls": [
    {
      "step": 1,
      "name": "get_cluster_delta",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/clusters/get",
      "headers": {
        "Authorization": "Bearer ${token}"
      },
      "payload": {
        "cluster_id": "${cluster_id}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { return currentVariables; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const clusterStep = stepResults.get_cluster_delta; const requiredVersion = variables.iq_104_3_min_delta_version || '2.4.5'; const expected_result = `Delta Lake: v${requiredVersion}`; let actual_result = 'Delta Lake: Not found'; if (clusterStep.error) { return { status: 'fail', message: 'No response received from API', code: 'NO_RESPONSE', test_id: 'IQ-104-4', title: 'Delta Lake', expected_result, actual_result }; } const apiOutput = clusterStep.data; if (!apiOutput || !apiOutput.spark_version) { return { status: 'fail', message: 'Spark version not found in cluster response', code: 'MISSING_SPARK_VERSION', test_id: 'IQ-104-4', title: 'Delta Lake', expected_result, actual_result }; } const sparkVersion = apiOutput.spark_version; const deltaMatch = sparkVersion.match(/Delta (\\d+\\.\\d+\\.\\d+)/i); if (!deltaMatch) { actual_result = `Spark version: ${sparkVersion}`; return { status: 'pass', message: sparkVersion, code: 'DELTA_NOT_FOUND_BUT_PASS', test_id: 'IQ-104-4', title: 'Delta Lake', expected_result, actual_result }; } const deltaVersion = deltaMatch[1]; actual_result = `Delta Lake: v${deltaVersion}`; const reqParts = requiredVersion.split('.'); const actParts = deltaVersion.split('.'); if (reqParts.length !== 3 || actParts.length !== 3) { return { status: 'fail', message: 'Invalid version format', code: 'INVALID_VERSION_FORMAT', test_id: 'IQ-104-4', title: 'Delta Lake', expected_result, actual_result }; } const reqMajor = parseInt(reqParts[0], 10); const reqMinor = parseInt(reqParts[1], 10); const actMajor = parseInt(actParts[0], 10); const actMinor = parseInt(actParts[1], 10); if (isNaN(reqMajor) || isNaN(reqMinor) || isNaN(actMajor) || isNaN(actMinor)) { return { status: 'fail', message: 'Invalid version numbers', code: 'INVALID_VERSION_NUMBERS', test_id: 'IQ-104-4', title: 'Delta Lake', expected_result, actual_result }; } if (actMajor === reqMajor && (actMinor === reqMinor || actMinor === reqMinor - 1)) { return { status: 'pass', message: 'Delta Lake version meets requirement', code: 'VALID_DELTA_VERSION', test_id: 'IQ-104-4', title: 'Delta Lake', expected_result, actual_result }; } else { return { status: 'fail', message: `Delta Lake version ${deltaVersion} does not meet minimum requirement of ${requiredVersion}`, code: 'NO_DELTA_VERSION', test_id: 'IQ-104-4', title: 'Delta Lake', expected_result, actual_result }; } }",
  "manual_procedure": "databricks clusters get --cluster-id <id> | jq '.spark_version'"
}