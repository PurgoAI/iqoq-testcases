{
  "title": "Access Mode Validation",
  "test_description": "Validate that the Databricks cluster has the required access mode (USER_ISOLATION or SINGLE_USER) for Unity Catalog compatibility",
  "version": "1.0",
  "test_code": "OQ-101-2",
  "test_seq": 2,
  "test_suite": "OQ-101",
  "test_suite_title": "Cluster Availability",
  "category": "OQ",
  "manual_procedure": "Verify access mode via API",
  "api_calls": [
    {
      "step": 1,
      "name": "get_cluster_info",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/clusters/get",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "cluster_id": "${cluster_id}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const dataSecurityMode = responseData?.data_security_mode || 'NONE'; const clusterName = responseData?.cluster_name || 'Unknown'; return { ...currentVariables, data_security_mode: dataSecurityMode, cluster_name: clusterName }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const clusterStep = stepResults.get_cluster_info; const expected_result = 'Access Mode: USER_ISOLATION or SINGLE_USER'; let actual_result = 'Access Mode: Not found'; if (clusterStep.error) { return { status: 'fail', message: 'Failed to get cluster information', code: 'CLUSTER_INFO_ERROR', test_id: 'OQ-101-2', title: 'Access Mode Validation', expected_result, actual_result }; } const dataSecurityMode = clusterStep.data?.data_security_mode || 'NONE'; if (dataSecurityMode === 'NONE') { return { status: 'fail', message: 'Data security mode not found in cluster response', code: 'ACCESS_MODE_MISSING', test_id: 'OQ-101-2', title: 'Access Mode Validation', expected_result, actual_result }; } actual_result = `Access Mode: ${dataSecurityMode}`; const accessModeNames = { 'USER_ISOLATION': 'Standard (Unity Catalog compatible)', 'SINGLE_USER': 'Dedicated (Legacy)', 'LEGACY_TABLE_ACL': 'Legacy Table ACL (Not UC compatible)', 'LEGACY_PASSTHROUGH': 'Legacy Passthrough (Not UC compatible)', 'NONE': 'No Isolation (Not secure)' }; const accessModeName = accessModeNames[dataSecurityMode] || `Unknown (${dataSecurityMode})`; const allowedModes = variables.oq_101_2_allowed_modes || ['USER_ISOLATION', 'SINGLE_USER']; const isCompatible = allowedModes.includes(dataSecurityMode); if (isCompatible) { return { status: 'pass', message: `Access mode validation passed: ${accessModeName}`, code: 'ACCESS_MODE_VALIDATED', test_id: 'OQ-101-2', title: 'Access Mode Validation', expected_result, actual_result }; } else { return { status: 'fail', message: `Access mode ${dataSecurityMode} does not meet requirements. Allowed modes: ${allowedModes.join(', ')}`, code: 'ACCESS_MODE_INCOMPATIBLE', test_id: 'OQ-101-2', title: 'Access Mode Validation', expected_result, actual_result }; } }"
} 