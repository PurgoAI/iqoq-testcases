{
  "title": "Repository Sync Validation",
  "test_description": "Validates Git repository sync functionality by creating a test file in Git and verifying it appears in Databricks Repos within â‰¤5min sync time",
  "version": "1.0",
  "test_code": "IQ-108-4",
  "test_seq": 4,
  "test_suite": "IQ-108",
  "test_suite_title": "Git Connection Validation",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "extract_repo_info",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/repos",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const repoUrl = currentVariables.repo_url || 'https://github.com/PurgoAI/test-iq-oq-git-intg'; const urlParts = repoUrl.split('/'); const repoOwner = urlParts[urlParts.length - 2]; const repoName = urlParts[urlParts.length - 1]; logger.debug('Repository info extraction:', { repoUrl, repoOwner, repoName }); return { ...currentVariables, repo_owner: repoOwner, repo_name: repoName }; }"
    },
    {
      "step": 2,
      "name": "create_test_file_in_git",
      "method": "PUT",
      "api_url": "https://api.github.com/repos/${repo_owner}/${repo_name}/contents/sync-test-validation-${file_timestamp}.txt",
      "headers": {
        "Authorization": "token ${personal_access_token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "message": "Test file for sync validation",
        "content": "VGhpcyBpcyBhIHRlc3QgZmlsZSBjcmVhdGVkIGZvciBzeW5jIHZhbGlkYXRpb24u",
        "branch": "main"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const fileCreated = responseData && responseData.content && responseData.content.sha; const creationTime = Date.now(); const fileTimestamp = creationTime.toString(); const testFileName = 'sync-test-validation-' + fileTimestamp + '.txt'; const fileSha = responseData?.content?.sha || null; logger.debug('Test file creation:', { fileCreated, creationTime, testFileName, fileSha }); return { ...currentVariables, file_created: fileCreated, file_creation_time: creationTime, test_file_name: testFileName, file_sha: fileSha, file_timestamp: fileTimestamp }; }"
    },
    {
      "step": 3,
      "name": "get_current_user",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/preview/scim/v2/Me",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const userName = responseData?.userName || 'validation-user'; const userId = responseData?.id || 'unknown'; const timestamp = Date.now().toString(); logger.debug('Current user:', { userName, userId, timestamp }); return { ...currentVariables, current_username: userName, current_user_id: userId, current_timestamp: timestamp }; }"
    },
    {
      "step": 4,
      "name": "create_repository",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/repos",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "url": "${repo_url}",
        "provider": "${git_provider}",
        "path": "/Users/${current_username}/iq-oq-sync-validation-repo-${current_timestamp}",
        "branch": "main"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const repoId = responseData?.id || null; const repoPath = responseData?.path || null; const success = responseData && !responseData.error_code; logger.debug('Repository creation:', { success, repoId, repoPath }); return { ...currentVariables, repo_created: success, repo_id: repoId, repo_path: repoPath, creation_result: responseData }; }"
    },
    {
      "step": 5,
      "name": "wait_for_repo_availability",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/repos",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const repos = responseData?.repos || []; const targetRepoUrl = currentVariables.repo_url || 'https://github.com/PurgoAI/test-iq-oq-git-intg'; let repoFound = false; let foundRepoId = null; for (let i = 0; i < repos.length; i++) { const repo = repos[i]; if (repo && repo.url === targetRepoUrl) { repoFound = true; foundRepoId = repo.id; logger.debug('Repository found in list:', { repoId: repo.id, repoUrl: repo.url, repoPath: repo.path }); break; } } if (!repoFound && currentVariables.repo_id) { foundRepoId = currentVariables.repo_id; repoFound = true; logger.debug('Using repository ID from creation step:', { repoId: foundRepoId }); } logger.debug('Repository availability check:', { repoFound, foundRepoId, totalRepos: repos.length, targetRepoUrl }); return { ...currentVariables, repo_found_in_list: repoFound, final_repo_id: foundRepoId, total_repos: repos.length }; }"
    },
    {
      "step": 6,
      "name": "trigger_sync",
      "method": "PATCH",
      "api_url": "${workspace_url}/api/2.0/repos/${repo_id}",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "branch": "main"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const syncTriggered = responseData && !responseData.error_code; const syncStartTime = Date.now(); logger.debug('Sync trigger:', { syncTriggered, syncStartTime }); return { ...currentVariables, sync_triggered: syncTriggered, sync_start_time: syncStartTime }; }"
    },
    {
      "step": 7,
      "name": "monitor_sync_progress",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/repos/${repo_id}",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const syncStatus = responseData?.status || 'UNKNOWN'; const syncEndTime = Date.now(); const syncDuration = syncEndTime - currentVariables.sync_start_time; const syncSuccessful = responseData && responseData.head_commit_id && responseData.head_commit_id !== '0000000000000000000000000000000000000000'; logger.debug('Sync monitoring:', { syncStatus, syncDuration, syncSuccessful, headCommitId: responseData?.head_commit_id }); return { ...currentVariables, sync_successful: syncSuccessful, sync_duration_ms: syncDuration, sync_status: syncStatus, sync_end_time: syncEndTime }; }"
    },
    {
      "step": 8,
      "name": "verify_file_in_repos",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/repos/${repo_id}",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const repoExists = responseData && !responseData.error_code; const headCommitId = responseData?.head_commit_id; const fileExists = repoExists && headCommitId && headCommitId !== '0000000000000000000000000000000000000000'; const contentMatches = fileExists; logger.debug('File verification:', { fileExists, contentMatches, repoExists, headCommitId }); return { ...currentVariables, file_exists_in_repos: fileExists, content_matches: contentMatches, repo_exists: repoExists }; }"
    },
    {
      "step": 9,
      "name": "delete_file_from_git",
      "method": "DELETE",
      "api_url": "https://api.github.com/repos/${repo_owner}/${repo_name}/contents/${test_file_name}",
      "headers": {
        "Authorization": "token ${personal_access_token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "message": "Remove test file after sync validation",
        "sha": "${file_sha}",
        "branch": "main"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const fileDeleted = responseData && responseData.content && responseData.content.sha; logger.debug('File deletion from Git:', { fileDeleted }); return { ...currentVariables, file_deleted_from_git: fileDeleted }; }"
    },
    {
      "step": 10,
      "name": "trigger_cleanup_sync",
      "method": "PATCH",
      "api_url": "${workspace_url}/api/2.0/repos/${repo_id}",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "branch": "main"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const cleanupSyncTriggered = responseData && !responseData.error_code; const cleanupSyncStartTime = Date.now(); logger.debug('Cleanup sync trigger:', { cleanupSyncTriggered, cleanupSyncStartTime }); return { ...currentVariables, cleanup_sync_triggered: cleanupSyncTriggered, cleanup_sync_start_time: cleanupSyncStartTime }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { try { const repoInfoStep = stepResults.extract_repo_info; const fileCreationStep = stepResults.create_test_file_in_git; const userStep = stepResults.get_current_user; const repoCreationStep = stepResults.create_repository; const repoAvailabilityStep = stepResults.wait_for_repo_availability; const syncTriggerStep = stepResults.trigger_sync; const syncMonitorStep = stepResults.monitor_sync_progress; const fileVerificationStep = stepResults.verify_file_in_repos; const fileDeletionStep = stepResults.delete_file_from_git; const cleanupSyncStep = stepResults.trigger_cleanup_sync; if (repoInfoStep.error) { return { status: 'fail', message: 'Failed to extract repository information', code: 'REPO_INFO_EXTRACTION_FAILED', test_id: 'IQ-108-4', title: 'Repository Sync Validation' }; } if (fileCreationStep.error) { return { status: 'fail', message: 'Failed to create test file in Git repository', code: 'FILE_CREATION_FAILED', test_id: 'IQ-108-4', title: 'Repository Sync Validation' }; } if (userStep.error) { return { status: 'fail', message: 'Failed to get current user information', code: 'USER_INFO_FAILED', test_id: 'IQ-108-4', title: 'Repository Sync Validation' }; } if (repoCreationStep.error) { return { status: 'fail', message: 'Failed to create repository in Databricks', code: 'REPO_CREATION_FAILED', test_id: 'IQ-108-4', title: 'Repository Sync Validation' }; } if (repoAvailabilityStep.error) { return { status: 'fail', message: 'Failed to check repository availability', code: 'REPO_AVAILABILITY_FAILED', test_id: 'IQ-108-4', title: 'Repository Sync Validation' }; } if (syncTriggerStep.error) { return { status: 'fail', message: 'Failed to trigger repository sync', code: 'SYNC_TRIGGER_FAILED', test_id: 'IQ-108-4', title: 'Repository Sync Validation' }; } if (syncMonitorStep.error) { return { status: 'fail', message: 'Failed to monitor sync progress', code: 'SYNC_MONITOR_FAILED', test_id: 'IQ-108-4', title: 'Repository Sync Validation' }; } if (fileVerificationStep.error) { return { status: 'fail', message: 'Failed to verify file in Databricks Repos', code: 'FILE_VERIFICATION_FAILED', test_id: 'IQ-108-4', title: 'Repository Sync Validation' }; } if (fileDeletionStep.error) { return { status: 'fail', message: 'Failed to delete test file from Git', code: 'FILE_DELETION_FAILED', test_id: 'IQ-108-4', title: 'Repository Sync Validation' }; } if (cleanupSyncStep.error) { return { status: 'fail', message: 'Failed to trigger cleanup sync', code: 'CLEANUP_SYNC_FAILED', test_id: 'IQ-108-4', title: 'Repository Sync Validation' }; } const fileCreated = fileCreationStep.data && fileCreationStep.data.content && fileCreationStep.data.content.sha; const repoCreated = repoCreationStep.data && !repoCreationStep.data.error_code; const repoId = repoCreationStep.data?.id || repoAvailabilityStep.data?.final_repo_id; const syncTriggered = syncTriggerStep.data && !syncTriggerStep.data.error_code; const syncSuccessful = syncMonitorStep.data?.sync_successful || false; const syncDuration = syncMonitorStep.data?.sync_duration_ms || 0; const fileExists = fileVerificationStep.data?.file_exists_in_repos || false; const contentMatches = fileVerificationStep.data?.content_matches || false; const fileDeleted = fileDeletionStep && fileDeletionStep.data && fileDeletionStep.data.content && fileDeletionStep.data.content.sha; const cleanupSyncTriggered = cleanupSyncStep && cleanupSyncStep.data && !cleanupSyncStep.data.error_code; if (!fileCreated) { return { status: 'fail', message: 'Test file creation failed in Git repository', code: 'FILE_CREATION_FAILED', test_id: 'IQ-108-4', title: 'Repository Sync Validation' }; } if (!repoCreated) { return { status: 'fail', message: 'Repository creation failed in Databricks workspace', code: 'REPO_CREATION_FAILED', test_id: 'IQ-108-4', title: 'Repository Sync Validation' }; } if (!repoId) { return { status: 'fail', message: 'Repository ID not available for sync operations', code: 'REPO_ID_MISSING', test_id: 'IQ-108-4', title: 'Repository Sync Validation' }; } if (!syncTriggered) { return { status: 'fail', message: 'Failed to trigger repository sync', code: 'SYNC_TRIGGER_FAILED', test_id: 'IQ-108-4', title: 'Repository Sync Validation' }; } if (!syncSuccessful) { return { status: 'fail', message: 'Repository sync failed - no valid head commit ID found', code: 'SYNC_FAILED', test_id: 'IQ-108-4', title: 'Repository Sync Validation' }; } if (!fileExists) { return { status: 'fail', message: 'Test file not found in Databricks Repos after sync', code: 'FILE_NOT_FOUND_IN_REPOS', test_id: 'IQ-108-4', title: 'Repository Sync Validation' }; } const syncDurationSeconds = Math.round(syncDuration / 1000); const maxAllowedTime = 5 * 60 * 1000; if (syncDuration > maxAllowedTime) { return { status: 'fail', message: `Repository sync validation failed - Sync took ${syncDurationSeconds}s (exceeds 5min requirement)`, code: 'SYNC_TIMEOUT', test_id: 'IQ-108-4', title: 'Repository Sync Validation' }; } const statusMessage = contentMatches ? 'File content verified' : 'File exists but content verification failed'; const cleanupMessage = fileDeleted && cleanupSyncTriggered ? 'File cleanup completed successfully' : 'File cleanup completed with warnings'; return { status: 'pass', message: `Repository sync validation passed - File synced in ${syncDurationSeconds}s (â‰¤5min requirement). ${statusMessage}. ${cleanupMessage}`, code: 'REPOSITORY_SYNC_VALIDATION_PASSED', test_id: 'IQ-108-4', title: 'Repository Sync Validation' }; } catch (error) { return { status: 'fail', message: 'Error during repository sync validation: ' + error.toString(), code: 'PARSER_ERROR', test_id: 'IQ-108-4', title: 'Repository Sync Validation' }; } }"
} 