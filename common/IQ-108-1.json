{
  "title": "Repository Sync",
  "test_description": "Validate repository sync by deleting one file and verifying it is restored from the remote within 60 seconds.",
  "version": "2.0",
  "test_code": "IQ-108-1",
  "test_seq": 1,
  "test_suite": "IQ-108",
  "test_suite_title": "Git Connection Validation",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "get_current_user",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/preview/scim/v2/Me",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const userName = responseData?.userName || 'validation-user'; const timestamp = Date.now().toString(); logger.debug('Current user:', { userName, timestamp }); return { ...currentVariables, current_username: userName, current_timestamp: timestamp }; }"
    },
    {
      "step": 2,
      "name": "check_existing_credentials",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/git-credentials",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const credentials = responseData?.credentials || []; let existingCredentialId = null; let hasCredentials = credentials.length > 0; if (hasCredentials) { for (let i = 0; i < credentials.length; i++) { const cred = credentials[i]; if (cred && cred.git_provider && cred.git_username && cred.git_provider.toLowerCase() === currentVariables.git_provider.toLowerCase() && cred.git_username === currentVariables.git_username) { existingCredentialId = cred.credential_id; break; } } if (!existingCredentialId && credentials.length > 0) { existingCredentialId = credentials[0].credential_id; } } logger.debug('Existing credentials check:', { hasCredentials, existingCredentialId, credentialsCount: credentials.length }); return { ...currentVariables, has_credentials: hasCredentials, existing_credential_id: existingCredentialId, credentials_count: credentials.length }; }"
    },
    {
      "step": 3,
      "name": "create_or_update_credentials",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/git-credentials",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "personal_access_token": "${pat}",
        "git_username": "${git_username}",
        "git_provider": "${git_provider}"
      },
      "post_processing": "function processStep(responseData, currentVariables, response) { const credentialId = responseData?.credential_id || currentVariables.existing_credential_id; const statusCode = response && response.status ? response.status : 200; const isUpdate = currentVariables.has_credentials && currentVariables.existing_credential_id; const isCreated = statusCode === 200 && credentialId; const alreadyExists = statusCode === 400 && (responseData?.message || '').toLowerCase().includes('already exists'); logger.debug('Credentials operation result:', { credentialId, statusCode, isUpdate, isCreated, alreadyExists }); return { ...currentVariables, credential_id: credentialId, credentials_created: isCreated, credentials_updated: isUpdate, credentials_already_exist: alreadyExists }; }"
    },
    {
      "step": 4,
      "name": "create_or_find_repo",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/repos",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "url": "${repo_url}",
        "provider": "${git_provider}",
        "path": "/Users/${current_username}/iq-oq-sync-test-${current_timestamp}",
        "branch": "main"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const repoId = responseData?.id || null; const repoPath = responseData?.path || null; logger.debug('Repo created for sync test:', { repoId, repoPath }); return { ...currentVariables, repo_id: repoId, repo_path: repoPath }; }"
    },
    {
      "step": 5,
      "name": "list_initial_content",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/workspace/list",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "path": "${repo_path}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const objects = responseData?.objects || []; const initialObjectCount = objects.length; if (initialObjectCount === 0) { throw new Error('Repository is empty, cannot test sync'); } const firstFile = objects.find(obj => obj.object_type === 'FILE'); if (!firstFile) { throw new Error('No files found in repository, cannot test sync'); } logger.debug('Initial repo content:', { initialObjectCount, firstFile: firstFile.path }); return { ...currentVariables, initial_object_count: initialObjectCount, first_file_path: firstFile.path }; }"
    },
    {
      "step": 6,
      "name": "delete_single_file",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/workspace/delete",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "path": "${first_file_path}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { logger.debug('Deleted single file:', currentVariables.first_file_path); return { ...currentVariables, file_deleted: true }; }"
    },
    {
      "step": 7,
      "name": "trigger_repo_sync",
      "method": "PATCH",
      "api_url": "${workspace_url}/api/2.0/repos/${repo_id}",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "branch": "main"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const syncStartTime = Date.now(); logger.debug('Sync triggered at:', syncStartTime); return { ...currentVariables, sync_start_time: syncStartTime }; }"
    },
    {
      "step": 8,
      "name": "poll_for_file_restoration",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/workspace/list",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "path": "${repo_path}"
      },
      "post_processing": "async function processStep(responseData, currentVariables) { const initialCount = currentVariables.initial_object_count || 1; const currentCount = responseData?.objects?.length || 0; const filesRestored = currentCount >= initialCount; const elapsedTime = Date.now() - (currentVariables.sync_start_time || Date.now()); const maxWaitTime = 60000; const isTimeout = elapsedTime > maxWaitTime; logger.debug('Polling for file restoration:', { filesRestored, currentCount, initialCount, elapsedTime, isTimeout }); if (!filesRestored && !isTimeout) { await delay(5000); } return { ...currentVariables, files_restored: filesRestored, sync_timeout: isTimeout, elapsed_time_ms: elapsedTime }; }"
    },
    {
      "step": 9,
      "name": "cleanup_delete_repo",
      "method": "DELETE",
      "api_url": "${workspace_url}/api/2.0/repos/${repo_id}",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { return currentVariables; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const pollStep = stepResults.poll_for_file_restoration; const expected_result = 'Files restored by sync in <= 60 seconds.'; let actual_result = 'Repository sync not tested'; if (pollStep.error) { return { status: 'fail', message: `Polling failed: ${pollStep.error.message}`, code: 'POLL_FAILED', test_id: 'IQ-108-1', title: 'Repository Sync', expected_result, actual_result }; } const filesRestored = variables.files_restored; const syncTimeout = variables.sync_timeout; const elapsedSeconds = (variables.elapsed_time_ms / 1000).toFixed(2); if (filesRestored) { actual_result = `Files restored in ${elapsedSeconds} seconds.`; return { status: 'pass', message: `Repository content was successfully restored in ${elapsedSeconds} seconds.`, code: 'SYNC_RESTORED', test_id: 'IQ-108-1', title: 'Repository Sync', expected_result, actual_result }; } else if (syncTimeout) { actual_result = 'Sync timed out (> 60 seconds).'; return { status: 'fail', message: `Sync timed out after 60 seconds. Files were not restored.`, code: 'SYNC_TIMEOUT', test_id: 'IQ-108-1', title: 'Repository Sync', expected_result, actual_result }; } else { actual_result = 'Files not restored.'; return { status: 'fail', message: 'Test finished, but files were not restored by sync.', code: 'SYNC_FAILED', test_id: 'IQ-108-1', title: 'Repository Sync', expected_result, actual_result }; } }",
  "manual_procedure": "Create Git credentials, create repository, delete one file and verify it is restored from remote within 60 seconds."
} 