{
  "title": "Git Credential Creation and Repository Access",
  "test_description": "Validate Git credential creation and repository access by testing credential creation, repository access, and repository sync functionality.",
  "version": "2.3",
  "test_code": "IQ-108-1",
  "test_seq": 1,
  "test_suite": "IQ-108",
  "test_suite_title": "Git Connection Validation",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "get_current_user",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/preview/scim/v2/Me",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const userName = responseData.userName || 'validation-user'; const currentTimestamp = Date.now().toString(); return { ...currentVariables, user_name: userName, current_timestamp: currentTimestamp }; }"
    },
    {
      "step": 2,
      "name": "check_existing_credentials",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/git-credentials",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const credentials = responseData.credentials || []; let existingCredentialId = null; let hasCredentials = credentials.length > 0; if (hasCredentials) { for (let i = 0; i < credentials.length; i++) { const cred = credentials[i]; if (cred && cred.git_provider && cred.git_username && cred.git_provider.toLowerCase() === currentVariables.git_provider.toLowerCase() && cred.git_username === currentVariables.git_username) { existingCredentialId = cred.credential_id; break; } } if (!existingCredentialId && credentials.length > 0) { existingCredentialId = credentials[0].credential_id; } } return { ...currentVariables, has_credentials: hasCredentials, existing_credential_id: existingCredentialId, credentials_count: credentials.length }; }"
    },
    {
      "step": 3,
      "name": "create_or_update_credentials",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/git-credentials",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "git_provider": "${git_provider}",
        "git_username": "${git_username}",
        "personal_access_token": "${personal_access_token}"
      },
      "post_processing": "function processStep(responseData, currentVariables, response) { const credentialId = responseData?.credential_id || currentVariables.existing_credential_id; const statusCode = response && response.status ? response.status : 200; const isUpdate = currentVariables.has_credentials && currentVariables.existing_credential_id; const isCreated = statusCode === 200 && credentialId; const alreadyExists = statusCode === 400 && (responseData?.message || '').toLowerCase().includes('already exists'); const success = isCreated || isUpdate || alreadyExists; return { ...currentVariables, credential_id: credentialId, credentials_created: success, credentials_updated: isUpdate, credentials_already_exist: alreadyExists, credential_operation_success: success }; }"
    },
    {
      "step": 4,
      "name": "list_repositories",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/repos",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const repos = responseData.repos || []; const repoFound = repos.some(repo => repo.url === currentVariables.repo_url); const repoId = repoFound ? repos.find(repo => repo.url === currentVariables.repo_url).id : null; const repoPath = repoFound ? repos.find(repo => repo.url === currentVariables.repo_url).path : null; return { ...currentVariables, repo_found: repoFound, repo_id: repoId, repo_path: repoPath, repos_count: repos.length }; }"
    },
    {
      "step": 5,
      "name": "create_repository_if_not_exists",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/repos",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "url": "${repo_url}",
        "provider": "${git_provider}",
        "path": "/Users/${user_name}/iq-oq-validation-repo-${current_timestamp}",
        "branch": "main",
        "sparse_checkout": {
          "patterns": [
            "src",
            "test"
          ]
        }
      },
      "post_processing": "function processStep(responseData, currentVariables, response) { const statusCode = response && response.status ? response.status : 200; const repoId = responseData?.id || currentVariables.repo_id; const repoPath = responseData?.path || currentVariables.repo_path; const isCreated = statusCode === 200 && repoId; const alreadyExists = statusCode === 400 && (responseData?.message || '').toLowerCase().includes('already exists'); const success = isCreated || alreadyExists || currentVariables.repo_found; return { ...currentVariables, repo_id: repoId, repo_path: repoPath, repo_created: isCreated, repo_already_exists: alreadyExists, repo_operation_success: success }; }"
    },
    {
      "step": 6,
      "name": "validate_repository_access",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/repos",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const repos = responseData.repos || []; const repoFound = repos.some(repo => repo.url === currentVariables.repo_url); const accessValidated = repoFound || currentVariables.repo_operation_success; return { ...currentVariables, repository_access_validated: accessValidated, final_repo_found: repoFound }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const userStep = stepResults.get_current_user; const credentialsStep = stepResults.check_existing_credentials; const createCredentialsStep = stepResults.create_or_update_credentials; const listReposStep = stepResults.list_repositories; const createRepoStep = stepResults.create_repository_if_not_exists; const validateAccessStep = stepResults.validate_repository_access; const expected_result = 'Git credentials created and repository access validated successfully'; let actual_result = 'Git connection validation not completed'; if (!userStep || !userStep.data || !userStep.data.userName) { actual_result = 'Failed to get user information.'; return { status: 'fail', message: actual_result, code: 'GET_USER_FAILED', test_id: 'IQ-108-1', title: 'Git Credential Creation and Repository Access', expected_result, actual_result }; } if (!createCredentialsStep || !createCredentialsStep.data || !variables.credential_operation_success) { actual_result = 'Failed to create or verify Git credentials.'; return { status: 'fail', message: actual_result, code: 'CREDENTIALS_FAILED', test_id: 'IQ-108-1', title: 'Git Credential Creation and Repository Access', expected_result, actual_result }; } if (!validateAccessStep || !validateAccessStep.data || !variables.repository_access_validated) { actual_result = 'Failed to validate repository access.'; return { status: 'fail', message: actual_result, code: 'REPO_ACCESS_FAILED', test_id: 'IQ-108-1', title: 'Git Credential Creation and Repository Access', expected_result, actual_result }; } actual_result = 'Git credentials created successfully and repository access validated'; return { status: 'pass', message: 'Git credential creation and repository access validation passed', code: 'GIT_CREDS_AND_ACCESS_PASSED', test_id: 'IQ-108-1', title: 'Git Credential Creation and Repository Access', expected_result, actual_result }; }",
  "manual_procedure": "Get user info, check existing Git credentials, create or update Git credentials, list repositories, create repository if not exists, and validate repository access."
} 