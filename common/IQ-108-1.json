{
  "title": "Repository Sync",
  "test_description": "Repository Sync: Test that repository content syncs properly after local changes are made.",
  "version": "2.1",
  "test_code": "IQ-108-1",
  "test_seq": 1,
  "test_suite": "IQ-108",
  "test_suite_title": "Git Connection Validation",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "get_current_user",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/preview/scim/v2/Me",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const userName = responseData.userName || 'test-user'; return { ...currentVariables, user_name: userName }; }"
    },
    {
      "step": 2,
      "name": "check_existing_credentials",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/git-credentials",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const credentials = responseData.credentials || []; const hasCredentials = credentials.length > 0; const credentialId = hasCredentials ? credentials[0].credential_id : null; return { ...currentVariables, has_credentials: hasCredentials, credential_id: credentialId }; }"
    },
    {
      "step": 3,
      "name": "create_or_update_credentials",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/git-credentials",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "personal_access_token": "${git_token}",
        "git_username": "${user_name}",
        "git_provider": "github"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const success = responseData?.credential_id ? true : false; const newCredentialId = responseData?.credential_id || currentVariables.credential_id; return { ...currentVariables, credential_created: success, credential_id: newCredentialId }; }"
    },
    {
      "step": 4,
      "name": "create_or_find_repo",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/repos",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "url": "${git_repo_url}",
        "provider": "github",
        "path": "/Users/${user_name}/iq-oq-sync-test-${current_timestamp}",
        "branch": "main"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const repoId = responseData?.id || null; const repoPath = responseData?.path || null; return { ...currentVariables, repo_id: repoId, repo_path: repoPath }; }"
    },
    {
      "step": 5,
      "name": "list_initial_content",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/workspace/list",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "path": "${repo_path}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const objects = responseData.objects || []; const fileCount = objects.length; return { ...currentVariables, initial_file_count: fileCount, initial_files: objects }; }"
    },
    {
      "step": 6,
      "name": "delete_single_file",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/workspace/delete",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "path": "${repo_path}/sync-test-validation.txt"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const success = responseData !== undefined; return { ...currentVariables, file_deleted: success }; }"
    },
    {
      "step": 7,
      "name": "trigger_repo_sync",
      "method": "PATCH",
      "api_url": "${workspace_url}/api/2.0/repos/${repo_id}",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "branch": "main"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const success = responseData?.id ? true : false; return { ...currentVariables, sync_triggered: success }; }"
    },
    {
      "step": 8,
      "name": "poll_for_file_restoration",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/workspace/list",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "path": "${repo_path}"
      },
      "post_processing": "async function processStep(responseData, currentVariables) { const objects = responseData.objects || []; const fileNames = objects.map(obj => obj.path.split('/').pop()); const hasSyncFile = fileNames.includes('sync-test-validation.txt'); const currentFileCount = objects.length; if (!hasSyncFile) { await delay(10000); } return { ...currentVariables, current_file_count: currentFileCount, has_sync_file: hasSyncFile, current_files: objects }; }"
    },
    {
      "step": 9,
      "name": "cleanup_delete_repo",
      "method": "DELETE",
      "api_url": "${workspace_url}/api/2.0/repos/${repo_id}",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const success = responseData !== undefined; return { ...currentVariables, cleanup_success: success }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const userStep = stepResults.get_current_user; const credentialsStep = stepResults.check_existing_credentials; const createCredentialsStep = stepResults.create_or_update_credentials; const repoStep = stepResults.create_or_find_repo; const listStep = stepResults.list_initial_content; const deleteStep = stepResults.delete_single_file; const syncStep = stepResults.trigger_repo_sync; const pollStep = stepResults.poll_for_file_restoration; const cleanupStep = stepResults.cleanup_delete_repo; const expected_result = 'Result: File restored after sync'; let actual_result = 'Repository sync test not completed'; if (!userStep || !userStep.data || !userStep.data.userName) { actual_result = 'Failed to get user information.'; return { status: 'fail', message: actual_result, code: 'GET_USER_FAILED', test_id: 'IQ-108-1', title: 'Repository Sync', expected_result, actual_result }; } if (!repoStep || !repoStep.data || !variables.repo_id) { actual_result = 'Failed to create or find repository.'; return { status: 'fail', message: actual_result, code: 'REPO_CREATION_FAILED', test_id: 'IQ-108-1', title: 'Repository Sync', expected_result, actual_result }; } if (!listStep || !listStep.data || variables.initial_file_count === 0) { actual_result = 'No files found in repository initially.'; return { status: 'fail', message: actual_result, code: 'NO_INITIAL_FILES', test_id: 'IQ-108-1', title: 'Repository Sync', expected_result, actual_result }; } if (!deleteStep || !deleteStep.data || !variables.file_deleted) { actual_result = 'Failed to delete test file.'; return { status: 'fail', message: actual_result, code: 'FILE_DELETE_FAILED', test_id: 'IQ-108-1', title: 'Repository Sync', expected_result, actual_result }; } if (!syncStep || !syncStep.data || !variables.sync_triggered) { actual_result = 'Failed to trigger repository sync.'; return { status: 'fail', message: actual_result, code: 'SYNC_TRIGGER_FAILED', test_id: 'IQ-108-1', title: 'Repository Sync', expected_result, actual_result }; } if (!pollStep || !pollStep.data) { actual_result = 'Failed to poll for file restoration.'; return { status: 'fail', message: actual_result, code: 'POLL_FAILED', test_id: 'IQ-108-1', title: 'Repository Sync', expected_result, actual_result }; } if (variables.has_sync_file) { actual_result = 'File sync-test-validation.txt restored successfully after sync.'; return { status: 'pass', message: 'Repository sync validation passed: File restored after sync', code: 'REPO_SYNC_PASSED', test_id: 'IQ-108-1', title: 'Repository Sync', expected_result, actual_result }; } else { actual_result = 'File sync-test-validation.txt not restored after sync.'; return { status: 'fail', message: 'Repository sync validation failed: File not restored after sync', code: 'REPO_SYNC_FAILED', test_id: 'IQ-108-1', title: 'Repository Sync', expected_result, actual_result }; } }",
  "manual_procedure": "Get user info, check/create Git credentials, create/find repository, list initial content, delete a test file, trigger repository sync, poll for file restoration, and cleanup."
} 