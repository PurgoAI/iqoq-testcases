{
  "title": "Repository Sync",
  "test_description": "Validate repository sync by deleting local content and verifying it is restored from the remote within 5 minutes.",
  "version": "1.2",
  "test_code": "IQ-108-1",
  "test_seq": 1,
  "test_suite": "IQ-108",
  "test_suite_title": "Git Connection Validation",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "get_current_user",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/preview/scim/v2/Me",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const userName = responseData?.userName || 'validation-user'; const timestamp = Date.now().toString(); logger.debug('Current user:', { userName, timestamp }); return { ...currentVariables, current_username: userName, current_timestamp: timestamp }; }"
    },
    {
      "step": 2,
      "name": "create_or_find_repo",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/repos",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "url": "${repo_url}",
        "provider": "${git_provider}",
        "path": "/Users/${current_username}/iq-oq-sync-test-${current_timestamp}",
        "branch": "main"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const repoId = responseData?.id || null; const repoPath = responseData?.path || null; logger.debug('Repo created for sync test:', { repoId, repoPath }); return { ...currentVariables, repo_id: repoId, repo_path: repoPath }; }"
    },
    {
      "step": 3,
      "name": "list_initial_content",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/workspace/list",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "path": "${repo_path}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const initialObjectCount = responseData?.objects?.length || 0; if (initialObjectCount === 0) { throw new Error('Cannot test sync on an empty repository.'); } logger.debug('Initial repo content count:', { initialObjectCount }); return { ...currentVariables, initial_object_count: initialObjectCount }; }"
    },
    {
      "step": 4,
      "name": "delete_local_content",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/workspace/delete",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "path": "${repo_path}",
        "recursive": true
      },
      "post_processing": "function processStep(responseData, currentVariables) { logger.debug('Deleted local repo content to prepare for sync test.'); return { ...currentVariables, local_content_deleted: true }; }"
    },
    {
      "step": 5,
      "name": "trigger_repo_sync",
      "method": "PATCH",
      "api_url": "${workspace_url}/api/2.0/repos/${repo_id}",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "branch": "main"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const syncStartTime = Date.now(); logger.debug('Sync triggered at:', syncStartTime); return { ...currentVariables, sync_start_time: syncStartTime }; }"
    },
    {
      "step": 6,
      "name": "poll_for_restoration",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/workspace/list",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "path": "${repo_path}"
      },
      "post_processing": "async function processStep(responseData, currentVariables) { const initialCount = currentVariables.initial_object_count || 1; const currentCount = responseData?.objects?.length || 0; const filesRestored = currentCount >= initialCount; const elapsedTime = Date.now() - (currentVariables.sync_start_time || Date.now()); const isTimeout = elapsedTime > 300000; logger.debug('Polling for file restoration:', { filesRestored, currentCount, initialCount, elapsedTime, isTimeout }); if (!filesRestored && !isTimeout) { await delay(30000); } return { ...currentVariables, files_restored: filesRestored, sync_timeout: isTimeout, elapsed_time_ms: elapsedTime }; }"
    },
    {
      "step": 7,
      "name": "cleanup_delete_repo",
      "method": "DELETE",
      "api_url": "${workspace_url}/api/2.0/repos/${repo_id}",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { return currentVariables; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const pollStep = stepResults.poll_for_restoration; const expected_result = 'Files restored by sync in <= 5 min.'; let actual_result = 'Repository sync not tested'; if (pollStep.error) { return { status: 'fail', message: `Polling failed: ${pollStep.error.message}`, code: 'POLL_FAILED', test_id: 'IQ-108-1', title: 'Repository Sync', expected_result, actual_result }; } const filesRestored = variables.files_restored; const syncTimeout = variables.sync_timeout; const elapsedMinutes = (variables.elapsed_time_ms / 60000).toFixed(2); if (filesRestored) { actual_result = `Files restored in ${elapsedMinutes} min.`; return { status: 'pass', message: `Repository content was successfully restored in ${elapsedMinutes} minutes.`, code: 'SYNC_RESTORED', test_id: 'IQ-108-1', title: 'Repository Sync', expected_result, actual_result }; } else if (syncTimeout) { actual_result = 'Sync timed out (> 5 min).'; return { status: 'fail', message: `Sync timed out after 5 minutes. Files were not restored.`, code: 'SYNC_TIMEOUT', test_id: 'IQ-108-1', title: 'Repository Sync', expected_result, actual_result }; } else { actual_result = 'Files not restored.'; return { status: 'fail', message: 'Test finished, but files were not restored by sync.', code: 'SYNC_FAILED', test_id: 'IQ-108-1', title: 'Repository Sync', expected_result, actual_result }; } }",
  "manual_procedure": "Delete local repository content and verify it is restored from remote within 5 minutes."
} 