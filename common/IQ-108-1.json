{
  "title": "Git Credential Creation",
  "test_description": "Create Git credentials and validate successful creation",
  "version": "1.0",
  "test_code": "IQ-108-1",
  "test_seq": 1,
  "test_suite": "IQ-108",
  "test_suite_title": "Git Connection Validation",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "check_existing_credentials",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/git-credentials",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const existingCredentials = responseData?.credentials || []; let credentialExists = false; let existingCredentialId = null; const gitProvider = currentVariables.git_provider || 'gitHub'; const gitUsername = currentVariables.git_username; for (let i = 0; i < existingCredentials.length; i++) { const cred = existingCredentials[i]; if (cred && cred.git_provider && cred.git_provider.toLowerCase() === gitProvider.toLowerCase() && cred.git_username === gitUsername) { credentialExists = true; existingCredentialId = cred.credential_id; break; } } if (!existingCredentialId && existingCredentials.length > 0) { existingCredentialId = existingCredentials[0].credential_id; } logger.debug('Credential check:', { credentialExists, existingCredentialId, credentialsCount: existingCredentials.length }); return { ...currentVariables, credential_exists: credentialExists, existing_credential_id: existingCredentialId, credentials_count: existingCredentials.length }; }"
    },
    {
      "step": 2,
      "name": "create_git_credentials",
      "condition": "!credential_exists",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/git-credentials",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "git_provider": "${git_provider}",
        "git_username": "${git_username}",
        "personal_access_token": "${personal_access_token}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const credentialId = responseData?.credential_id || null; const success = responseData && !responseData.error_code; logger.debug('Credential creation:', { success, credentialId }); return { ...currentVariables, credential_created: success, new_credential_id: credentialId, creation_result: responseData }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { var credStep = stepResults.check_existing_credentials; var expected_result = 'File Sync Time: <=5 min.'; var actual_result = 'No Git credential found'; if (!credStep || credStep.error) { return { status: 'fail', message: 'Failed to get Git credentials', code: 'GIT_CREDENTIALS_FAILED', test_id: 'IQ-108-1', title: 'Repository Sync', expected_result: expected_result, actual_result: actual_result }; } var credentials = (credStep.data && credStep.data.credentials) ? credStep.data.credentials : []; if (credentials.length > 0) { var provider = credentials[0].git_provider || ''; var user = credentials[0].user_name || credentials[0].git_username || ''; actual_result = 'Git credential found for ' + provider + '/' + user; return { status: 'pass', message: 'Git credential found and listed', code: 'GIT_CREDENTIAL_FOUND', test_id: 'IQ-108-1', title: 'Repository Sync', expected_result: expected_result, actual_result: actual_result }; } else { return { status: 'fail', message: 'No Git credential found', code: 'NO_GIT_CREDENTIAL', test_id: 'IQ-108-1', title: 'Repository Sync', expected_result: expected_result, actual_result: actual_result }; } }",
  "manual_procedure": "Create a test file in the linked Git repository.\nRun the repository synchronization job in Databricks."
} 