{
  "title": "Authorization Access (Role) - Positive",
  "test_description": "Authorization Access (Role) - Positive: Grant SELECT permission to account-level group TEMP_{catalog_name}_OQ105 and verify user2 can access table.",
  "version": "2.4",
  "test_code": "OQ-105-5",
  "test_seq": 5,
  "test_suite": "OQ-105",
  "test_suite_title": "Data Governance",
  "category": "OQ",
  "api_calls": [
    {
      "step": 1,
      "name": "grant_select_permission",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "GRANT SELECT ON TABLE ${catalog_name}.silver.sdtm_dm TO TEMP_${catalog_name}_OQ105",
        "warehouse_id": "${warehouse_id}"
      },
      "post_processing": "async function processStep(responseData, currentVariables) { const success = responseData?.status?.state === 'SUCCEEDED'; const error = responseData?.status?.error?.message || ''; const principalNotFound = error.toLowerCase().includes('principal') && error.toLowerCase().includes('not found'); if (!success) { return { ...currentVariables, grant_success: success, grant_error: error, principal_not_found: principalNotFound }; } console.log('Starting permission propagation polling for OQ-105-5...'); const startTime = Date.now(); const maxWaitTime = 180000; // 3 minutes const pollInterval = 10000; // 10 seconds let pollAttempts = 0; const maxAttempts = 18; // 3 minutes / 10 seconds while (pollAttempts < maxAttempts) { pollAttempts++; const elapsedTime = Date.now() - startTime; console.log('Permission polling attempt ' + pollAttempts + ' of ' + maxAttempts + ' (elapsed: ' + (elapsedTime/1000).toFixed(1) + 's)'); if (elapsedTime >= maxWaitTime) { console.log('Permission propagation timeout after 3 minutes'); return { ...currentVariables, grant_success: success, grant_error: error, principal_not_found: principalNotFound, permission_propagated: false, polling_timeout: true, poll_attempts: pollAttempts, polling_elapsed_time: elapsedTime }; } try { const response = await axios.post(`${currentVariables.workspace_url}/api/2.0/sql/statements`, { statement: 'SELECT * FROM ' + currentVariables.catalog_name + '.silver.sdtm_dm LIMIT 1', warehouse_id: currentVariables.warehouse_id }, { headers: { 'Authorization': 'Bearer ' + currentVariables.token2, 'Content-Type': 'application/json' } }); const pollSuccess = response.data?.status?.state === 'SUCCEEDED'; if (pollSuccess) { console.log('Permission propagation successful after ' + (elapsedTime/1000).toFixed(1) + ' seconds'); return { ...currentVariables, grant_success: success, grant_error: error, principal_not_found: principalNotFound, permission_propagated: true, poll_attempts: pollAttempts, polling_elapsed_time: elapsedTime }; } else { console.log('Permission not yet propagated, waiting... (attempt ' + pollAttempts + ')'); if (pollAttempts < maxAttempts) { await delay(pollInterval); } } } catch (error) { console.log('Polling error, retrying... (attempt ' + pollAttempts + ')'); if (pollAttempts < maxAttempts) { await delay(pollInterval); } } } console.log('Permission propagation failed after ' + maxAttempts + ' attempts'); return { ...currentVariables, grant_success: success, grant_error: error, principal_not_found: principalNotFound, permission_propagated: false, polling_timeout: true, poll_attempts: maxAttempts, polling_elapsed_time: Date.now() - startTime }; }"
    },
    {
      "step": 2,
      "name": "test_select_access",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token2}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "SELECT * FROM ${catalog_name}.silver.sdtm_dm LIMIT 5",
        "warehouse_id": "${warehouse_id}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const success = responseData?.status?.state === 'SUCCEEDED'; return { ...currentVariables, select_success: success }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const grantStep = stepResults.grant_select_permission; const accessStep = stepResults.test_select_access; const expected_result = 'Result: User2 can SELECT from table through account-level group membership'; let actual_result = 'Authorization test not completed'; if (!grantStep || !grantStep.data) { actual_result = 'No response received from grant operation.'; return { status: 'fail', message: actual_result, code: 'GRANT_NO_RESPONSE', test_id: 'OQ-105-5', title: 'Authorization Access (Role) - Positive', expected_result, actual_result }; } if (variables.principal_not_found) { actual_result = 'Account-level group TEMP_' + (variables.catalog_name || 'catalog') + '_OQ105 not available in SQL engine yet (timing issue).'; return { status: 'fail', message: actual_result, code: 'PRINCIPAL_NOT_FOUND', test_id: 'OQ-105-5', title: 'Authorization Access (Role) - Positive', expected_result, actual_result }; } if (!variables.grant_success) { actual_result = 'Failed to grant SELECT permission to account-level group: ' + (variables.grant_error || 'Unknown error'); return { status: 'fail', message: actual_result, code: 'GRANT_SELECT_FAILED', test_id: 'OQ-105-5', title: 'Authorization Access (Role) - Positive', expected_result, actual_result }; } if (variables.polling_timeout) { const elapsedTime = variables.polling_elapsed_time || 0; actual_result = 'Permission propagation timeout after ' + (elapsedTime/1000).toFixed(1) + ' seconds.'; return { status: 'fail', message: actual_result, code: 'PERMISSION_TIMEOUT', test_id: 'OQ-105-5', title: 'Authorization Access (Role) - Positive', expected_result, actual_result }; } if (!variables.permission_propagated) { actual_result = 'Permission propagation polling did not complete successfully.'; return { status: 'fail', message: actual_result, code: 'PERMISSION_PROPAGATION_FAILED', test_id: 'OQ-105-5', title: 'Authorization Access (Role) - Positive', expected_result, actual_result }; } if (!accessStep || !accessStep.data || !variables.select_success) { actual_result = 'Query did not succeed for test user after permission propagation.'; return { status: 'fail', message: actual_result, code: 'AUTH_ACCESS_ROLE_POSITIVE_FAILED', test_id: 'OQ-105-5', title: 'Authorization Access (Role) - Positive', expected_result, actual_result }; } const catalogName = variables.catalog_name || 'catalog'; const pollAttempts = variables.poll_attempts || 0; const elapsedTime = variables.polling_elapsed_time || 0; actual_result = 'Query succeeded for test user after permission propagation through account-level group membership (polled ' + pollAttempts + ' times in ' + (elapsedTime/1000).toFixed(1) + ' seconds).'; return { status: 'pass', message: 'Authorization validation passed: User2 can SELECT from ' + catalogName + '.silver.sdtm_dm through account-level group TEMP_' + catalogName + '_OQ105', code: 'AUTH_ACCESS_ROLE_POSITIVE_PASSED', test_id: 'OQ-105-5', title: 'Authorization Access (Role) - Positive', expected_result, actual_result }; }",
  "manual_procedure": "Grant SELECT permission to account-level group TEMP_{catalog_name}_OQ105, wait for permissions to propagate (with polling for 3 minutes), and verify user2 can access table through group membership."
} 