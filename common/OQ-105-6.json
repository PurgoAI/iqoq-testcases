{
  "title": "Authorization Access (Role) - Revoke",
  "test_description": "Authorization Access (Role) - Revoke: Revoke SELECT permission from TEMP_GROUP_OQ104 and verify user2 cannot access table.",
  "version": "2.1",
  "test_code": "OQ-105-6",
  "test_seq": 6,
  "test_suite": "OQ-105",
  "test_suite_title": "Data Governance",
  "category": "OQ",
  "api_calls": [
    {
      "step": 1,
      "name": "revoke_select_permission",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "REVOKE SELECT ON TABLE iq_oq_demo.silver.sdtm_dm FROM TEMP_GROUP_OQ104",
        "warehouse_id": "${warehouse_id}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const success = responseData?.status?.state === 'SUCCEEDED'; const error = responseData?.status?.error?.message || ''; const principalNotFound = error.toLowerCase().includes('principal') && error.toLowerCase().includes('not found'); return { ...currentVariables, revoke_success: success, revoke_error: error, principal_not_found: principalNotFound }; }"
    },
    {
      "step": 2,
      "name": "wait_for_permissions",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token2}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "SELECT * FROM iq_oq_demo.silver.sdtm_dm LIMIT 5",
        "warehouse_id": "${warehouse_id}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const maxRetries = 6; const retryDelay = 5000; const currentRetry = currentVariables.permission_retry_count || 0; const startTime = currentVariables.permission_start_time || Date.now(); const elapsedTime = Date.now() - startTime; const maxWaitTime = 30000; if (currentRetry === 0) { return { ...currentVariables, permission_retry_count: 1, permission_start_time: startTime, wait_completed: false }; } if (elapsedTime >= maxWaitTime) { return { ...currentVariables, wait_completed: true, wait_timeout: true }; } if (currentRetry < maxRetries) { setTimeout(() => { currentVariables.permission_retry_count = currentRetry + 1; }, retryDelay); return { ...currentVariables, permission_retry_count: currentRetry + 1, wait_completed: false }; } return { ...currentVariables, wait_completed: true, wait_success: true }; }"
    },
    {
      "step": 3,
      "name": "test_unauthorized_access",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token2}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "SELECT * FROM iq_oq_demo.silver.sdtm_dm LIMIT 5",
        "warehouse_id": "${warehouse_id}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const statusCode = responseData?.status?.state || 'UNKNOWN'; const errorMessage = responseData?.status?.error?.message || ''; const sqlState = responseData?.status?.sql_state || ''; const isPermissionError = statusCode === 'FAILED' && (errorMessage.toLowerCase().includes('permission') || errorMessage.toLowerCase().includes('privileges') || errorMessage.toLowerCase().includes('access') || errorMessage.toLowerCase().includes('unauthorized') || errorMessage.toLowerCase().includes('forbidden') || errorMessage.toLowerCase().includes('insufficient') || errorMessage.toLowerCase().includes('permission_denied') || errorMessage.toLowerCase().includes('insufficient_permissions') || sqlState === '42501' || sqlState === '42000'); return { ...currentVariables, is_permission_error: isPermissionError, error_message: errorMessage, sql_state: sqlState }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const revokeStep = stepResults.revoke_select_permission; const waitStep = stepResults.wait_for_permissions; const accessStep = stepResults.test_unauthorized_access; const expected_result = 'Result: Access denied with permission error after revoke'; let actual_result = 'Authorization test not completed'; if (!revokeStep || !revokeStep.data) { actual_result = 'No response received from revoke operation.'; return { status: 'fail', message: actual_result, code: 'REVOKE_NO_RESPONSE', test_id: 'OQ-105-6', title: 'Authorization Access (Role) - Revoke', expected_result, actual_result }; } if (variables.principal_not_found) { actual_result = 'Group TEMP_GROUP_OQ104 not available in SQL engine yet (timing issue).'; return { status: 'fail', message: actual_result, code: 'PRINCIPAL_NOT_FOUND', test_id: 'OQ-105-6', title: 'Authorization Access (Role) - Revoke', expected_result, actual_result }; } if (!variables.revoke_success) { actual_result = 'Failed to revoke SELECT permission: ' + (variables.revoke_error || 'Unknown error'); return { status: 'fail', message: actual_result, code: 'REVOKE_SELECT_FAILED', test_id: 'OQ-105-6', title: 'Authorization Access (Role) - Revoke', expected_result, actual_result }; } if (variables.wait_timeout) { actual_result = 'Permission propagation timeout after 30 seconds.'; return { status: 'fail', message: actual_result, code: 'PERMISSION_TIMEOUT', test_id: 'OQ-105-6', title: 'Authorization Access (Role) - Revoke', expected_result, actual_result }; } const isPermissionError = variables.is_permission_error; const errorMessage = variables.error_message || ''; if (isPermissionError) { actual_result = 'Access denied: ' + errorMessage; return { status: 'pass', message: 'Authorization validation passed: User2 SELECT access properly denied after revoke', code: 'AUTH_ACCESS_ROLE_REVOKE_PASSED', test_id: 'OQ-105-6', title: 'Authorization Access (Role) - Revoke', expected_result, actual_result }; } else if (accessStep.data.status && accessStep.data.status.state === 'SUCCEEDED') { actual_result = 'Access granted (should have failed).'; return { status: 'fail', message: 'Authorization validation failed: User2 SELECT access was not revoked', code: 'AUTH_ACCESS_ROLE_REVOKE_FAILED', test_id: 'OQ-105-6', title: 'Authorization Access (Role) - Revoke', expected_result, actual_result }; } else { actual_result = 'Query failed but not due to permission error: ' + errorMessage; return { status: 'fail', message: 'Query failed but not due to permission error: ' + errorMessage, code: 'AUTH_ACCESS_ROLE_REVOKE_UNEXPECTED_ERROR', test_id: 'OQ-105-6', title: 'Authorization Access (Role) - Revoke', expected_result, actual_result }; } }",
  "manual_procedure": "Revoke SELECT permission from TEMP_GROUP_OQ104, wait for permissions to propagate (with polling), and verify user2 cannot access table."
} 