{
  "title": "Authorization Access (Role) - Revoke",
  "test_description": "Authorization Access (Role) - Revoke: Revoke SELECT permission from account-level group TEMP_{catalog_name}_OQ105 and verify user2 cannot access table.",
  "version": "2.4",
  "test_code": "OQ-105-6",
  "test_seq": 6,
  "test_suite": "OQ-105",
  "test_suite_title": "Data Governance",
  "category": "OQ",
  "api_calls": [
    {
      "step": 1,
      "name": "revoke_select_permission",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "REVOKE SELECT ON TABLE ${catalog_name}.silver.sdtm_dm FROM TEMP_${catalog_name}_OQ105",
        "warehouse_id": "${warehouse_id}"
      },
      "post_processing": "async function processStep(responseData, currentVariables) { const success = responseData?.status?.state === 'SUCCEEDED'; if (!success) { return { ...currentVariables, revoke_success: success }; } console.log('Starting permission revocation polling for OQ-105-6...'); const startTime = Date.now(); const maxWaitTime = 60000; // 1 minute const pollInterval = 5000; // 5 seconds let pollAttempts = 0; const maxAttempts = 12; // 1 minute / 5 seconds while (pollAttempts < maxAttempts) { pollAttempts++; const elapsedTime = Date.now() - startTime; console.log('Permission revocation polling attempt ' + pollAttempts + ' of ' + maxAttempts + ' (elapsed: ' + (elapsedTime/1000).toFixed(1) + 's)'); if (elapsedTime >= maxWaitTime) { console.log('Permission revocation timeout after 1 minute'); return { ...currentVariables, revoke_success: success, permission_revoked: false, polling_timeout: true, poll_attempts: pollAttempts, polling_elapsed_time: elapsedTime }; } try { const response = await axios.post(`${currentVariables.workspace_url}/api/2.0/sql/statements`, { statement: 'SELECT * FROM ' + currentVariables.catalog_name + '.silver.sdtm_dm LIMIT 1', warehouse_id: currentVariables.warehouse_id }, { headers: { 'Authorization': 'Bearer ' + currentVariables.token2, 'Content-Type': 'application/json' } }); const pollSuccess = response.data?.status?.state === 'SUCCEEDED'; if (!pollSuccess) { console.log('Permission revocation successful after ' + (elapsedTime/1000).toFixed(1) + ' seconds'); return { ...currentVariables, revoke_success: success, permission_revoked: true, poll_attempts: pollAttempts, polling_elapsed_time: elapsedTime }; } else { console.log('Permission not yet revoked, waiting... (attempt ' + pollAttempts + ')'); if (pollAttempts < maxAttempts) { await delay(pollInterval); } } } catch (error) { console.log('Permission revocation confirmed after ' + (elapsedTime/1000).toFixed(1) + ' seconds (error indicates access blocked)'); return { ...currentVariables, revoke_success: success, permission_revoked: true, poll_attempts: pollAttempts, polling_elapsed_time: elapsedTime }; } } console.log('Permission revocation polling completed after ' + maxAttempts + ' attempts'); return { ...currentVariables, revoke_success: success, permission_revoked: true, poll_attempts: maxAttempts, polling_elapsed_time: Date.now() - startTime }; }"
    },
    {
      "step": 2,
      "name": "test_access_after_revoke",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token2}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "SELECT * FROM ${catalog_name}.silver.sdtm_dm LIMIT 5",
        "warehouse_id": "${warehouse_id}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const statusCode = responseData?.status?.state || 'UNKNOWN'; const errorMessage = responseData?.status?.error?.message || ''; const sqlState = responseData?.status?.sql_state || ''; const isPermissionError = statusCode === 'FAILED' && (errorMessage.toLowerCase().includes('permission') || errorMessage.toLowerCase().includes('privileges') || errorMessage.toLowerCase().includes('access') || errorMessage.toLowerCase().includes('unauthorized') || errorMessage.toLowerCase().includes('forbidden') || errorMessage.toLowerCase().includes('insufficient') || errorMessage.toLowerCase().includes('permission_denied') || errorMessage.toLowerCase().includes('insufficient_permissions') || sqlState === '42501' || sqlState === '42000'); return { ...currentVariables, access_blocked: isPermissionError, error_message: errorMessage, sql_state: sqlState }; }"
    },
    {
      "step": 3,
      "name": "remove_user_from_group",
      "method": "PATCH",
      "api_url": "${workspace_url}/api/2.0/account/scim/v2/Groups/${group_id}",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "schemas": [
          "urn:ietf:params:scim:api:messages:2.0:PatchOp"
        ],
        "Operations": [
          {
            "op": "remove",
            "path": "members[value eq \"${user2_id}\"]"
          }
        ]
      },
      "post_processing": "function processStep(responseData, currentVariables) { const success = responseData && responseData.id; return { ...currentVariables, remove_user_success: success }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const revokeStep = stepResults.revoke_select_permission; const accessStep = stepResults.test_access_after_revoke; const removeStep = stepResults.remove_user_from_group; const expected_result = 'Result: User2 access blocked after revoking permissions from account-level group'; let actual_result = 'Authorization test not completed'; if (!revokeStep || !revokeStep.data || !variables.revoke_success) { actual_result = 'Failed to revoke SELECT permission from account-level group.'; return { status: 'fail', message: actual_result, code: 'REVOKE_SELECT_FAILED', test_id: 'OQ-105-6', title: 'Authorization Access (Role) - Revoke', expected_result, actual_result }; } if (variables.polling_timeout) { const elapsedTime = variables.polling_elapsed_time || 0; actual_result = 'Permission revocation timeout after ' + (elapsedTime/1000).toFixed(1) + ' seconds.'; return { status: 'fail', message: actual_result, code: 'PERMISSION_TIMEOUT', test_id: 'OQ-105-6', title: 'Authorization Access (Role) - Revoke', expected_result, actual_result }; } if (!variables.permission_revoked) { actual_result = 'Permission revocation polling did not complete successfully.'; return { status: 'fail', message: actual_result, code: 'PERMISSION_REVOCATION_FAILED', test_id: 'OQ-105-6', title: 'Authorization Access (Role) - Revoke', expected_result, actual_result }; } if (!accessStep || !accessStep.data) { actual_result = 'No response from access test after revoke.'; return { status: 'fail', message: actual_result, code: 'NO_ACCESS_RESPONSE', test_id: 'OQ-105-6', title: 'Authorization Access (Role) - Revoke', expected_result, actual_result }; } if (variables.access_blocked) { const catalogName = variables.catalog_name || 'catalog'; const pollAttempts = variables.poll_attempts || 0; const elapsedTime = variables.polling_elapsed_time || 0; actual_result = 'User2 access properly blocked after revoking permissions from account-level group (polled ' + pollAttempts + ' times in ' + (elapsedTime/1000).toFixed(1) + ' seconds).'; return { status: 'pass', message: 'Authorization validation passed: User2 access blocked after revoking SELECT permission from account-level group TEMP_' + catalogName + '_OQ105', code: 'AUTH_ACCESS_ROLE_REVOKE_PASSED', test_id: 'OQ-105-6', title: 'Authorization Access (Role) - Revoke', expected_result, actual_result }; } else if (accessStep.data.status && accessStep.data.status.state === 'SUCCEEDED') { actual_result = 'User2 access not blocked after revoking permissions (unexpected).'; return { status: 'fail', message: actual_result, code: 'AUTH_ACCESS_ROLE_REVOKE_FAILED', test_id: 'OQ-105-6', title: 'Authorization Access (Role) - Revoke', expected_result, actual_result }; } else { actual_result = 'Access test failed for unexpected reason: ' + (variables.error_message || 'Unknown error'); return { status: 'fail', message: actual_result, code: 'AUTH_ACCESS_ROLE_REVOKE_UNEXPECTED_ERROR', test_id: 'OQ-105-6', title: 'Authorization Access (Role) - Revoke', expected_result, actual_result }; } }",
  "manual_procedure": "Revoke SELECT permission from account-level group TEMP_{catalog_name}_OQ105, wait for permissions to propagate (with polling for 1 minute), test that user2 cannot access table, and remove user2 from account-level group."
} 