{
  "title": "Authorization Access (Role) - Revoke",
  "test_description": "Authorization Access (Role) - Revoke: Revoke SELECT permission from TEMP_GROUP_OQ104 and verify user2 can no longer SELECT from the table.",
  "version": "1.0",
  "test_code": "OQ-105-6",
  "test_seq": 6,
  "test_suite": "OQ-105",
  "test_suite_title": "Data Governance",
  "category": "OQ",
  "api_calls": [
    {
      "step": 1,
      "name": "revoke_select_from_group",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "REVOKE SELECT ON TABLE ${catalog_name}.silver.sdtm_dm FROM TEMP_GROUP_OQ104",
        "warehouse_id": "${warehouse_id}",
        "wait_timeout": "30s"
      },
      "post_processing": "async function processStep(responseData, currentVariables) { await delay(5000); logger.debug('Waited 5s after revoking SELECT permission'); return currentVariables; }"
    },
    {
      "step": 2,
      "name": "test_select_access",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token2}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "SELECT * FROM ${catalog_name}.silver.sdtm_dm LIMIT 5",
        "warehouse_id": "${warehouse_id}",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { return currentVariables; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const revokeStep = stepResults.revoke_select_from_group; const accessStep = stepResults.test_select_access; const expected_result = 'Result: Query Failed'; let actual_result = ''; if (!revokeStep || !revokeStep.data || revokeStep.data.status.state !== 'SUCCEEDED') { let errorMsg = 'Unknown error'; if (revokeStep && revokeStep.data && revokeStep.data.status && revokeStep.data.status.error) { errorMsg = revokeStep.data.status.error.message || revokeStep.data.status.error; } actual_result = 'Failed to revoke SELECT permission: ' + errorMsg; return { status: 'fail', message: actual_result, code: 'REVOKE_SELECT_FAILED', test_id: 'OQ-105-6', title: 'Authorization Access (Role) - Revoke', expected_result, actual_result }; } const data = accessStep.data; if (data && data.status && data.status.state === 'FAILED') { const errorMsg = data.status.error ? data.status.error.message : ''; if (errorMsg && (errorMsg.indexOf('permission') !== -1 || errorMsg.indexOf('Permission') !== -1 || errorMsg.indexOf('PERMISSION') !== -1 || errorMsg.indexOf('access') !== -1 || errorMsg.indexOf('Access') !== -1 || errorMsg.indexOf('ACCESS') !== -1 || errorMsg.indexOf('denied') !== -1 || errorMsg.indexOf('Denied') !== -1 || errorMsg.indexOf('DENIED') !== -1 || errorMsg.indexOf('Forbidden') !== -1 || errorMsg.indexOf('FORBIDDEN') !== -1 || errorMsg.indexOf('forbidden') !== -1)) { actual_result = 'Access denied: ' + errorMsg; return { status: 'pass', message: 'Authorization validation passed: User2 SELECT access properly denied after revoke', code: 'AUTH_ACCESS_ROLE_REVOKE_PASSED', test_id: 'OQ-105-6', title: 'Authorization Access (Role) - Revoke', expected_result, actual_result }; } actual_result = 'Query failed: ' + errorMsg; } else { actual_result = 'Query did not fail as expected.'; } return { status: 'fail', message: 'Authorization validation failed: User2 SELECT access was not revoked', code: 'AUTH_ACCESS_ROLE_REVOKE_FAILED', test_id: 'OQ-105-6', title: 'Authorization Access (Role) - Revoke', expected_result, actual_result }; }",
  "manual_procedure": "Revoke SELECT from TEMP_<ORG>_OQ104 for <catalog name>.<schema name>.<table name>. While logged into the user account, In SQL Editor write a select query for <catalog name>.<schema name>.<table name> and run"
} 