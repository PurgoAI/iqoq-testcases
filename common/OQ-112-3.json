{
  "title": "Outbound Create Recipient and Share",
  "test_description": "Validates Delta Sharing recipient creation by creating a new recipient and granting access to shares",
  "version": "1.0",
  "test_code": "OQ-112-3",
  "manual_procedure": "Press \"Save and Continue\" in the \"Add notebooks\" section, then in the \"Add recipients\" section click the \"Select a recipient\" drop down and click \"Create new recipient\". After filling out Name, Type, and Sharing Identifier (if recipient is a Databricks customer) click \"Create and add recipient\" then click \"Share data\"",
  "test_seq": 3,
  "test_suite": "OQ-112",
  "test_suite_title": "Delta Sharing",
  "test_suite_type": "Security",
  "category": "OQ",
  "api_calls": [
    {
      "step": 1,
      "name": "check_delta_sharing_enabled",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "SHOW RECIPIENTS",
        "warehouse_id": "${warehouse_id}",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const status = responseData?.status?.state || 'UNKNOWN'; const success = status === 'SUCCEEDED'; const dataArray = responseData?.result?.data_array || []; const hasRecipients = dataArray && dataArray.length > 0; const error = responseData?.status?.error?.message || ''; const isDeltaSharingDisabled = error.includes('External Delta Sharing is not enabled'); return { ...currentVariables, delta_sharing_available: success, has_recipients: hasRecipients, recipient_count: dataArray.length, delta_sharing_disabled: isDeltaSharingDisabled }; }"
    },
    {
      "step": 2,
      "name": "create_recipient",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "CREATE RECIPIENT test_partner_company COMMENT 'Test external data consumer'",
        "warehouse_id": "${warehouse_id}",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const status = responseData?.status?.state || 'UNKNOWN'; const success = status === 'SUCCEEDED'; const statementId = responseData?.statement_id || ''; const error = responseData?.status?.error?.message || ''; const isDeltaSharingDisabled = error.includes('External Delta Sharing is not enabled'); const recipientAlreadyExists = error.includes('already exists'); const recipientAvailable = success || recipientAlreadyExists; return { ...currentVariables, recipient_created: success, recipient_already_exists: recipientAlreadyExists, recipient_available: recipientAvailable, recipient_status: status, recipient_statement_id: statementId, delta_sharing_disabled: isDeltaSharingDisabled }; }"
    },
    {
      "step": 3,
      "name": "grant_access_to_share",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "GRANT SELECT ON SHARE test_data_share_${catalog_name} TO RECIPIENT test_partner_company",
        "warehouse_id": "${warehouse_id}",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const status = responseData?.status?.state || 'UNKNOWN'; const success = status === 'SUCCEEDED'; const statementId = responseData?.statement_id || ''; return { ...currentVariables, access_granted: success, grant_status: status, grant_statement_id: statementId }; }"
    },
    {
      "step": 4,
      "name": "verify_recipient_and_grants",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "SHOW RECIPIENTS",
        "warehouse_id": "${warehouse_id}",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const dataArray = responseData?.result?.data_array || []; const testRecipientExists = dataArray.some(row => row[0] === 'test_partner_company'); const recipientCount = dataArray.length; return { ...currentVariables, test_recipient_exists: testRecipientExists, total_recipient_count: recipientCount }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const checkStep = stepResults.check_delta_sharing_enabled; const createRecipientStep = stepResults.create_recipient; const grantStep = stepResults.grant_access_to_share; const verifyStep = stepResults.verify_recipient_and_grants; const expected_result = 'Succeeded'; let actual_result = 'Delta Sharing recipient creation failed'; const deltaSharingAvailable = variables.delta_sharing_available || false; const deltaSharingDisabled = variables.delta_sharing_disabled || false; if (!deltaSharingAvailable || deltaSharingDisabled) { actual_result = 'Delta Sharing is not enabled on this workspace. Contact account admin to enable External Delta Sharing on the metastore.'; return { status: 'fail', message: 'Delta Sharing functionality not available', code: 'DELTA_SHARING_NOT_ENABLED', test_id: 'OQ-112-3', title: 'Outbound Create Recipient and Share', expected_result, actual_result }; } if (createRecipientStep.error) { return { status: 'fail', message: 'Failed to create Delta Sharing recipient', code: 'RECIPIENT_CREATION_ERROR', test_id: 'OQ-112-3', title: 'Outbound Create Recipient and Share', expected_result, actual_result }; } const recipientCreated = variables.recipient_created || false; const recipientAlreadyExists = variables.recipient_already_exists || false; const recipientAvailable = variables.recipient_available || false; if (!recipientAvailable) { actual_result = `Recipient creation failed with status: ${variables.recipient_status || 'UNKNOWN'}`; return { status: 'fail', message: actual_result, code: 'RECIPIENT_CREATION_FAILED', test_id: 'OQ-112-3', title: 'Outbound Create Recipient and Share', expected_result, actual_result }; } if (grantStep.error) { return { status: 'fail', message: 'Failed to grant access to share', code: 'ACCESS_GRANT_ERROR', test_id: 'OQ-112-3', title: 'Outbound Create Recipient and Share', expected_result, actual_result }; } const accessGranted = variables.access_granted || false; if (!accessGranted) { actual_result = `Access grant failed with status: ${variables.grant_status || 'UNKNOWN'}`; return { status: 'fail', message: actual_result, code: 'ACCESS_GRANT_FAILED', test_id: 'OQ-112-3', title: 'Outbound Create Recipient and Share', expected_result, actual_result }; } const testRecipientExists = variables.test_recipient_exists || false; if (testRecipientExists) { if (recipientAlreadyExists) { actual_result = 'Succeeded (recipient already existed)'; return { status: 'pass', message: 'Delta Sharing recipient already exists and access granted successfully', code: 'RECIPIENT_ALREADY_EXISTS_SUCCESS', test_id: 'OQ-112-3', title: 'Outbound Create Recipient and Share', expected_result, actual_result }; } else { actual_result = 'Succeeded'; return { status: 'pass', message: 'Delta Sharing recipient created and access granted successfully', code: 'RECIPIENT_CREATION_SUCCESS', test_id: 'OQ-112-3', title: 'Outbound Create Recipient and Share', expected_result, actual_result }; } } else { actual_result = 'Recipient created but not found in recipient list'; return { status: 'fail', message: actual_result, code: 'RECIPIENT_NOT_FOUND', test_id: 'OQ-112-3', title: 'Outbound Create Recipient and Share', expected_result, actual_result }; } }"
} 