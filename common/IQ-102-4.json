{
  "title": "Activity Auditing",
  "test_description": "Validate activity auditing by enabling the system schema",
  "version": "1.0",
  "test_code": "IQ-102-4",
  "test_seq": 4,
  "test_suite": "IQ-102",
  "test_suite_title": "Unity Catalog Configuration",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "get_metastore_id",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "SELECT CURRENT_METASTORE() AS active_metastore;",
        "warehouse_id": "${warehouse_id}",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { let metastoreId = undefined; let arr = responseData?.result?.data_array || responseData?.result?.dataArray; if (arr && Array.isArray(arr) && arr.length > 0 && Array.isArray(arr[0]) && arr[0].length > 0) { metastoreId = arr[0][0]; } if (!metastoreId && responseData?.data_array && Array.isArray(responseData.data_array) && responseData.data_array.length > 0 && Array.isArray(responseData.data_array[0]) && responseData.data_array[0].length > 0) { metastoreId = responseData.data_array[0][0]; } if (!metastoreId && responseData?.active_metastore) { metastoreId = responseData.active_metastore; } if (!metastoreId && responseData?.manifest?.results && Array.isArray(responseData.manifest.results) && responseData.manifest.results[0]?.active_metastore) { metastoreId = responseData.manifest.results[0].active_metastore; } if (!metastoreId) { logger.error('Could not extract metastore_id from response:', JSON.stringify(responseData)); return { ...currentVariables, error: 'Could not extract metastore_id from response' }; } let metastoreIdSplit = metastoreId; if (typeof metastoreId === 'string' && metastoreId.includes(':')) { metastoreIdSplit = metastoreId.split(':').pop(); } logger.debug('Extracted metastore_id:', metastoreId, 'split:', metastoreIdSplit); return { ...currentVariables, metastore_id: metastoreId, metastore_id_split: metastoreIdSplit }; }"
    },
    {
      "step": 2,
      "name": "enable_system_query_schema",
      "method": "PUT",
      "api_url": "${workspace_url}/api/2.1/unity-catalog/metastores/${metastore_id_split}/systemschemas/query",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "enabled": true
      },
      "post_processing": "function processStep(responseData, currentVariables) { if (responseData && (responseData.error_code || responseData.message)) { return { ...currentVariables, enable_system_query_schema_failed: true, enable_system_query_schema_error: responseData.message || responseData.error_code }; } return { ...currentVariables, enable_system_query_schema_failed: false }; }"
    },
    {
      "step": 3,
      "name": "get_user_id",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/preview/scim/v2/Me",
      "headers": {
        "Authorization": "Bearer ${token}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const userId = responseData.id; if (!userId) { return { ...currentVariables, error: 'Could not extract user_id from response' }; } return { ...currentVariables, user_id: userId }; }"
    },
    {
      "step": 4,
      "name": "query_audit_logs",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "warehouse_id": "${warehouse_id}",
        "statement": "SELECT account_id, workspace_id, statement_id, executed_by, session_id, execution_status, executed_by, executed_by_user_id, statement_text, statement_type, error_message, start_time, end_time FROM system.query.history WHERE executed_by_user_id = '${user_id}' ORDER BY start_time DESC LIMIT 10;",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const auditData = responseData.result?.data_array || []; const auditCount = auditData.length; return { ...currentVariables, audit_data: auditData, audit_count: auditCount, has_audit_records: auditCount > 0 }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { var metastoreStep = stepResults.get_metastore_id || {}; var enableStep = stepResults.enable_system_query_schema || {}; var userStep = stepResults.get_user_id || {}; var auditStep = stepResults.query_audit_logs || {}; var expected_result = 'Audit Tables: Accessible & populating.'; var actual_result = ''; if (metastoreStep.error) { actual_result = 'Metastore extraction failed'; return { status: 'fail', message: 'Failed to get metastore ID: ' + metastoreStep.error, code: 'NO_METASTORE_ID', test_id: 'IQ-102-4', title: 'Activity auditing', expected_result: expected_result, actual_result: actual_result }; } if (enableStep.enable_system_query_schema_failed) { actual_result = 'Audit tables not accessible: ' + (enableStep.enable_system_query_schema_error || 'Unknown error'); return { status: 'fail', message: 'Failed to enable system schema: ' + (enableStep.enable_system_query_schema_error || 'Unknown error'), code: 'SYSTEM_SCHEMA_ERROR', test_id: 'IQ-102-4', title: 'Activity auditing', expected_result: expected_result, actual_result: actual_result }; } if (userStep.error) { actual_result = 'User extraction failed'; return { status: 'fail', message: 'Failed to get user ID: ' + userStep.error, code: 'NO_USER_ID', test_id: 'IQ-102-4', title: 'Activity auditing', expected_result: expected_result, actual_result: actual_result }; } if (auditStep.error) { actual_result = 'Audit log query failed'; return { status: 'fail', message: 'Failed to query audit logs', code: 'AUDIT_QUERY_ERROR', test_id: 'IQ-102-4', title: 'Activity auditing', expected_result: expected_result, actual_result: actual_result }; } var metastoreId = metastoreStep.metastore_id || metastoreStep.data && metastoreStep.data.metastore_id; var userId = userStep.user_id || userStep.data && userStep.data.user_id; var auditData = auditStep.audit_data || auditStep.data && auditStep.data.audit_data || []; var auditCount = auditData.length; if (!metastoreId) { actual_result = 'Metastore extraction failed'; return { status: 'fail', message: 'Could not extract metastore ID from response', code: 'METASTORE_EXTRACTION_FAILED', test_id: 'IQ-102-4', title: 'Activity auditing', expected_result: expected_result, actual_result: actual_result }; } if (!userId) { actual_result = 'User extraction failed'; return { status: 'fail', message: 'Could not extract user ID from response', code: 'USER_EXTRACTION_FAILED', test_id: 'IQ-102-4', title: 'Activity auditing', expected_result: expected_result, actual_result: actual_result }; } if (auditCount === 0) { actual_result = 'Audit tables accessible, no records found'; return { status: 'fail', message: 'No audit records found for user', code: 'NO_AUDIT_RECORDS', test_id: 'IQ-102-4', title: 'Activity auditing', expected_result: expected_result, actual_result: actual_result }; } actual_result = 'Audit tables accessible, records found: ' + auditCount; return { status: 'pass', message: 'Audit system is active and recording query history. Found ' + auditCount + ' recent queries.', code: 'AUDIT_SYSTEM_ACTIVE', test_id: 'IQ-102-4', title: 'Activity auditing', expected_result: expected_result, actual_result: actual_result }; }",
  "manual_procedure": "Enable Audit system table via CLI command: databricks system-schemas enable METASTORE_ID SCHEMA_NAME"
}