{
  "title": "Activity Auditing",
  "test_description": "Validate activity auditing by enabling the system schema",
  "version": "1.0",
  "test_code": "IQ-102-4",
  "test_seq": 4,
  "test_suite": "IQ-102",
  "test_suite_title": "Unity Catalog Configuration",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "get_metastore_id",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "SELECT CURRENT_METASTORE() AS active_metastore;",
        "warehouse_id": "${warehouse_id}",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { var metastoreId = undefined; var arr = responseData && responseData.result && responseData.result.data_array; if (arr && Array.isArray(arr) && arr.length > 0 && Array.isArray(arr[0]) && arr[0].length > 0) { metastoreId = arr[0][0]; } if (!metastoreId && responseData && responseData.data_array && Array.isArray(responseData.data_array) && responseData.data_array.length > 0 && Array.isArray(responseData.data_array[0]) && responseData.data_array[0].length > 0) { metastoreId = responseData.data_array[0][0]; } if (!metastoreId && responseData && responseData.active_metastore) { metastoreId = responseData.active_metastore; } if (!metastoreId && responseData && responseData.manifest && responseData.manifest.results && Array.isArray(responseData.manifest.results) && responseData.manifest.results[0] && responseData.manifest.results[0].active_metastore) { metastoreId = responseData.manifest.results[0].active_metastore; } if (!metastoreId) { var result = {}; for (var key in currentVariables) { result[key] = currentVariables[key]; } result.metastore_id = undefined; result.metastore_id_split = undefined; result.error = 'Could not extract metastore_id from response'; return result; } var metastoreIdSplit = metastoreId; if (typeof metastoreId === 'string' && metastoreId.indexOf(':') !== -1) { metastoreIdSplit = metastoreId.split(':').pop(); } var result = {}; for (var key in currentVariables) { result[key] = currentVariables[key]; } result.metastore_id = metastoreId; result.metastore_id_split = metastoreIdSplit; return result; }"
    },
    {
      "step": 2,
      "name": "enable_system_query_schema",
      "method": "PUT",
      "api_url": "${workspace_url}/api/2.1/unity-catalog/metastores/${metastore_id_split}/systemschemas/query",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "enabled": true
      },
      "post_processing": "function processStep(responseData, currentVariables) { var result = {}; for (var key in currentVariables) { result[key] = currentVariables[key]; } if (responseData && (responseData.error_code || responseData.message)) { result.enable_system_query_schema_failed = true; result.enable_system_query_schema_error = responseData.message || responseData.error_code; return result; } result.enable_system_query_schema_failed = false; return result; }"
    },
    {
      "step": 3,
      "name": "get_user_id",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/preview/scim/v2/Me",
      "headers": {
        "Authorization": "Bearer ${token}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { var result = {}; for (var key in currentVariables) { result[key] = currentVariables[key]; } var userId = responseData && responseData.id; if (!userId) { result.error = 'Could not extract user_id from response'; return result; } result.user_id = userId; return result; }"
    },
    {
      "step": 4,
      "name": "query_audit_logs",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "warehouse_id": "${warehouse_id}",
        "statement": "SELECT account_id, workspace_id, statement_id, executed_by, session_id, execution_status, executed_by, executed_by_user_id, statement_text, statement_type, error_message, start_time, end_time FROM system.query.history WHERE executed_by_user_id = '${user_id}' ORDER BY start_time DESC LIMIT 10;",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { var result = {}; for (var key in currentVariables) { result[key] = currentVariables[key]; } var auditData = (responseData && responseData.result && responseData.result.data_array) || []; var auditCount = auditData.length; result.audit_data = auditData; result.audit_count = auditCount; result.has_audit_records = auditCount > 0; return result; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { var expected_result = 'Audit Tables: Accessible & populating.'; var actual_result = ''; var metastoreStep = stepResults && stepResults.get_metastore_id; var enableStep = stepResults && stepResults.enable_system_query_schema; var userStep = stepResults && stepResults.get_user_id; var auditStep = stepResults && stepResults.query_audit_logs; if (!metastoreStep) { actual_result = 'Metastore step missing'; return { status: 'fail', message: 'Metastore step missing from results', code: 'METASTORE_STEP_MISSING', test_id: 'IQ-102-4', title: 'Activity auditing', expected_result: expected_result, actual_result: actual_result }; } var metastoreError = (metastoreStep.data && metastoreStep.data.error) || metastoreStep.error; var metastoreId = (metastoreStep.data && metastoreStep.data.metastore_id) || metastoreStep.metastore_id; if (metastoreError) { actual_result = 'Metastore extraction failed: ' + metastoreError; return { status: 'fail', message: 'Failed to get metastore ID: ' + metastoreError, code: 'NO_METASTORE_ID', test_id: 'IQ-102-4', title: 'Activity auditing', expected_result: expected_result, actual_result: actual_result }; } if (!metastoreId) { actual_result = 'Metastore extraction failed'; return { status: 'fail', message: 'Could not extract metastore ID from response', code: 'METASTORE_EXTRACTION_FAILED', test_id: 'IQ-102-4', title: 'Activity auditing', expected_result: expected_result, actual_result: actual_result }; } var enableFailed = (enableStep && enableStep.data && enableStep.data.enable_system_query_schema_failed) || (enableStep && enableStep.enable_system_query_schema_failed); var enableError = (enableStep && enableStep.data && enableStep.data.enable_system_query_schema_error) || (enableStep && enableStep.enable_system_query_schema_error); if (enableFailed) { actual_result = 'Audit tables not accessible: ' + (enableError || 'Permission denied'); return { status: 'fail', message: 'Failed to enable system schema: ' + (enableError || 'Permission denied'), code: 'SYSTEM_SCHEMA_ERROR', test_id: 'IQ-102-4', title: 'Activity auditing', expected_result: expected_result, actual_result: actual_result }; } var userError = (userStep && userStep.data && userStep.data.error) || (userStep && userStep.error); var userId = (userStep && userStep.data && userStep.data.user_id) || (userStep && userStep.user_id); if (userError) { actual_result = 'User extraction failed: ' + userError; return { status: 'fail', message: 'Failed to get user ID: ' + userError, code: 'NO_USER_ID', test_id: 'IQ-102-4', title: 'Activity auditing', expected_result: expected_result, actual_result: actual_result }; } if (!userId) { actual_result = 'User extraction failed'; return { status: 'fail', message: 'Could not extract user ID from response', code: 'USER_EXTRACTION_FAILED', test_id: 'IQ-102-4', title: 'Activity auditing', expected_result: expected_result, actual_result: actual_result }; } var auditError = (auditStep && auditStep.data && auditStep.data.error) || (auditStep && auditStep.error); var auditData = (auditStep && auditStep.data && auditStep.data.audit_data) || (auditStep && auditStep.audit_data) || []; var auditCount = auditData.length; if (auditError) { actual_result = 'Audit log query failed: ' + auditError; return { status: 'fail', message: 'Failed to query audit logs: ' + auditError, code: 'AUDIT_QUERY_ERROR', test_id: 'IQ-102-4', title: 'Activity auditing', expected_result: expected_result, actual_result: actual_result }; } if (auditCount === 0) { actual_result = 'Audit tables accessible, no records found'; return { status: 'fail', message: 'No audit records found for user', code: 'NO_AUDIT_RECORDS', test_id: 'IQ-102-4', title: 'Activity auditing', expected_result: expected_result, actual_result: actual_result }; } actual_result = 'Audit tables accessible, records found: ' + auditCount; return { status: 'pass', message: 'Audit system is active and recording query history. Found ' + auditCount + ' recent queries.', code: 'AUDIT_SYSTEM_ACTIVE', test_id: 'IQ-102-4', title: 'Activity auditing', expected_result: expected_result, actual_result: actual_result }; }",
  "manual_procedure": "Enable Audit system table via CLI command: databricks system-schemas enable METASTORE_ID SCHEMA_NAME"
}