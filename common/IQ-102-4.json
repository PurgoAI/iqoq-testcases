{
  "title": "Activity Auditing",
  "test_description": "Validate activity auditing by enabling the system schema",
  "version": "1.0",
  "test_code": "IQ-102-4",
  "test_seq": 4,
  "test_suite": "IQ-102",
  "test_suite_title": "Unity Catalog Configuration",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "get_metastore_id",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "SELECT CURRENT_METASTORE() AS active_metastore;",
        "warehouse_id": "${warehouse_id}",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { let metastoreId = responseData?.result?.data_array?.[0]?.[0] || responseData?.data_array?.[0]?.[0] || responseData?.active_metastore; if (!metastoreId) { throw new Error('Could not extract metastore_id from response'); } let metastoreIdSplit = metastoreId; if (metastoreId.includes(':')) { metastoreIdSplit = metastoreId.split(':').pop(); } logger.debug('Extracted metastore_id:', metastoreId, 'split:', metastoreIdSplit); return { ...currentVariables, metastore_id: metastoreId, metastore_id_split: metastoreIdSplit }; }"
    },
    {
      "step": 2,
      "name": "enable_system_schema",
      "method": "PUT",
      "api_url": "${workspace_url}/api/2.1/unity-catalog/metastores/${metastore_id_split}/systemschemas/query",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "state": "ENABLE"
      },
      "post_processing": "function processStep(responseData, currentVariables) { return currentVariables; }"
    },
    {
      "step": 3,
      "name": "get_user_id",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/preview/scim/v2/Me",
      "headers": {
        "Authorization": "Bearer ${token}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const userId = responseData.id; if (!userId) { throw new Error('Could not extract user_id from response'); } return { ...currentVariables, user_id: userId }; }"
    },
    {
      "step": 4,
      "name": "query_audit_logs",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "warehouse_id": "${warehouse_id}",
        "statement": "SELECT account_id, workspace_id, statement_id, executed_by, session_id, execution_status, executed_by, executed_by_user_id, statement_text, statement_type, error_message, start_time, end_time FROM system.query.history WHERE executed_by_user_id = '${user_id}' ORDER BY start_time DESC LIMIT 10;",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const auditData = responseData.result?.data_array || []; const auditCount = auditData.length; return { ...currentVariables, audit_data: auditData, audit_count: auditCount, has_audit_records: auditCount > 0 }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const metastoreStep = stepResults.get_metastore_id; const enableStep = stepResults.enable_system_schema; const userStep = stepResults.get_user_id; const auditStep = stepResults.query_audit_logs; if (metastoreStep.error) { return { status: 'fail', message: 'Failed to get metastore ID', code: 'NO_METASTORE_ID', test_id: 'IQ-102-4', title: 'Activity auditing' }; } if (enableStep.error) { return { status: 'fail', message: 'Failed to enable system schema', code: 'SYSTEM_SCHEMA_ERROR', test_id: 'IQ-102-4', title: 'Activity auditing' }; } if (userStep.error) { return { status: 'fail', message: 'Failed to get user ID', code: 'NO_USER_ID', test_id: 'IQ-102-4', title: 'Activity auditing' }; } if (auditStep.error) { return { status: 'fail', message: 'Failed to query audit logs', code: 'AUDIT_QUERY_ERROR', test_id: 'IQ-102-4', title: 'Activity auditing' }; } const metastoreId = metastoreStep.data?.result?.data_array?.[0]?.[0]; const userId = userStep.data?.id; const auditData = auditStep.data?.result?.data_array || []; const auditCount = auditData.length; if (!metastoreId) { return { status: 'fail', message: 'Could not extract metastore ID from response', code: 'METASTORE_EXTRACTION_FAILED', test_id: 'IQ-102-4', title: 'Activity auditing' }; } if (!userId) { return { status: 'fail', message: 'Could not extract user ID from response', code: 'USER_EXTRACTION_FAILED', test_id: 'IQ-102-4', title: 'Activity auditing' }; } let metastoreIdUuid = metastoreId; if (metastoreId.includes(':')) { metastoreIdUuid = metastoreId.split(':').pop(); } if (enableStep.status !== 200) { return { status: 'fail', message: `System schema enablement failed with status ${enableStep.status}`, code: 'SYSTEM_SCHEMA_ENABLE_FAILED', test_id: 'IQ-102-4', title: 'Activity auditing' }; } if (auditCount === 0) { return { status: 'fail', message: 'No audit records found for user', code: 'NO_AUDIT_RECORDS', test_id: 'IQ-102-4', title: 'Activity auditing' }; } return { status: 'pass', message: `Audit system is active and recording query history. Found ${auditCount} recent queries.`, code: 'AUDIT_SYSTEM_ACTIVE', test_id: 'IQ-102-4', title: 'Activity auditing' }; }"
}