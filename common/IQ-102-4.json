{
  "title": "Activity Auditing",
  "test_description": "Validate activity auditing by enabling the system schema",
  "version": "1.0",
  "test_code": "IQ-102-4",
  "test_seq": 4,
  "test_suite": "IQ-102",
  "test_suite_title": "Unity Catalog Configuration",
  "test_type": "Security",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "get_metastore_id",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "SELECT CURRENT_METASTORE() AS active_metastore;",
        "warehouse_id": "${warehouse_id}",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const metastoreId = responseData && responseData.result && responseData.result.data_array && responseData.result.data_array[0] && responseData.result.data_array[0][0]; const metastoreIdUuid = metastoreId && metastoreId.includes(':') ? metastoreId.split(':').pop() : metastoreId; return { ...currentVariables, metastore_id: metastoreId, metastore_id_uuid: metastoreIdUuid }; }"
    },
    {
      "step": 2,
      "name": "enable_system_query_schema",
      "method": "PUT",
      "api_url": "${workspace_url}/api/2.1/unity-catalog/metastores/${metastore_id_uuid}/systemschemas/query",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "enabled": true
      },
      "post_processing": "function processStep(responseData, currentVariables) { return currentVariables; }"
    },
    {
      "step": 3,
      "name": "get_user_id",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/preview/scim/v2/Me",
      "headers": {
        "Authorization": "Bearer ${token}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const userId = responseData && responseData.id; return { ...currentVariables, user_id: userId }; }"
    },
    {
      "step": 4,
      "name": "query_audit_logs",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "warehouse_id": "${warehouse_id}",
        "statement": "SELECT account_id, workspace_id, statement_id, executed_by, session_id, execution_status, executed_by_user_id, statement_text, statement_type, error_message, start_time, end_time FROM system.query.history WHERE executed_by_user_id = '${user_id}' ORDER BY start_time DESC LIMIT 5;",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const auditRecords = responseData && responseData.result && responseData.result.data_array || []; return { ...currentVariables, audit_records: auditRecords, audit_count: auditRecords.length }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const expected_result = 'Audit Tables: Accessible & populating'; let actual_result = 'Audit: Unknown'; const metastoreId = variables.metastore_id; const userId = variables.user_id; const auditRecords = variables.audit_records || []; const auditCount = variables.audit_count || 0; const enableStep = stepResults.enable_system_query_schema; const enableFailed = enableStep && enableStep.status === 403; if (!metastoreId) { actual_result = 'Metastore ID not found'; return { status: 'fail', message: 'Metastore ID not found via SQL', code: 'NO_METASTORE_ID_SQL', test_id: 'IQ-102-4', title: 'Activity auditing', expected_result, actual_result }; } if (!userId) { actual_result = 'User ID not found'; return { status: 'fail', message: 'Could not extract user ID from response', code: 'USER_EXTRACTION_FAILED', test_id: 'IQ-102-4', title: 'Activity auditing', expected_result, actual_result }; } if (auditCount > 0) { actual_result = 'Audit records found: ' + auditCount; const message = enableFailed ? 'Audit system is active (already enabled). Found ' + auditCount + ' recent queries.' : 'Audit system is active and recording query history. Found ' + auditCount + ' recent queries.'; return { status: 'pass', message: message, code: 'AUDIT_SYSTEM_ACTIVE', test_id: 'IQ-102-4', title: 'Activity auditing', expected_result, actual_result }; } else { actual_result = 'No audit records found'; return { status: 'fail', message: 'Audit system is enabled but no query history records found', code: 'NO_AUDIT_RECORDS', test_id: 'IQ-102-4', title: 'Activity auditing', expected_result, actual_result }; } }",
  "manual_procedure": "Enable Audit system table via CLI command: databricks system-schemas enable METASTORE_ID SCHEMA_NAME"
}