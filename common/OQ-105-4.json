{
  "title": "Authorization Access (Role) - Negative",
  "test_description": "Authorization Access (Role) - Negative: Test that user2 cannot SELECT from table without explicit SELECT permission, even with catalog/schema permissions.",
  "version": "2.1",
  "test_code": "OQ-105-4",
  "test_seq": 4,
  "test_suite": "OQ-105",
  "test_suite_title": "Data Governance",
  "category": "OQ",
  "api_calls": [
    {
      "step": 1,
      "name": "test_select_access",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token2}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "SELECT * FROM ${catalog_name}.silver.sdtm_dm LIMIT 5",
        "warehouse_id": "${warehouse_id}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const statusCode = responseData?.status?.state || 'UNKNOWN'; const errorMessage = responseData?.status?.error?.message || ''; const sqlState = responseData?.status?.sql_state || ''; const isPermissionError = statusCode === 'FAILED' && (errorMessage.toLowerCase().includes('permission') || errorMessage.toLowerCase().includes('privileges') || errorMessage.toLowerCase().includes('access') || errorMessage.toLowerCase().includes('unauthorized') || errorMessage.toLowerCase().includes('forbidden') || errorMessage.toLowerCase().includes('insufficient') || errorMessage.toLowerCase().includes('permission_denied') || errorMessage.toLowerCase().includes('insufficient_permissions') || sqlState === '42501' || sqlState === '42000'); logger.debug('Permission error check:', { statusCode, errorMessage, sqlState, isPermissionError }); return { ...currentVariables, is_permission_error: isPermissionError, error_message: errorMessage, sql_state: sqlState }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const accessStep = stepResults.test_select_access; const expected_result = 'Result: Access denied with permission error'; let actual_result = 'Authorization test not completed'; if (!accessStep || !accessStep.data) { actual_result = 'No response received from authorization test.'; return { status: 'fail', message: actual_result, code: 'AUTH_NEGATIVE_NO_RESPONSE', test_id: 'OQ-105-4', title: 'Authorization Access (Role) - Negative', expected_result, actual_result }; } const isPermissionError = variables.is_permission_error; const errorMessage = variables.error_message || ''; if (isPermissionError) { actual_result = 'Access denied: ' + errorMessage; return { status: 'pass', message: 'Authorization validation passed: User2 access properly denied to ' + variables.catalog_name + '.silver.sdtm_dm', code: 'AUTH_NEGATIVE_PASSED', test_id: 'OQ-105-4', title: 'Authorization Access (Role) - Negative', expected_result, actual_result }; } else if (accessStep.data.status && accessStep.data.status.state === 'SUCCEEDED') { actual_result = 'Access granted (should have failed).'; return { status: 'fail', message: 'Authorization validation failed: User2 access was not denied to ' + variables.catalog_name + '.silver.sdtm_dm', code: 'AUTH_NEGATIVE_FAILED', test_id: 'OQ-105-4', title: 'Authorization Access (Role) - Negative', expected_result, actual_result }; } else { actual_result = 'Query failed but not due to permission error: ' + errorMessage; return { status: 'fail', message: 'Query failed but not due to permission error: ' + errorMessage, code: 'AUTH_NEGATIVE_UNEXPECTED_ERROR', test_id: 'OQ-105-4', title: 'Authorization Access (Role) - Negative', expected_result, actual_result }; } }",
  "manual_procedure": "Test that user2 cannot SELECT from table without explicit SELECT permission, even with catalog/schema permissions."
} 