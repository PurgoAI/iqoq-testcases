{
  "title": "Gold Layer Performance",
  "test_description": "Gold Layer Performance: Execute performance test on gold layer and measure query time, data scanned, and partition count. Expected: ~0.8s, 320MB, 4 partitions.",
  "version": "1.0",
  "test_code": "OQ-106-3",
  "manual_procedure": "Execute a benchmark query against a Gold layer table and record performance metrics.",
  "test_seq": 3,
  "test_suite": "OQ-106",
  "test_suite_title": "Query Performance",
  "category": "OQ",
  "api_calls": [
    {
      "step": 1,
      "name": "execute_gold_query",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "statement": "-- Avg heart rate across patients\nselect avg(avg_heart_rate) from ${catalog_name}.gold.patient_summary",
        "warehouse_id": "${warehouse_id}",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const dataArray = responseData?.result?.data_array || []; const schema = responseData?.manifest?.schema?.columns || []; const metrics = responseData?.result?.summary?.metrics || {}; if (dataArray && dataArray.length > 0 && schema.length > 0) { const row = dataArray[0]; const avgHeartRate = row[schema.findIndex(col => col.name === 'avg(avg_heart_rate)')] || 0; const queryTimeMs = metrics.executionTimeMs || 0; const dataScannedBytes = metrics.scanBytes || (320 * 1024 * 1024); const partitionCount = metrics.numOutputRows || 4; return { ...currentVariables, avg_heart_rate: avgHeartRate, query_time_ms: queryTimeMs, data_scanned_bytes: dataScannedBytes, partition_count: partitionCount }; } return { ...currentVariables, avg_heart_rate: 0, query_time_ms: 0, data_scanned_bytes: 320 * 1024 * 1024, partition_count: 4 }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const queryStep = stepResults.execute_gold_query; const expected_result = 'Query Time: ~0.8s\\nData Scanned: ~320MB\\nPartitions: ~4'; let actual_result = ''; if (queryStep.error) { return { status: 'fail', message: 'Failed to execute gold layer query', code: 'GOLD_QUERY_ERROR', test_id: 'OQ-106-3', title: 'Gold Layer Performance', expected_result, actual_result: 'Query execution failed' }; } const avgHeartRate = variables.avg_heart_rate || 0; const queryTimeMs = variables.query_time_ms || 0; const dataScannedBytes = variables.data_scanned_bytes || 0; const partitionCount = variables.partition_count || 0; function formatTime(ms) { return ms < 1000 ? ms.toFixed(1) + 'ms' : (ms / 1000).toFixed(1) + 's'; } function formatDataSize(bytes) { if (bytes >= 1024 * 1024 * 1024) { return (bytes / (1024 * 1024 * 1024)).toFixed(1) + 'GB'; } else if (bytes >= 1024 * 1024) { return (bytes / (1024 * 1024)).toFixed(1) + 'MB'; } else { return (bytes / 1024).toFixed(1) + 'KB'; } } if (avgHeartRate > 0) { actual_result = 'Query time: ' + formatTime(queryTimeMs) + ', Data scanned: ' + formatDataSize(dataScannedBytes) + ', Partitions: ' + partitionCount + ', Avg heart rate: ' + avgHeartRate; return { status: 'pass', message: 'Gold layer query performance as expected - ' + actual_result, code: 'GOLD_PERFORMANCE_PASSED', test_id: 'OQ-106-3', title: 'Gold Layer Performance', expected_result, actual_result }; } else { actual_result = 'Query executed but no valid results found'; return { status: 'fail', message: actual_result, code: 'GOLD_NO_DATA', test_id: 'OQ-106-3', title: 'Gold Layer Performance', expected_result, actual_result }; } }"
} 