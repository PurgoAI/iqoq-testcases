{
  "title": "Credential rotation",
  "test_description": "Validate credential rotation by testing with an expired token and ensuring the failed attempt is logged in the audit trail",
  "version": "1.0",
  "test_code": "IQ-102-2",
  "test_seq": 2,
  "test_suite": "IQ-102",
  "test_suite_title": "Unity Catalog Configuration",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "test_invalid_token",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/unity-catalog/metastores",
      "headers": {
        "Authorization": "Bearer dapi_invalid_token_12345",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { return currentVariables; }"
    },
    {
      "step": 2,
      "name": "get_current_user",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/preview/scim/v2/Me",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { let userEmail = responseData?.emails?.[0]?.value || responseData?.userName || responseData?.email; if (!userEmail) { throw new Error('Could not extract user_email from response'); } return { ...currentVariables, user_email: userEmail }; }"
    },
    {
      "step": 3,
      "name": "check_audit_log_for_failure",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "warehouse_id": "${warehouse_id}",
        "statement": "SELECT * FROM system.access.audit WHERE action_name = 'tokenLogin' AND user_identity.email = '${user_email}' AND event_time > now() - INTERVAL 5 MINUTES ORDER BY event_time DESC LIMIT 1",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const auditRecords = responseData?.result?.data_array || []; const auditCount = auditRecords.length; return { ...currentVariables, audit_records: auditRecords, audit_count: auditCount, has_audit_records: auditCount > 0 }; }"
    },
    {
      "step": 4,
      "name": "check_recent_audit_entries",
      "method": "POST",
      "api_url": "${workspace_url}/api/2.0/sql/statements",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "warehouse_id": "${warehouse_id}",
        "statement": "SELECT action_name, response.status_code, event_time FROM system.access.audit WHERE user_identity.email = '${user_email}' AND event_time > now() - INTERVAL 5 MINUTES ORDER BY event_time DESC LIMIT 10",
        "wait_timeout": "30s"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const recentAuditRecords = responseData?.result?.data_array || []; return { ...currentVariables, recent_audit_records: recentAuditRecords }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const tokenStep = stepResults.test_invalid_token; const getUserStep = stepResults.get_current_user; const auditStep = stepResults.check_audit_log_for_failure; const recentAuditStep = stepResults.check_recent_audit_entries; const expected_result = 'Access denied + audit log entry'; let actual_result = 'Access: Unknown, Audit: Not Found'; if (tokenStep.error) { return { status: 'fail', message: 'No response received from API', code: 'NO_RESPONSE', test_id: 'IQ-102-2', title: 'Credential rotation', expected_result, actual_result }; } if (getUserStep.error) { return { status: 'fail', message: 'Failed to get current user information', code: 'USER_INFO_FAILED', test_id: 'IQ-102-2', title: 'Credential rotation', expected_result, actual_result }; } const accessDenied = tokenStep && (tokenStep.status === 401 || tokenStep.status === 403); const auditLogFound = auditStep && auditStep.data && auditStep.data.result && auditStep.data.result.data_array && auditStep.data.result.data_array.length > 0; if (accessDenied && auditLogFound) { actual_result = `Access Denied (status ${tokenStep.status}) + Audit entry found.`; return { status: 'pass', message: 'Invalid token was correctly rejected and the failure was logged.', code: 'TOKEN_VALIDATION_AND_AUDIT_OK', test_id: 'IQ-102-2', title: 'Credential rotation', expected_result, actual_result }; } else if (accessDenied && !auditLogFound) { let debugInfo = ''; if (recentAuditStep && recentAuditStep.data && recentAuditStep.data.result && recentAuditStep.data.result.data_array) { const recentRecords = recentAuditStep.data.result.data_array; debugInfo = ` Recent audit entries for user (${recentRecords.length}): ` + recentRecords.map(record => `${record[0] || 'N/A'} (${record[1] || 'N/A'})`).join(', '); } actual_result = `Access Denied (status ${tokenStep.status}) but NO audit entry found.${debugInfo}`; return { status: 'fail', message: 'Access was denied, but the failed attempt was not found in the audit log.' + debugInfo, code: 'MISSING_AUDIT_ENTRY', test_id: 'IQ-102-2', title: 'Credential rotation', expected_result, actual_result }; } else { actual_result = `Access Allowed (status ${tokenStep.status})`; return { status: 'fail', message: 'Security vulnerability: Invalid token was accepted by the API.', code: 'TOKEN_VALIDATION_FAILURE', test_id: 'IQ-102-2', title: 'Credential rotation', expected_result, actual_result }; } }",
  "manual_procedure": "Attempt expired token access"
}