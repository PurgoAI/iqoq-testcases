{
  "title": "Runtime Version Validation",
  "test_description": "Execute API check for runtime version - DBR 11.3 LTS or newer. Runtime must contain \"LTS\" and version number â‰¥ 11.3",
  "version": "1.0",
  "test_code": "OQ-101-1",
  "test_seq": 1,
  "test_suite": "OQ-101",
  "test_suite_title": "Cluster Availability",
  "category": "OQ",
  "api_calls": [
    {
      "step": 1,
      "name": "get_cluster_info",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/clusters/get",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "cluster_id": "${cluster_id}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const sparkVersion = responseData.spark_version || 'Unknown'; const clusterName = responseData.cluster_name || 'Unknown'; const releaseVersion = responseData.release_version || 'Unknown'; logger.debug('Cluster info:', { sparkVersion, clusterName, releaseVersion }); return { ...currentVariables, spark_version: sparkVersion, cluster_name: clusterName, release_version: releaseVersion }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const clusterStep = stepResults.get_cluster_info; if (clusterStep.error) { return { status: 'fail', message: 'No response received from API', code: 'NO_RESPONSE', test_id: 'OQ-101-1', title: 'Cluster Version' }; } const apiOutput = clusterStep.data; try { const minVersion = variables.oq_101_1_min_version || '11.3'; const ltsRequired = variables.oq_101_1_lts_required !== undefined ? variables.oq_101_1_lts_required : true; if (!apiOutput.spark_version) { return { status: 'fail', message: 'Spark version information not available', code: 'NO_SPARK_VERSION', test_id: 'OQ-101-1', title: 'Cluster Version' }; } const sparkVersion = apiOutput.spark_version; const versionMatch = sparkVersion.match(/(\\d+\\.\\d+)/); const isLTS = sparkVersion.toLowerCase().includes('lts'); if (versionMatch) { const version = versionMatch[1]; if (parseFloat(version) >= parseFloat(minVersion) && (!ltsRequired || isLTS)) { return { status: 'pass', message: `Cluster meets minimum version (${minVersion}) and LTS requirement: ${ltsRequired}`, code: 'VALID_CLUSTER_VERSION', test_id: 'OQ-101-1', title: 'Cluster Version' }; } else { let message = `Cluster version ${version} does not meet minimum requirement of ${minVersion}`; if (ltsRequired && !isLTS) { message += ' and is not LTS'; } return { status: 'fail', message: message, code: 'OUTDATED_CLUSTER_VERSION', test_id: 'OQ-101-1', title: 'Cluster Version' }; } } else { return { status: 'fail', message: 'Cluster version not found in spark version: ' + sparkVersion, code: 'NO_CLUSTER_VERSION', test_id: 'OQ-101-1', title: 'Cluster Version' }; } } catch (error) { return { status: 'fail', message: 'Error processing cluster version data: ' + error.message, code: 'PROCESSING_ERROR', test_id: 'OQ-101-1', title: 'Cluster Version' }; } }"
} 