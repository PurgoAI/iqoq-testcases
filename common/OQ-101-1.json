{
  "title": "Runtime Version Validation",
  "test_description": "Execute API check for runtime version - DBR 11.3 LTS or newer. Runtime must contain \"LTS\" and version number â‰¥ 11.3",
  "version": "1.0",
  "test_code": "OQ-101-1",
  "test_seq": 1,
  "test_suite": "OQ-101",
  "test_suite_title": "Cluster Availability",
  "category": "OQ",
  "api_calls": [
    {
      "step": 1,
      "name": "get_cluster_info",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/clusters/get",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "cluster_id": "${cluster_id}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const sparkVersion = responseData.spark_version || 'Unknown'; const clusterName = responseData.cluster_name || 'Unknown'; const releaseVersion = responseData.release_version || 'Unknown'; logger.debug('Cluster info:', { sparkVersion, clusterName, releaseVersion }); return { ...currentVariables, spark_version: sparkVersion, cluster_name: clusterName, release_version: releaseVersion }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const clusterStep = stepResults.get_cluster_info; if (clusterStep.error) { return { status: 'fail', message: 'Failed to get cluster information', code: 'CLUSTER_INFO_ERROR', test_id: 'OQ-101-1', title: 'Runtime Version Validation' }; } const sparkVersion = clusterStep.data?.spark_version || 'Unknown'; const clusterName = clusterStep.data?.cluster_name || 'Unknown'; if (clusterStep.status !== 200) { let errorMessage = 'Failed to get cluster runtime version'; if (clusterStep.status === 404) { errorMessage = 'Cluster not found'; } else if (clusterStep.status === 403) { errorMessage = 'Permission denied accessing cluster'; } else { errorMessage = `API error: ${clusterStep.status}`; } return { status: 'fail', message: errorMessage, code: 'RUNTIME_VERSION_ERROR', test_id: 'OQ-101-1', title: 'Runtime Version Validation' }; } if (sparkVersion === 'Unknown') { return { status: 'fail', message: 'Failed to get cluster runtime version', code: 'RUNTIME_VERSION_ERROR', test_id: 'OQ-101-1', title: 'Runtime Version Validation' }; } const minVersion = (typeof variables !== 'undefined' && variables.oq_101_1_min_version) || 11.3; const versionParts = sparkVersion.split('.'); let majorVersion = null; let isCompatible = false; if (versionParts.length >= 2) { try { majorVersion = parseFloat(versionParts[0] + '.' + versionParts[1]); isCompatible = majorVersion >= minVersion; } catch (e) { return { status: 'fail', message: `Cannot parse version number from: ${sparkVersion}`, code: 'VERSION_PARSING_ERROR', test_id: 'OQ-101-1', title: 'Runtime Version Validation' }; } } else { return { status: 'fail', message: `Cannot parse version number from: ${sparkVersion}`, code: 'VERSION_PARSING_ERROR', test_id: 'OQ-101-1', title: 'Runtime Version Validation' }; } if (isCompatible) { return { status: 'pass', message: `Runtime version validation passed: ${sparkVersion} (version ${majorVersion})`, code: 'RUNTIME_VERSION_VALIDATED', test_id: 'OQ-101-1', title: 'Runtime Version Validation' }; } const isLts = sparkVersion.includes('LTS'); if (!isLts) { return { status: 'fail', message: `Runtime version does not contain LTS: ${sparkVersion}`, code: 'LTS_REQUIREMENT_NOT_MET', test_id: 'OQ-101-1', title: 'Runtime Version Validation' }; } return { status: 'pass', message: `Runtime version validation passed: ${sparkVersion} (LTS)`, code: 'RUNTIME_VERSION_VALIDATED', test_id: 'OQ-101-1', title: 'Runtime Version Validation' }; }"
} 