{
  "title": "Runtime Version Validation",
  "test_description": "Validate that the Databricks cluster has the required runtime version (DBR 11.3 LTS or newer) for Unity Catalog compatibility",
  "version": "1.0",
  "test_code": "OQ-101-1",
  "test_seq": 1,
  "test_suite": "OQ-101",
  "test_suite_title": "Cluster Availability",
  "category": "OQ",
  "manual_procedure": "Execute API check for runtime version",
  "api_calls": [
    {
      "step": 1,
      "name": "get_cluster_info",
      "method": "GET",
      "api_url": "${workspace_url}/api/2.0/clusters/get",
      "headers": {
        "Authorization": "Bearer ${token}",
        "Content-Type": "application/json"
      },
      "payload": {
        "cluster_id": "${cluster_id}"
      },
      "post_processing": "function processStep(responseData, currentVariables) { const sparkVersion = responseData?.spark_version || 'Unknown'; const clusterName = responseData?.cluster_name || 'Unknown'; return { ...currentVariables, spark_version: sparkVersion, cluster_name: clusterName }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const clusterStep = stepResults.get_cluster_info; const requiredVersion = variables.oq_101_1_required_version || 11.3; const expected_result = `Runtime: DBR ${requiredVersion}+ or LTS`; let actual_result = 'Runtime: Not found'; if (clusterStep.error) { return { status: 'fail', message: 'Failed to get cluster information', code: 'CLUSTER_INFO_ERROR', test_id: 'OQ-101-1', title: 'Runtime Version Validation', expected_result, actual_result }; } const sparkVersion = clusterStep.data?.spark_version || 'Unknown'; if (sparkVersion === 'Unknown') { return { status: 'fail', message: 'Runtime version not found in cluster response', code: 'RUNTIME_VERSION_MISSING', test_id: 'OQ-101-1', title: 'Runtime Version Validation', expected_result, actual_result }; } actual_result = `Runtime: ${sparkVersion}`; const isLts = sparkVersion.includes('LTS'); const versionParts = sparkVersion.split('.'); let majorVersion = null; let isCompatible = false; if (versionParts.length >= 2) { try { majorVersion = parseFloat(versionParts[0] + '.' + versionParts[1]); isCompatible = majorVersion >= requiredVersion; } catch (e) { return { status: 'fail', message: `Cannot parse version number from: ${sparkVersion}`, code: 'VERSION_PARSING_ERROR', test_id: 'OQ-101-1', title: 'Runtime Version Validation', expected_result, actual_result }; } } else { return { status: 'fail', message: `Invalid version format: ${sparkVersion}`, code: 'VERSION_FORMAT_ERROR', test_id: 'OQ-101-1', title: 'Runtime Version Validation', expected_result, actual_result }; } if (isCompatible) { return { status: 'pass', message: `Runtime version ${sparkVersion} (${majorVersion}) meets requirement of DBR ${requiredVersion}+`, code: 'RUNTIME_VERSION_VALIDATED', test_id: 'OQ-101-1', title: 'Runtime Version Validation', expected_result, actual_result }; } if (isLts) { return { status: 'pass', message: `Runtime version ${sparkVersion} is LTS and meets fallback requirement`, code: 'LTS_VERSION_VALIDATED', test_id: 'OQ-101-1', title: 'Runtime Version Validation', expected_result, actual_result }; } return { status: 'fail', message: `Runtime version ${sparkVersion} (${majorVersion}) does not meet requirement of DBR ${requiredVersion}+ and is not LTS`, code: 'RUNTIME_VERSION_INSUFFICIENT', test_id: 'OQ-101-1', title: 'Runtime Version Validation', expected_result, actual_result }; }"
} 