{
  "title": "VPC Subnet Configuration",
  "test_description": "Validate that the AWS VPC has the required number of subnets with proper CIDR configuration for Databricks workspace",
  "version": "1.0",
  "test_code": "IQ-107-1",
  "test_seq": 1,
  "test_suite": "IQ-107",
  "test_suite_title": "Network Configuration",
  "test_type": "Network",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "describe_vpc",
      "method": "POST",
      "api_url": "https://ec2.${aws_region}.amazonaws.com/",
      "headers": {
        "Authorization": "${aws_signed_auth}",
        "host": "ec2.${aws_region}.amazonaws.com",
        "x-amz-date": "${aws_date}",
        "x-amz-content-sha256": "${aws_content_hash}",
        "content-type": "application/x-www-form-urlencoded"
      },
      "payload": "Action=DescribeVpcs&VpcId.1=${vpc_id}&Version=2016-11-15",
      "post_processing": "function processStep(responseData, currentVariables) { const vpcSet = responseData?.DescribeVpcsResponse?.vpcSet?.item; const vpc = Array.isArray(vpcSet) ? vpcSet[0] : vpcSet; const vpcCidr = vpc?.cidrBlock; const vpcState = vpc?.state; return { ...currentVariables, vpc_cidr_block: vpcCidr, vpc_state: vpcState }; }"
    },
    {
      "step": 2,
      "name": "describe_subnets",
      "method": "POST",
      "api_url": "https://ec2.${aws_region}.amazonaws.com/",
      "headers": {
        "Authorization": "${aws_signed_auth}",
        "host": "ec2.${aws_region}.amazonaws.com",
        "x-amz-date": "${aws_date}",
        "x-amz-content-sha256": "${aws_content_hash}",
        "content-type": "application/x-www-form-urlencoded"
      },
      "payload": "Action=DescribeSubnets&Filter.1.Name=vpc-id&Filter.1.Value.1=${vpc_id}&Version=2016-11-15",
      "post_processing": "function processStep(responseData, currentVariables) { const subnetSet = responseData?.DescribeSubnetsResponse?.subnetSet?.item || []; const subnets = Array.isArray(subnetSet) ? subnetSet : [subnetSet]; const subnetCount = subnets.length; const availabilityZones = [...new Set(subnets.map(s => s?.availabilityZone).filter(Boolean))]; const publicSubnets = subnets.filter(s => s?.mapPublicIpOnLaunch === 'true'); const privateSubnets = subnets.filter(s => s?.mapPublicIpOnLaunch === 'false'); return { ...currentVariables, subnet_count: subnetCount, subnets_data: subnets, availability_zones: availabilityZones, availability_zone_count: availabilityZones.length, public_subnet_count: publicSubnets.length, private_subnet_count: privateSubnets.length }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const vpcStep = stepResults.describe_vpc; const subnetStep = stepResults.describe_subnets; const requiredSubnets = variables.iq_107_1_required_subnets || 4; const requiredAZs = variables.iq_107_1_required_azs || 2; const requiredCidr = variables.iq_107_1_cidr_block || '/24'; const expected_result = `VPC: ${requiredSubnets} subnets across ${requiredAZs} AZs with ${requiredCidr} CIDR`; let actual_result = 'VPC: Not found'; if (vpcStep.error) { return { status: 'fail', message: 'Failed to describe VPC', code: 'VPC_DESCRIBE_FAILED', test_id: 'IQ-107-1', title: 'VPC Subnet Configuration', expected_result, actual_result }; } if (subnetStep.error) { return { status: 'fail', message: 'Failed to describe VPC subnets', code: 'SUBNET_DESCRIBE_FAILED', test_id: 'IQ-107-1', title: 'VPC Subnet Configuration', expected_result, actual_result }; } const vpcState = variables.vpc_state; if (vpcState !== 'available') { return { status: 'fail', message: `VPC is not in available state: ${vpcState}`, code: 'VPC_NOT_AVAILABLE', test_id: 'IQ-107-1', title: 'VPC Subnet Configuration', expected_result, actual_result: `VPC: ${vpcState} state` }; } const subnetCount = variables.subnet_count || 0; const azCount = variables.availability_zone_count || 0; const publicSubnetCount = variables.public_subnet_count || 0; const privateSubnetCount = variables.private_subnet_count || 0; const subnetsData = variables.subnets_data || []; let matchingCidrCount = 0; const foundCidrs = []; for (const subnet of subnetsData) { const cidrBlock = subnet.cidrBlock || ''; if (cidrBlock.includes(requiredCidr)) { matchingCidrCount++; foundCidrs.push(cidrBlock); } } const hasRequiredSubnets = subnetCount >= requiredSubnets; const hasRequiredAZs = azCount >= requiredAZs; const hasPublicAndPrivate = publicSubnetCount > 0 && privateSubnetCount > 0; const hasCidrCompliance = matchingCidrCount > 0; if (hasRequiredSubnets && hasRequiredAZs && hasPublicAndPrivate && hasCidrCompliance) { actual_result = `VPC: ${subnetCount} subnets across ${azCount} AZs (${publicSubnetCount} public, ${privateSubnetCount} private) with ${matchingCidrCount} ${requiredCidr} CIDR blocks`; return { status: 'pass', message: `VPC network configuration meets requirements. Found ${subnetCount} subnets across ${azCount} availability zones with proper public/private segmentation and ${matchingCidrCount} subnets using ${requiredCidr} CIDR.`, code: 'VPC_CONFIG_OK', test_id: 'IQ-107-1', title: 'VPC Subnet Configuration', expected_result, actual_result }; } else { actual_result = `VPC: ${subnetCount} subnets across ${azCount} AZs (${publicSubnetCount} public, ${privateSubnetCount} private) with ${matchingCidrCount} ${requiredCidr} CIDR blocks`; const issues = []; if (!hasRequiredSubnets) issues.push(`Need ${requiredSubnets} subnets, found ${subnetCount}`); if (!hasRequiredAZs) issues.push(`Need ${requiredAZs} AZs, found ${azCount}`); if (!hasPublicAndPrivate) issues.push('Need both public and private subnets'); if (!hasCidrCompliance) issues.push(`Need subnets with ${requiredCidr} CIDR`); return { status: 'fail', message: `VPC network configuration requirements not met: ${issues.join(', ')}.`, code: 'VPC_CONFIG_INSUFFICIENT', test_id: 'IQ-107-1', title: 'VPC Subnet Configuration', expected_result, actual_result }; } }",
  "manual_procedure": "1. Navigate to AWS VPC Console\n2. Find the VPC used by Databricks\n3. Check subnet configuration\n4. Verify subnets are distributed across multiple availability zones\n5. Confirm proper CIDR block allocation\n6. Ensure both public and private subnets exist"
}