{
  "title": "Network ACL and Route Table Configuration",
  "test_description": "Validate that the AWS Network ACLs and Route Tables for Databricks workspace subnets are properly configured for secure network traffic",
  "version": "1.0",
  "test_code": "IQ-107-3",
  "test_seq": 3,
  "test_suite": "IQ-107",
  "test_suite_title": "Network Configuration",
  "test_type": "Network",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "describe_network_acls",
      "method": "POST",
      "api_url": "https://ec2.${aws_region}.amazonaws.com/",
      "headers": {
        "Authorization": "${aws_signed_auth}",
        "host": "ec2.${aws_region}.amazonaws.com",
        "x-amz-date": "${aws_date}",
        "x-amz-content-sha256": "${aws_content_hash}",
        "content-type": "application/x-www-form-urlencoded"
      },
      "payload": "Action=DescribeNetworkAcls&Filter.1.Name=vpc-id&Filter.1.Value.1=${vpc_id}&Version=2016-11-15",
      "post_processing": "function processStep(responseData, currentVariables) { const naclSet = responseData?.DescribeNetworkAclsResponse?.networkAclSet?.item || []; const nacls = Array.isArray(naclSet) ? naclSet : [naclSet]; const naclCount = nacls.length; let customNaclCount = 0; let defaultNaclCount = 0; let totalIngressRules = 0; let totalEgressRules = 0; let hasRestrictiveRules = false; for (const nacl of nacls) { if (nacl?.isDefault === 'true') { defaultNaclCount++; } else { customNaclCount++; } const entries = nacl?.entrySet?.item || []; const entriesList = Array.isArray(entries) ? entries : [entries]; for (const entry of entriesList) { if (entry?.egress === 'false') { totalIngressRules++; } else { totalEgressRules++; } if (entry?.ruleAction === 'deny' && entry?.cidrBlock !== '0.0.0.0/0') { hasRestrictiveRules = true; } } } return { ...currentVariables, nacl_count: naclCount, custom_nacl_count: customNaclCount, default_nacl_count: defaultNaclCount, total_ingress_rules: totalIngressRules, total_egress_rules: totalEgressRules, has_restrictive_rules: hasRestrictiveRules }; }"
    },
    {
      "step": 2,
      "name": "describe_route_tables",
      "method": "POST",
      "api_url": "https://ec2.${aws_region}.amazonaws.com/",
      "headers": {
        "Authorization": "${aws_signed_auth}",
        "host": "ec2.${aws_region}.amazonaws.com",
        "x-amz-date": "${aws_date}",
        "x-amz-content-sha256": "${aws_content_hash}",
        "content-type": "application/x-www-form-urlencoded"
      },
      "payload": "Action=DescribeRouteTables&Filter.1.Name=vpc-id&Filter.1.Value.1=${vpc_id}&Version=2016-11-15",
      "post_processing": "function processStep(responseData, currentVariables) { const routeTableSet = responseData?.DescribeRouteTablesResponse?.routeTableSet?.item || []; const routeTables = Array.isArray(routeTableSet) ? routeTableSet : [routeTableSet]; const rtCount = routeTables.length; let publicRouteTableCount = 0; let privateRouteTableCount = 0; let hasInternetGateway = false; let hasNatGateway = false; let hasVpcEndpoints = false; for (const rt of routeTables) { const routes = rt?.routeSet?.item || []; const routesList = Array.isArray(routes) ? routes : [routes]; let isPublic = false; let isPrivate = false; for (const route of routesList) { if (route?.gatewayId && route?.gatewayId.startsWith('igw-')) { hasInternetGateway = true; isPublic = true; } if (route?.natGatewayId) { hasNatGateway = true; isPrivate = true; } if (route?.gatewayId && route?.gatewayId.startsWith('vpce-')) { hasVpcEndpoints = true; } } if (isPublic) publicRouteTableCount++; if (isPrivate) privateRouteTableCount++; const associations = rt?.associationSet?.item || []; const assocList = Array.isArray(associations) ? associations : [associations]; for (const assoc of assocList) { if (assoc?.subnetId) { const subnetId = assoc.subnetId; if (isPublic) { currentVariables[`subnet_${subnetId}_type`] = 'public'; } else if (isPrivate) { currentVariables[`subnet_${subnetId}_type`] = 'private'; } } } } return { ...currentVariables, route_table_count: rtCount, public_route_table_count: publicRouteTableCount, private_route_table_count: privateRouteTableCount, has_internet_gateway: hasInternetGateway, has_nat_gateway: hasNatGateway, has_vpc_endpoints: hasVpcEndpoints }; }"
    },
    {
      "step": 3,
      "name": "describe_vpc_endpoints",
      "method": "POST",
      "api_url": "https://ec2.${aws_region}.amazonaws.com/",
      "headers": {
        "Authorization": "${aws_signed_auth}",
        "host": "ec2.${aws_region}.amazonaws.com",
        "x-amz-date": "${aws_date}",
        "x-amz-content-sha256": "${aws_content_hash}",
        "content-type": "application/x-www-form-urlencoded"
      },
      "payload": "Action=DescribeVpcEndpoints&Filter.1.Name=vpc-id&Filter.1.Value.1=${vpc_id}&Version=2016-11-15",
      "post_processing": "function processStep(responseData, currentVariables) { const vpcEndpointSet = responseData?.DescribeVpcEndpointsResponse?.vpcEndpointSet?.item || []; const vpcEndpoints = Array.isArray(vpcEndpointSet) ? vpcEndpointSet : [vpcEndpointSet]; const endpointCount = vpcEndpoints.length; const serviceNames = vpcEndpoints.map(ep => ep?.serviceName).filter(Boolean); const hasS3Endpoint = serviceNames.some(name => name.includes('s3')); const hasDynamoEndpoint = serviceNames.some(name => name.includes('dynamodb')); return { ...currentVariables, vpc_endpoint_count: endpointCount, vpc_endpoint_services: serviceNames, has_s3_endpoint: hasS3Endpoint, has_dynamo_endpoint: hasDynamoEndpoint }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const naclStep = stepResults.describe_network_acls; const routeStep = stepResults.describe_route_tables; const endpointStep = stepResults.describe_vpc_endpoints; const expected_result = 'Network: NACLs configured, route tables segregated, VPC endpoints available'; let actual_result = 'Network: Not configured'; if (naclStep.error) { return { status: 'fail', message: 'Failed to describe Network ACLs', code: 'NACL_DESCRIBE_FAILED', test_id: 'IQ-107-3', title: 'Network ACL and Route Table Configuration', expected_result, actual_result }; } if (routeStep.error) { return { status: 'fail', message: 'Failed to describe Route Tables', code: 'ROUTE_TABLE_DESCRIBE_FAILED', test_id: 'IQ-107-3', title: 'Network ACL and Route Table Configuration', expected_result, actual_result }; } if (endpointStep.error) { return { status: 'fail', message: 'Failed to describe VPC Endpoints', code: 'VPC_ENDPOINT_DESCRIBE_FAILED', test_id: 'IQ-107-3', title: 'Network ACL and Route Table Configuration', expected_result, actual_result }; } const naclCount = variables.nacl_count || 0; const customNaclCount = variables.custom_nacl_count || 0; const hasRestrictiveRules = variables.has_restrictive_rules || false; const routeTableCount = variables.route_table_count || 0; const publicRtCount = variables.public_route_table_count || 0; const privateRtCount = variables.private_route_table_count || 0; const hasInternetGateway = variables.has_internet_gateway || false; const hasNatGateway = variables.has_nat_gateway || false; const endpointCount = variables.vpc_endpoint_count || 0; const hasS3Endpoint = variables.has_s3_endpoint || false; const hasDynamoEndpoint = variables.has_dynamo_endpoint || false; const validationNotes = []; if (naclCount > 0) { validationNotes.push(`Found ${naclCount} Network ACLs (${customNaclCount} custom)`); if (hasRestrictiveRules) { validationNotes.push('Network ACLs have restrictive rules configured'); } else { validationNotes.push('Network ACLs using default permissive rules'); } } else { validationNotes.push('No Network ACLs found'); } if (routeTableCount > 0) { validationNotes.push(`Found ${routeTableCount} route tables (${publicRtCount} public, ${privateRtCount} private)`); if (hasInternetGateway && hasNatGateway) { validationNotes.push('Both Internet Gateway and NAT Gateway configured'); } else if (hasInternetGateway) { validationNotes.push('Internet Gateway configured, no NAT Gateway'); } else { validationNotes.push('No Internet Gateway or NAT Gateway found'); } } else { validationNotes.push('No route tables found'); } if (endpointCount > 0) { validationNotes.push(`Found ${endpointCount} VPC endpoints`); if (hasS3Endpoint) { validationNotes.push('S3 VPC endpoint configured'); } if (hasDynamoEndpoint) { validationNotes.push('DynamoDB VPC endpoint configured'); } } else { validationNotes.push('No VPC endpoints configured'); } const networkChecks = [naclCount > 0, routeTableCount > 1, hasInternetGateway || hasNatGateway, endpointCount > 0]; const passedChecks = networkChecks.filter(Boolean).length; const totalChecks = networkChecks.length; const hasProperSegmentation = publicRtCount > 0 && privateRtCount > 0; if (passedChecks >= 3 && hasProperSegmentation) { actual_result = `Network: ${naclCount} NACLs, ${routeTableCount} route tables, ${endpointCount} VPC endpoints (${passedChecks}/${totalChecks} checks passed)`; const message = `Network configuration meets requirements: ${passedChecks}/${totalChecks} network checks passed with proper public/private segmentation. ${validationNotes.join('. ')}.`; return { status: 'pass', message: message, code: 'NETWORK_CONFIG_OK', test_id: 'IQ-107-3', title: 'Network ACL and Route Table Configuration', expected_result, actual_result }; } else { actual_result = `Network: Configuration issues found (${passedChecks}/${totalChecks} checks passed)`; const issues = []; if (!hasProperSegmentation) issues.push('Missing public/private subnet segregation'); if (naclCount === 0) issues.push('No Network ACLs configured'); if (routeTableCount <= 1) issues.push('Insufficient route table separation'); if (!hasInternetGateway && !hasNatGateway) issues.push('No gateway connectivity'); if (endpointCount === 0) issues.push('No VPC endpoints for AWS services'); const message = `Network configuration has issues: ${issues.join(', ')}. ${validationNotes.join('. ')}.`; return { status: 'fail', message: message, code: 'NETWORK_CONFIG_INSUFFICIENT', test_id: 'IQ-107-3', title: 'Network ACL and Route Table Configuration', expected_result, actual_result }; } }",
  "manual_procedure": "1. Navigate to AWS VPC Console\n2. Check Network ACLs section for the VPC\n3. Verify custom NACLs have appropriate ingress/egress rules\n4. Go to Route Tables section\n5. Verify separate route tables for public and private subnets\n6. Check routes include Internet Gateway for public subnets\n7. Check routes include NAT Gateway for private subnets\n8. Go to VPC Endpoints section\n9. Verify endpoints exist for S3 and other AWS services"
}