{
  "title": "VPC Flow Logs - Enabled + Storage Archived",
  "test_description": "Validate that VPC Flow Logs are enabled and properly archived to S3 for compliance and monitoring requirements",
  "version": "1.0",
  "test_code": "IQ-107-3",
  "test_seq": 3,
  "test_suite": "IQ-107",
  "test_suite_title": "Network Configuration",
  "test_type": "Network",
  "category": "IQ",
  "api_calls": [
    {
      "step": 1,
      "name": "describe_flow_logs",
      "method": "POST",
      "api_url": "https://ec2.${aws_region}.amazonaws.com/",
      "headers": {
        "Authorization": "${aws_signed_auth}",
        "host": "ec2.${aws_region}.amazonaws.com",
        "x-amz-date": "${aws_date}",
        "x-amz-content-sha256": "${aws_content_hash}",
        "content-type": "application/x-www-form-urlencoded"
      },
      "payload": "Action=DescribeFlowLogs&Filter.1.Name=resource-id&Filter.1.Value.1=${vpc_id}&Version=2016-11-15",
      "post_processing": "function processStep(responseData, currentVariables) { const flowLogSet = responseData?.DescribeFlowLogsResponse?.flowLogSet?.item || []; const flowLogs = Array.isArray(flowLogSet) ? flowLogSet : [flowLogSet]; const flowLogCount = flowLogs.length; let activeFlowLogs = 0; let s3DeliveryCount = 0; let cloudwatchDeliveryCount = 0; let hasS3Delivery = false; let s3Bucket = null; let logStatus = []; for (const flowLog of flowLogs) { if (flowLog?.flowLogStatus === 'ACTIVE') { activeFlowLogs++; logStatus.push(flowLog.flowLogStatus); } if (flowLog?.logDestinationType === 's3') { s3DeliveryCount++; hasS3Delivery = true; s3Bucket = flowLog.logDestination; } else if (flowLog?.logDestinationType === 'cloud-watch-logs') { cloudwatchDeliveryCount++; } } return { ...currentVariables, flow_log_count: flowLogCount, active_flow_logs: activeFlowLogs, s3_delivery_count: s3DeliveryCount, cloudwatch_delivery_count: cloudwatchDeliveryCount, has_s3_delivery: hasS3Delivery, s3_bucket: s3Bucket, log_status: logStatus }; }"
    },
    {
      "step": 2,
      "name": "check_s3_bucket_lifecycle",
      "method": "GET",
      "api_url": "https://${flow_log_bucket}.s3.${aws_region}.amazonaws.com/?lifecycle",
      "headers": {
        "Authorization": "${aws_signed_auth}",
        "host": "${flow_log_bucket}.s3.${aws_region}.amazonaws.com",
        "x-amz-date": "${aws_date}",
        "x-amz-content-sha256": "${aws_content_hash}"
      },
      "payload": {},
      "post_processing": "function processStep(responseData, currentVariables) { const lifecycleConfig = responseData?.LifecycleConfiguration || {}; const rules = lifecycleConfig.Rule || []; const rulesList = Array.isArray(rules) ? rules : [rules]; let hasArchival = false; let retentionDays = 0; let hasTransition = false; for (const rule of rulesList) { if (rule?.Status === 'Enabled') { const transition = rule?.Transition; if (transition) { hasTransition = true; hasArchival = true; retentionDays = Math.max(retentionDays, parseInt(transition.Days) || 0); } const expiration = rule?.Expiration; if (expiration && expiration.Days) { retentionDays = Math.max(retentionDays, parseInt(expiration.Days) || 0); } } } return { ...currentVariables, has_lifecycle_policy: rulesList.length > 0, has_archival: hasArchival, has_transition: hasTransition, retention_days: retentionDays }; }"
    }
  ],
  "response_schema": null,
  "parser_code": "function aggregateResults(stepResults) { const flowLogsStep = stepResults.describe_flow_logs; const s3LifecycleStep = stepResults.check_s3_bucket_lifecycle; const expected_result = 'VPC Flow Logs: Enabled + Storage Archived'; let actual_result = 'VPC Flow Logs: Not configured'; if (flowLogsStep.error) { return { status: 'fail', message: 'Failed to describe VPC Flow Logs', code: 'FLOW_LOGS_DESCRIBE_FAILED', test_id: 'IQ-107-3', title: 'VPC Flow Logs - Enabled + Storage Archived', expected_result, actual_result }; } const flowLogCount = variables.flow_log_count || 0; const activeFlowLogs = variables.active_flow_logs || 0; const hasS3Delivery = variables.has_s3_delivery || false; const s3Bucket = variables.s3_bucket || ''; const hasLifecyclePolicy = variables.has_lifecycle_policy || false; const hasArchival = variables.has_archival || false; const retentionDays = variables.retention_days || 0; const requiredRetentionDays = variables.iq_107_3_required_retention_days || 30; const validationNotes = []; if (flowLogCount > 0) { validationNotes.push(`Found ${flowLogCount} flow log configurations (${activeFlowLogs} active)`); } else { validationNotes.push('No VPC flow logs configured'); } if (hasS3Delivery && s3Bucket) { validationNotes.push(`Flow logs delivered to S3: ${s3Bucket.split('/')[2] || s3Bucket}`); } else if (variables.cloudwatch_delivery_count > 0) { validationNotes.push('Flow logs delivered to CloudWatch (not S3)'); } else { validationNotes.push('No flow log delivery configured'); } if (s3LifecycleStep.error) { validationNotes.push('S3 lifecycle policy check failed'); } else if (hasLifecyclePolicy) { if (hasArchival && retentionDays >= requiredRetentionDays) { validationNotes.push(`S3 lifecycle policy configured with ${retentionDays} days retention`); } else if (hasArchival) { validationNotes.push(`S3 lifecycle policy configured but retention (${retentionDays} days) below required (${requiredRetentionDays} days)`); } else { validationNotes.push('S3 lifecycle policy exists but no archival rules'); } } else { validationNotes.push('No S3 lifecycle policy configured'); } if (activeFlowLogs > 0 && hasS3Delivery && hasArchival) { if (retentionDays >= requiredRetentionDays) { actual_result = `VPC Flow Logs: Enabled + Storage Archived (${retentionDays} days retention)`; return { status: 'pass', message: `VPC flow logs enabled, delivered to S3, and lifecycle policy configured for ${retentionDays} days. Network monitoring requirements met. ${validationNotes.join('. ')}.`, code: 'FLOW_LOGS_OK', test_id: 'IQ-107-3', title: 'VPC Flow Logs - Enabled + Storage Archived', expected_result, actual_result }; } else { actual_result = `VPC Flow Logs: Enabled + Storage Archived (${retentionDays} days retention, need ${requiredRetentionDays})`; return { status: 'fail', message: `VPC flow logs enabled and archived, but retention period (${retentionDays} days) is less than required (${requiredRetentionDays} days). ${validationNotes.join('. ')}.`, code: 'INSUFFICIENT_RETENTION', test_id: 'IQ-107-3', title: 'VPC Flow Logs - Enabled + Storage Archived', expected_result, actual_result }; } } else if (activeFlowLogs > 0 && hasS3Delivery) { actual_result = 'VPC Flow Logs: Enabled + Storage (no archival policy)'; return { status: 'fail', message: `VPC flow logs enabled and delivered to S3, but no lifecycle/archival policy configured. ${validationNotes.join('. ')}.`, code: 'NO_ARCHIVAL_POLICY', test_id: 'IQ-107-3', title: 'VPC Flow Logs - Enabled + Storage Archived', expected_result, actual_result }; } else if (activeFlowLogs > 0) { actual_result = 'VPC Flow Logs: Enabled (no S3 delivery)'; return { status: 'fail', message: `VPC flow logs enabled but not delivered to S3 for archival. ${validationNotes.join('. ')}.`, code: 'NO_S3_DELIVERY', test_id: 'IQ-107-3', title: 'VPC Flow Logs - Enabled + Storage Archived', expected_result, actual_result }; } else { actual_result = 'VPC Flow Logs: Not enabled'; return { status: 'fail', message: `VPC flow logs not enabled. Network monitoring and compliance requirements not met. ${validationNotes.join('. ')}.`, code: 'FLOW_LOGS_DISABLED', test_id: 'IQ-107-3', title: 'VPC Flow Logs - Enabled + Storage Archived', expected_result, actual_result }; } }",
  "manual_procedure": "1. Navigate to AWS VPC Console\n2. Go to Flow Logs section\n3. Verify flow logs are enabled for the VPC\n4. Check that flow logs are configured to deliver to S3\n5. Navigate to S3 Console\n6. Find the flow logs S3 bucket\n7. Check Management tab for Lifecycle rules\n8. Verify archival/transition rules are configured\n9. Confirm retention period meets requirements"
}